{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hp\":{\"current\":10,\"max\":10},\"skills\":{\"hacking\":717,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":1,\"intelligence\":0},\"exp\":{\"hacking\":264303639.37420544,\"strength\":0,\"defense\":0,\"dexterity\":0,\"agility\":0,\"charisma\":0,\"intelligence\":0},\"mults\":{\"hacking_chance\":1.3802427007033742,\"hacking_speed\":1.2815733309311932,\"hacking_money\":1.636032885805896,\"hacking_grow\":1.1381098336041016,\"hacking\":1.706949059017196,\"strength\":1.1381098336041016,\"defense\":1.1381098336041016,\"dexterity\":1.3145168578127375,\"agility\":1.1950153252843068,\"charisma\":1.365731800324922,\"hacking_exp\":2.433827962240284,\"strength_exp\":1.4397089395091884,\"defense_exp\":1.4397089395091884,\"dexterity_exp\":1.4397089395091884,\"agility_exp\":1.4397089395091884,\"charisma_exp\":1.4397089395091884,\"company_rep\":1.1381098336041016,\"faction_rep\":1.1381098336041016,\"crime_money\":1.1381098336041016,\"crime_success\":1.1381098336041016,\"hacknet_node_money\":1.1381098336041016,\"hacknet_node_purchase_cost\":0.8786498196164921,\"hacknet_node_ram_cost\":0.8786498196164921,\"hacknet_node_core_cost\":0.8786498196164921,\"hacknet_node_level_cost\":0.8786498196164921,\"work_money\":1.1381098336041016,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":13,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"DataJack\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"Augmented Targeting I\"}],\"queuedAugmentations\":[{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Augmented Targeting II\"}],\"city\":\"Sector-12\",\"bitNodeN\":1,\"corporation\":null,\"gang\":null,\"bladeburner\":null,\"currentServer\":\"home\",\"factions\":[\"The Black Hand\",\"Sector-12\"],\"factionInvitations\":[\"CyberSec\"],\"hacknetNodes\":[],\"has4SData\":false,\"has4SDataTixApi\":false,\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0,\"Company Favor\":0}}},\"hasTixApiAccess\":false,\"hasWseAccount\":false,\"jobs\":{},\"karma\":0,\"numPeopleKilled\":0,\"location\":\"Alpha Enterprises\",\"money\":57599593049.34537,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":115804181936.34537,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":57599591936.34537,\"work\":0,\"servers\":-57686640000,\"other\":-312200000,\"augmentations\":-205750000}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-7361816,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":359040340069.8495,\"hacknet\":3066315.322715682,\"hacknet_expenses\":-11785951.943803553,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":61983510034.98915,\"work\":88122.24169309247,\"servers\":-220808120676.05197,\"other\":-5618800000,\"augmentations\":-70613916027.70392}},\"playtimeSinceLastAug\":26949400,\"playtimeSinceLastBitnode\":225505400,\"lastAugReset\":1698634712328,\"lastNodeReset\":-1,\"purchasedServers\":[\"qst0\",\"qst1\",\"qst2\",\"qst3\",\"qst4\",\"qst5\",\"qst6\",\"qst7\",\"qst8\",\"qst9\",\"qst10\",\"qst11\",\"qst12\",\"qst13\",\"qst14\",\"qst15\",\"qst16\",\"qst17\",\"qst18\",\"qst19\",\"qst20\",\"qst21\",\"qst22\",\"qst23\",\"qst24\"],\"scriptProdSinceLastAug\":115803945335.16306,\"sleeves\":[],\"sleevesFromCovenant\":0,\"sourceFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"exploits\":[],\"achievements\":[{\"ID\":\"NS2\",\"unlockedOn\":1698436228268},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1698437728271},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1698439954470},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1698440074470},{\"ID\":\"TOR\",\"unlockedOn\":1698441394471},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1698445474475},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1698450814473},{\"ID\":\"NITESEC\",\"unlockedOn\":1698458984259},{\"ID\":\"TRAVEL\",\"unlockedOn\":1698461504266},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1698475673059},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1698477953067},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1698517313063},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1698534473061},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1698534473065},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1698541673062}],\"terminalCommandHistory\":[\"run main.js \",\"vim main.js \",\"run main.js \",\"vim main.js \",\"run main.js \",\"vim main.js \",\"run main.js \",\"vim main.js \",\"run main.js \",\"vim main.js \",\"run main.js \",\"vim main.js \",\"run main.js \",\"vim main.js \",\"run main.js \",\"vim main.js \",\"run main.js \",\"vim main.js \",\"run main.js \",\"vim main.js \",\"run main.js \",\"vim main.js \",\"run main.js \",\"vim main.js \",\"run main.js \",\"mem work.js \",\"vim work.js \",\"run main.js \",\"run work.js 712 5\",\"ps\",\"tail work.js \",\"ls\",\"run work.js \",\"run work.js 712 5\",\"tail work.js \",\"tail work.js 712 5\",\"vim work.js \",\"run work.js 222 2\",\"tail work.js 222 2\",\"vim work.js \",\"kill work.js 222 2\",\"run work.js 222 2\",\"tail work.js 222 2\",\"s 10\",\"backdoor\",\"home\",\"run main.js \",\"vim work.js \",\"vim main.js \",\"vim work.js \"],\"lastUpdate\":1698661661980,\"lastSave\":1698661627785,\"totalPlaytime\":225505400,\"currentWork\":{\"ctor\":\"FactionWork\",\"data\":{\"type\":\"FACTION\",\"singularity\":false,\"cyclesWorked\":8795,\"factionWorkType\":\"hacking\",\"factionName\":\"The Black Hand\"}},\"focus\":false,\"entropy\":0,\"identifier\":\"1f5c81e4d12ce2\"}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":3,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":true,\"ip\":\"59.5.7.3\",\"isConnectedTo\":true,\"maxRam\":8192,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\",\"j4.msg\",\"19dfj3l1nd.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"fl1ght.exe\",\"BruteSSH.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"HTTPWorm.exe\",\"AutoLink.exe\",\"SQLInject.exe\",\"DeepscanV1.exe\",\"DeepscanV2.exe\",\"ServerProfiler.exe\"],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"core.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\n/* TODO\\nsource control / api\\nwork script updates with hacking level?\\nfix reset flag and local storage\\nbackdoor solution?\\nserver upgrade effiency\\nintegrate purchasing of servers for reset\\nwork script has data calls that could be replaced with hard numbers to save ram.\\nproject / goal management or rank\\n*/\\n\\n// config\\nconst this_filename = 'core.js'\\nconst work_script_filename = 'work.js'\\nconst hostname_prefix = 'qst';\\nlet upgrade_servers_on = false;\\nlet roll_out_on = false;\\n\\n// check for reset_server_dict\\nlet reset_server_dict = localStorage.getItem('reset_server_dict');\\nif (!reset_server_dict) {\\n  reset_server_dict = false\\n}\\n// create or load our server info to localStorage\\nlet server_dict = localStorage.getItem('server_dict');\\nif (!server_dict || reset_server_dict) {\\n  server_dict = {}\\n  reset_server_dict = false\\n} else {\\n  server_dict = JSON.parse(server_dict);\\n}\\nlet server_dict_len = Object.keys(server_dict).length;\\n\\nexport async function main(ns) {\\n  //look at NetScript it more:\\n  console.log(ns)\\n\\n  // Prepare updatable values\\n  let mem_core, mem_work, home_ram, hacking_level, server_limit, money;\\n  function update_data() {\\n    mem_core = ns.getScriptRam(this_filename);\\n    mem_work = ns.getScriptRam(work_script_filename)\\n    home_ram = ns.getServerMaxRam(\\\"home\\\")\\n    hacking_level = ns.getHackingLevel()\\n    server_limit = ns.getPurchasedServerLimit()\\n    money = ns.getServerMoneyAvailable(\\\"home\\\")\\n  }\\n  update_data()\\n\\n  // Yes or No Prompt Configs\\n  // Reset Server Data - \\n  let question = \\\"Reset Server Data?\\\"\\n  reset_server_dict = await (ns.prompt(question))\\n\\n  // Killall workers and redeploy? - Yes or No Prompt\\n  question = \\\"Roll out on all servers?\\\"\\n  roll_out_on = await (ns.prompt(question))\\n\\n  question = \\\"Upgrade Servers?\\\"\\n  upgrade_servers_on = await (ns.prompt(question))\\n\\n\\n  // Discover other servers\\n  function discover_servers(current_server) {\\n    const server_list = ns.scan(current_server);\\n    for (const server of server_list) {\\n      if (!server_dict.hasOwnProperty(server)) {\\n        server_dict[server] = ns.getServer(server);\\n      }\\n    }\\n  }\\n\\n  function run_each_server(targets) {\\n    let servers_rolled_out = 0;\\n    for (const target in targets) {\\n      let server = ns.getServer(target)\\n      discover_servers(target)\\n\\n      if (!server.hasAdminRights) {\\n        if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n          ns.brutessh(target)\\n        }\\n        if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n          ns.ftpcrack(target)\\n        }\\n        if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n          ns.relaysmtp(target)\\n        }\\n        if (ns.fileExists(\\\"HTTPWorm.ext\\\", \\\"home\\\")) {\\n          ns.httpworm(target)\\n        }\\n        if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n          ns.sqlinject(target)\\n        }\\n\\n        if (server.openPortCount >= server.numOpenPortsRequired) {\\n          ns.nuke(target);\\n        }\\n      }\\n\\n      if (roll_out_on\\n        && server.maxRam > mem_work\\n        && server.hostname != 'home') {\\n        ns.scp(work_script_filename, target)\\n        ns.killall(target)\\n        console.log(\\\"killall\\\", target)\\n        ns.exec(work_script_filename, target, Math.floor(server.maxRam / mem_work))\\n        servers_rolled_out++;\\n      }\\n\\n      if (server.maxRam > mem_work) {\\n        ns.scp(work_script_filename, target)\\n      }\\n    }\\n    // Finished roll out, turn it off.\\n    if (roll_out_on) {\\n      console.log(\\\"Finished rolling out to \\\" + servers_rolled_out + \\\" servers!\\\")\\n      roll_out_on = false;\\n    }\\n\\n  }\\n\\n  async function upgrade_servers() {\\n    for (let i = 0; i < server_limit; i++) {\\n      let hostname = hostname_prefix + i\\n      let ram = ns.getServerMaxRam(hostname) * 2\\n      let cost = ns.getPurchasedServerCost(ram)\\n      if (money > cost) {\\n        //console.log(\\\"Upgrading \\\" + hostname + \\\" to \\\" + ram)\\n        ns.upgradePurchasedServer(hostname, ram);\\n      } else {\\n        //console.log(\\\"Cannot Upgrade \\\" + hostname + \\\" to \\\" + ram + \\\"\\\\n\\\" +\\n        //\\\"$\\\" + Math.floor(money) + \\\" < Cost $\\\" + cost + \\\"\\\\n\\\" +\\n        //\\\"Short $\\\" + Math.floor(cost - money))\\n      }\\n      await ns.sleep(1000);\\n    }\\n  }\\n\\n  // Home Work\\n  discover_servers('home')\\n  ns.killall(\\\"home\\\") // why doesn't it stop itself lol\\n  console.log(home_ram, mem_core, mem_work, (home_ram - mem_core) / mem_work);\\n  ns.exec(work_script_filename, \\\"home\\\", Math.floor((home_ram - mem_core) / mem_work))\\n\\n  // Save the server_dict to localStorage\\n  localStorage.setItem('reset_server_dict', reset_server_dict);\\n  localStorage.setItem('server_dict', JSON.stringify(server_dict));\\n  server_dict_len = Object.keys(server_dict).length;\\n  console.log(server_dict, server_dict_len)\\n\\n  // core while-loop\\n  while (true) {\\n    update_data();\\n    run_each_server(server_dict);\\n    if (upgrade_servers_on) {\\n      await upgrade_servers()\\n    }\\n    await ns.sleep(1000);\\n    console.log(\\\"core looping\\\")\\n  }\\n}\",\"filename\":\"core.js\",\"server\":\"home\"}}],[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  //const data = ns.args[0]\\n  //TODO pass all the main data? might be slow?\\n  const hack_level = ns.args[0];\\n  const ports_open = ns.args[1];\\n\\n  // Gerenate server data, don't hard code\\n  // or use copy pasta fix thisGPT lol\\n  // as you can see below tho, it works.\\n  // scan-analyze 10\\n  // copy the data and ask for it in the right form, sort in python\\n  // server_data.sort(key=lambda x: (x[2], x[1]), reverse=True)\\n  const server_data = [['solaris', 912, 5],\\n  ['defcomm', 903, 5],\\n  ['taiyang-digital', 888, 5],\\n  ['aerocorp', 887, 5],\\n  ['icarus', 885, 5],\\n  ['infocomm', 876, 5],\\n  ['galactic-cyber', 869, 5],\\n  ['omnia', 853, 5],\\n  ['deltaone', 849, 5],\\n  ['syscore', 849, 5],\\n  ['zeus-med', 832, 5],\\n  ['zb-institute', 726, 5],\\n  ['darkweb', 1, 5],\\n  ['univ-energy', 840, 4],\\n  ['unitalife', 813, 4],\\n  ['nova-med', 786, 4],\\n  ['global-pharm', 777, 4],\\n  ['zb-def', 776, 4],\\n  ['snap-fitness', 711, 4],\\n  ['lexo-corp', 689, 4],\\n  ['alpha-ent', 600, 4],\\n  ['aevum-police', 441, 4],\\n  ['millenium-fitness', 525, 3],\\n  ['rho-construction', 510, 3],\\n  ['summit-uni', 466, 3],\\n  ['rothman-uni', 430, 3],\\n  ['catalyst', 409, 3],\\n  ['netlink', 401, 3],\\n  ['I.I.I.I', 340, 3],\\n  ['computek', 320, 3],\\n  ['johnson-ortho', 292, 2],\\n  ['the-hub', 280, 2],\\n  ['crush-fitness', 246, 2],\\n  ['avmnite-02h', 212, 2],\\n  ['omega-net', 205, 2],\\n  ['silver-helix', 150, 2],\\n  ['phantasy', 100, 2],\\n  ['iron-gym', 100, 1],\\n  ['max-hardware', 80, 1],\\n  ['zer0', 75, 1],\\n  ['CSEC', 53, 1],\\n  ['neo-net', 50, 1],\\n  ['harakiri-sushi', 40, 0],\\n  ['hong-fang-tea', 30, 0],\\n  ['nectar-net', 20, 0],\\n  ['joesguns', 10, 0],\\n  ['sigma-cosmetics', 5, 0],\\n  ['n00dles', 1, 0],\\n  ['foodnstuff', 1, 0]]\\n\\n  function select_target(hackLevel, portsOpen, data) {\\n    let highestValue = -1; // Init with a low value\\n    let target = null;\\n\\n    for (let i = 0; i < data.length; i++) {\\n      let serverHackLevel = data[i][1];\\n      let serverPortsOpen = data[i][2];\\n\\n      if (serverHackLevel <= hackLevel && serverPortsOpen <= portsOpen) {\\n        // use a better formula here this just avoids hacking home and dark-net\\n        let value = serverHackLevel * serverPortsOpen;\\n\\n        if (value > highestValue) {\\n          highestValue = value;\\n          target = data[i][0];\\n        }\\n      }\\n    }\\n\\n    return target;\\n  }\\n\\n  let target = select_target(hack_level, ports_open, server_data);\\n\\n  console.log(\\\"work.js\\\", \\\"target: \\\" + target, ns.args)\\n\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n  const justhack = false; //true;\\n  const time_options = {\\n  hour: '2-digit',\\n  minute: '2-digit',\\n  second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    ns.print(formattedTime);\\n    if (justhack) {\\n      await ns.hack(target);\\n    } else if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      await ns.grow(target);\\n    } else {\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"home\"}}],[\"destroy-servers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n// delete servers\\nexport async function main(ns) {\\n    let servers = ns.getPurchasedServers();\\n    console.log(\\\"Servers:\\\", servers)\\n    for (let i = 0; i<servers.length; i++) {\\n      ns.killall(servers[i])\\n      ns.deleteServer(servers[i])\\n    }\\n    console.log(\\\"Deleted all purchased servers\\\", servers)\\n}\",\"filename\":\"destroy-servers.js\",\"server\":\"home\"}}],[\"backup.work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = 'silver-helix'\\n    const moneyThresh = ns.getServerMaxMoney(target);\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n    // Infinite loop that continously hacks/grows/weakens the target server\\n    while(true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target);\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target);\\n        } else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\",\"filename\":\"backup.work.js\",\"server\":\"home\"}}],[\"purchase-servers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const ram = 4;\\n    const mem_work = ns.getScriptRam('work.js')\\n    const hostname_prefix = 'qst';\\n    let i = 0;\\n    while (i < ns.getPurchasedServerLimit()) {\\n        if (ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram)) {\\n            let hostname = hostname_prefix + i\\n            ns.purchaseServer(hostname, ram);\\n            ns.scp(\\\"work.js\\\", hostname);\\n            ns.exec(\\\"work.js\\\", hostname, Math.floor(ram/mem_work));\\n            ++i;\\n        }\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"purchase-servers.js\",\"server\":\"home\"}}],[\"upgrade_servers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  const hostname_prefix = 'qst';\\n  while (true) {\\n    let i = 0;\\n    for (let i = 0; i < ns.getPurchasedServerLimit(); i++) {\\n      let hostname = hostname_prefix + i\\n      let money = ns.getServerMoneyAvailable(\\\"home\\\")\\n      let ram = ns.getServerMaxRam(hostname) * 2\\n      let cost = ns.getPurchasedServerCost(ram)\\n      console.log(money, ram, cost)\\n      if (money > cost) {\\n        ns.upgradePurchasedServer(hostname, ram);\\n      }\\n      await ns.sleep(1000);\\n    }\\n  }\\n}\",\"filename\":\"upgrade_servers.js\",\"server\":\"home\"}}],[\"server_list.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const server_names = [// Private and Known Servers\\n  /**/ // Private Servers\\n  \\\"qst0\\\", \\\"qst1\\\", \\\"qst2\\\", \\\"qst3\\\", \\\"qst4\\\",\\n  \\\"qst5\\\", \\\"qst6\\\", \\\"qst7\\\", \\\"qst8\\\", \\\"qst9\\\",\\n  \\\"qst10\\\", \\\"qst11\\\", \\\"qst12\\\", \\\"qst13\\\", \\\"qst14\\\",\\n  \\\"qst15\\\", \\\"qst16\\\", \\\"qst17\\\", \\\"qst18\\\", \\\"qst19\\\",\\n  \\\"qst20\\\", \\\"qst21\\\", \\\"qst22\\\", \\\"qst23\\\", \\\"qst24\\\",\\n  /**/\\n  \\\"n00dles\\\",\\n  \\\"foodnstuff\\\",\\n  \\\"nectar-net\\\",\\n  \\\"sigma-cosmetics\\\",\\n  \\\"joesguns\\\",\\n  \\\"iron-gym\\\",\\n  \\\"max-hardware\\\",\\n  \\\"neo-net\\\",\\n  \\\"zer0\\\",\\n  \\\"the-hub\\\",\\n  \\\"phantasy\\\",\\n  \\\"silver-helix\\\",\\n  \\\"avmnite-02h\\\",\\n  \\\"johnson-ortho\\\",\\n  \\\"crush-fitness\\\",\\n  \\\"summit-uni\\\",\\n  \\\"computek\\\",\\n  \\\"rothman-uni\\\",\\n  \\\"catalyst\\\",\\n  \\\"netlink\\\",\\n  \\\"I.I.I.I\\\",\\n  \\\"zb-institute\\\",\\n  //\\\"home\\\"\\n];\",\"filename\":\"server_list.js\",\"server\":\"home\"}}],[\"testing.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\n/* TODO\\nwork script updates with hacking level?\\nfix reset flag and local storage\\nbackdoor solution?\\nintegrate purchasing of servers for reset\\nwork script has data calls that could be replaced with hard numbers to save ram.\\nproject / goal management or rank\\n*/\\n\\n// config\\nconst this_filename = 'core.js'\\nconst work_script_filename = 'work.js'\\nconst hostname_prefix = 'qst';\\nlet upgrade_servers_on = false;\\nlet roll_out_on = false;\\n// check for reset_server_dict\\nlet reset_server_dict = localStorage.getItem('reset_server_dict');\\n\\n// create or load our server info to localStorage\\nlet server_dict = localStorage.getItem('server_dict');\\nif (!server_dict || reset_server_dict) {\\n  server_dict = {}\\n  reset_server_dict = false\\n} else {\\n  server_dict = JSON.parse(server_dict);\\n}\\nlet server_dict_len = Object.keys(server_dict).length;\\n\\n\\nexport async function main(ns) {\\n  //look at NetScript it more:\\n  console.log(ns)\\n  for(let i=0;i<ns.args.length;i++){\\n    console.log(ns.args[i])\\n  }\\n\\n  // Prepare updatable values\\n  let mem_core, mem_work, home_ram, hacking_level, server_limit, money;\\n  function update_data() {\\n    mem_core = ns.getScriptRam(this_filename);\\n    mem_work = ns.getScriptRam(work_script_filename)\\n    home_ram = ns.getServerMaxRam(\\\"home\\\")\\n    hacking_level = ns.getHackingLevel()\\n    server_limit = ns.getPurchasedServerLimit()\\n    money = ns.getServerMoneyAvailable(\\\"home\\\")\\n  }\\n  update_data()\\n\\n  // Yes or No Prompt Configs\\n  let question = \\\"Reset Server Data?\\\"\\n  reset_server_dict = await (ns.prompt(question))\\n\\n  question = \\\"Deploy on all servers?\\\"\\n  roll_out_on = await (ns.prompt(question))\\n\\n  question = \\\"Upgrade Servers?\\\"\\n  upgrade_servers_on = await (ns.prompt(question))\\n\\n\\n  // Discover other servers\\n  function discover_servers(current_server) {\\n    const server_list = ns.scan(current_server);\\n    for (const server of server_list) {\\n      if (!server_dict.hasOwnProperty(server)) {\\n        server_dict[server] = ns.getServer(server);\\n      }\\n    }\\n  }\\n\\n  function run_each_server(targets) {\\n    let servers_rolled_out = 0;\\n    for (const target in targets) {\\n      let server = ns.getServer(target)\\n      discover_servers(target)\\n\\n      if (!server.hasAdminRights) {\\n        if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n          ns.brutessh(target)\\n        }\\n        if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n          ns.ftpcrack(target)\\n        }\\n        if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n          ns.relaysmtp(target)\\n        }\\n        if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n          ns.httpworm(target)\\n        }\\n        if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n          ns.sqlinject(target)\\n        }\\n\\n        if (server.openPortCount >= server.numOpenPortsRequired) {\\n          ns.nuke(target);\\n        }\\n      }\\n\\n      if (roll_out_on\\n        && server.maxRam > mem_work\\n        && server.hostname != 'home') {\\n        ns.scp(work_script_filename, target)\\n        ns.killall(target)\\n        ns.exec(work_script_filename, target, Math.floor(server.maxRam / mem_work))\\n        servers_rolled_out++;\\n      }\\n\\n    }\\n    // Finished roll out, turn it off.\\n    if (roll_out_on) {\\n      console.log(\\\"Finished rolling out to \\\" + servers_rolled_out + \\\" servers!\\\")\\n      roll_out_on = false;\\n    }\\n\\n  }\\n\\n  async function upgrade_servers() {\\n    for (let i = 0; i < server_limit; i++) {\\n      let hostname = hostname_prefix + i\\n      let ram = ns.getServerMaxRam(hostname) * 2\\n      let cost = ns.getPurchasedServerCost(ram)\\n      if (money > cost) {\\n        //console.log(\\\"Upgrading \\\" + hostname + \\\" to \\\" + ram)\\n        ns.upgradePurchasedServer(hostname, ram);\\n        //spin up another worker\\n        ns.killall(hostname)\\n        ns.exec(\\\"work.js\\\", hostname, Math.floor(ram/mem_work));\\n        \\n      } else {\\n        //console.log(\\\"Cannot Upgrade \\\" + hostname + \\\" to \\\" + ram + \\\"\\\\n\\\" +\\n        //\\\"$\\\" + Math.floor(money) + \\\" < Cost $\\\" + cost + \\\"\\\\n\\\" +\\n        //\\\"Short $\\\" + Math.floor(cost - money))\\n      }\\n      await ns.sleep(500);\\n    }\\n  }\\n\\n  // Home Work\\n  discover_servers('home')\\n  ns.killall(\\\"home\\\") // why doesn't it stop itself lol\\n  console.log(home_ram, mem_core, mem_work, (home_ram - mem_core) / mem_work);\\n  ns.exec(work_script_filename, \\\"home\\\", Math.floor((home_ram - mem_core) / mem_work))\\n\\n  // Save the server_dict to localStorage\\n  function save_server_dict(){\\n    localStorage.setItem('reset_server_dict', reset_server_dict);\\n    localStorage.setItem('server_dict', JSON.stringify(server_dict));\\n    server_dict_len = Object.keys(server_dict).length;\\n    console.log(server_dict, server_dict_len)\\n  }\\n  save_server_dict();\\n\\n  // core while-loop\\n  while (true) {\\n    update_data();\\n    run_each_server(server_dict);\\n    if (upgrade_servers_on) {\\n      await upgrade_servers()\\n    }\\n    await ns.sleep(1000);\\n    save_server_dict();\\n    console.log(\\\"core looping\\\")\\n  }\\n}\",\"filename\":\"testing.js\",\"server\":\"home\"}}],[\"main.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\n/* TODO\\nWIP work script updates with hacking level\\nsave config to localstorage, config flag\\nfix reset flag and local storage\\nbackdoor solution?\\nintegrate purchasing of servers for reset\\nwork script has data calls that could be replaced with hard numbers to save ram.\\nproject / goal management or rank\\n*/\\n\\n//        //  \\n/* CONFIG */\\n//        //\\n\\nconst this_filename = 'core.js'\\nconst work_script_filename = 'work.js'\\nconst hostname_prefix = 'qst';\\nlet upgrade_servers_on = false;\\nlet roll_out_on = false;\\nlet server_dict = localStorage.getItem('server_dict');\\n\\nif (!server_dict) {\\n  console.log(\\\"Setting server_dict for the first time\\\")\\n  server_dict = {}\\n  localStorage.setItem('server_dict', JSON.stringify(server_dict));\\n} else {\\n  server_dict = JSON.parse(server_dict);\\n}\\n\\nlet server_dict_len = Object.keys(server_dict).length;\\n// prepare ns update_data vars\\nlet mem_core, mem_work, home_ram, hacking_level, server_limit, money, ports_open;\\n\\n//      //\\n/* MAIN */\\n//      //\\nexport async function main(ns) {\\n  ns.tprint('Program START');\\n  // Args NOT USED, use flags!\\n  //Print the args\\n  for (let i = 0; i < ns.args.length; i++) {\\n    console.log(ns.args[i])\\n  }\\n\\n  //.......//\\n  // Flags //\\n  //.......//\\n  // Setup the flags\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"purchase-servers\\\", false],\\n    [\\\"buy\\\", false],\\n    [\\\"deploy\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"This is the main qst script.\\\");\\n    ns.tprint(`Usage: run ${ns.getScriptName()}`);\\n    ns.tprint(\\\"Example:\\\");\\n    ns.tprint(`> run ${ns.getScriptName()}`);\\n    ns.tprint(\\\"Flags: --help            - This message\\\");\\n    ns.tprint(\\\"       --purchase-severs - Purchase the first round of servers\\\");\\n    return;\\n  } else if (args.purchase_servers || args.buy) {\\n    purchase_servers()\\n  } else if (args.deploy) {\\n    roll_out_on = true;\\n  }\\n\\n  //            //\\n  /* FUNCTIONS  */\\n  //            //\\n\\n  function save_server_dict() { // to localStorage\\n    localStorage.setItem('server_dict', JSON.stringify(server_dict));\\n    server_dict_len = Object.keys(server_dict).length;\\n    //console.log(server_dict, server_dict_len)\\n  }\\n\\n\\n  function update_data() {\\n    mem_core = ns.getScriptRam(this_filename);\\n    mem_work = ns.getScriptRam(work_script_filename)\\n    home_ram = ns.getServerMaxRam(\\\"home\\\")\\n    hacking_level = ns.getHackingLevel()\\n    server_limit = ns.getPurchasedServerLimit()\\n    money = ns.getServerMoneyAvailable(\\\"home\\\")\\n    ports_open = 0;\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n      ports_open++;\\n    }\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n      ports_open++;\\n    }\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n      ports_open++;\\n    }\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n      ports_open++;\\n    }\\n    if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n      ports_open++;\\n    }\\n  }\\n\\n  // Discover other servers\\n  function discover_servers(current_server) {\\n    const server_list = ns.scan(current_server);\\n    for (const server of server_list) {\\n      if (!server_dict.hasOwnProperty(server)) {\\n        server_dict[server] = ns.getServer(server);\\n      }\\n    }\\n  }\\n\\n  function run_each_server(targets) {\\n    let servers_rolled_out = 0\\n    for (const target in targets) {\\n      let server = ns.getServer(target)\\n      discover_servers(target)\\n\\n      let port_opener_count = 5\\n      if (!server.hasAdminRights || server.openPortCount < port_opener_count) {\\n        if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n          ns.brutessh(target)\\n        }\\n        if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n          ns.ftpcrack(target)\\n        }\\n        if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n          ns.relaysmtp(target)\\n        }\\n        if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n          ns.httpworm(target)\\n        }\\n        if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n          ns.sqlinject(target)\\n        }\\n\\n        if (server.openPortCount >= server.numOpenPortsRequired) {\\n          ns.nuke(target);\\n        }\\n      }\\n\\n      if (roll_out_on\\n        && server.maxRam > mem_work\\n        && server.hostname != 'home') {\\n        ns.scp(work_script_filename, target)\\n        ns.killall(target)\\n        ns.exec(work_script_filename, target, Math.floor(server.maxRam / mem_work), hacking_level, ports_open)\\n        servers_rolled_out++;\\n      }\\n\\n    }\\n    // Finished roll out, turn it off.\\n    if (roll_out_on) {\\n      console.log(\\\"Finished rolling out to \\\" + servers_rolled_out + \\\" servers!\\\")\\n      roll_out_on = false;\\n    }\\n\\n  }\\n\\n  //..................//\\n  // async functions  //\\n  //..................//\\n\\n  async function purchase_servers() {\\n    const purchase_ram = 4;\\n    let i = 0;\\n    while (i < ns.getPurchasedServerLimit()) {\\n      if (money > ns.getPurchasedServerCost(purchase_ram)) {\\n        let hostname = hostname_prefix + i\\n        ns.purchaseServer(hostname, purchase_ram);\\n        ns.scp(work_script_filename, hostname);\\n        ns.exec(work_script_filename, hostname, Math.floor(purchase_ram / mem_work));\\n        ++i;\\n      }\\n      await ns.sleep(1000);\\n    }\\n  }\\n\\n  async function upgrade_servers() {\\n    for (let i = 0; i < server_limit; i++) {\\n      let hostname = hostname_prefix + i\\n      let ram = ns.getServerMaxRam(hostname) * 2\\n      let cost = ns.getPurchasedServerCost(ram)\\n      if (money > cost) {\\n        console.log(\\\"Upgrading \\\" + hostname + \\\" to \\\" + ram)\\n        ns.upgradePurchasedServer(hostname, ram);\\n        //spin up another worker\\n        ns.killall(hostname)\\n        ns.exec(work_script_filename, hostname, Math.floor(ram / mem_work));\\n\\n      } else {\\n        //console.log(\\\"Cannot Upgrade \\\" + hostname + \\\" to \\\" + ram + \\\"\\\\n\\\" +\\n        //\\\"$\\\" + Math.floor(money) + \\\" < Cost $\\\" + cost + \\\"\\\\n\\\" +\\n        //\\\"Short $\\\" + Math.floor(cost - money))\\n      }\\n      await ns.sleep(500);\\n    }\\n  }\\n\\n  // Home Work\\n  update_data();\\n  discover_servers('home')\\n  ns.killall('home') // why doesn't it stop itself lol\\n  ns.exec(work_script_filename, 'home', Math.floor((home_ram - mem_core) / mem_work))\\n\\n  // Functions END\\n  let question = \\\"Would you like to configure?\\\"\\n  let reset_config = await (ns.prompt(question))\\n\\n  // Yes or No Prompt Interactive Configuration\\n  if (reset_config) {\\n    question = \\\"Reset local storage?\\\"\\n    if (await (ns.prompt(question))) {\\n      console.log(\\\"RESETTING LOCAL STORAGE\\\")\\n      ns.tprint(\\\"RESETING LOCAL STORAGE\\\")\\n      localStorage.clear()\\n    }\\n\\n    question = \\\"Deploy on all servers?\\\"\\n    roll_out_on = await (ns.prompt(question))\\n\\n    question = \\\"Upgrade servers?\\\"\\n    upgrade_servers_on = await (ns.prompt(question))\\n\\n    reset_config = false;\\n  }\\n\\n  // Move these to config?\\n  let searching = true;\\n  let known_highest_server_count = 96;\\n\\n  while (searching || upgrade_servers_on) {\\n    update_data();\\n    if (searching) {\\n      run_each_server(server_dict);\\n      save_server_dict();\\n      // TODO, make sure this is true\\n      // I'm done searching if I find 96 servers\\n      if (server_dict_len >= known_highest_server_count){\\n        console.log(\\\"search complete\\\", server_dict, server_dict_len)\\n        searching = false;\\n      }\\n    }\\n    if (upgrade_servers_on) {\\n      await upgrade_servers()\\n    }\\n    ns.tprint('cycle completed')\\n    await ns.sleep(1000);\\n  }\\n  ns.tprint('Program END');\\n}\",\"filename\":\"main.js\",\"server\":\"home\"}}]]},\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\",\"qst0\",\"qst1\",\"qst2\",\"qst3\",\"qst4\",\"qst5\",\"qst6\",\"qst7\",\"qst8\",\"qst9\",\"qst10\",\"qst11\",\"qst12\",\"qst13\",\"qst14\",\"qst15\",\"qst16\",\"qst17\",\"qst18\",\"qst19\",\"qst20\",\"qst21\",\"qst22\",\"qst23\",\"qst24\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"ecorp\",\"httpPortOpen\":true,\"ip\":\"2.8.1.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":61668062206,\"moneyMax\":1541701555150,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1086,\"serverGrowth\":99,\"runningScripts\":[]}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"megacorp\",\"httpPortOpen\":true,\"ip\":\"84.2.9.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":49283183285,\"moneyMax\":1232079582125,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1130,\"serverGrowth\":99,\"runningScripts\":[]}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"b-and-a\",\"httpPortOpen\":true,\"ip\":\"2.1.7.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":16138907638,\"moneyMax\":403472690950,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1019,\"serverGrowth\":77,\"runningScripts\":[]}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"87.2.5.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  //const data = ns.args[0]\\n  //TODO pass all the main data? might be slow?\\n  const hack_level = ns.args[0];\\n  const ports_open = ns.args[1];\\n\\n  // Gerenate server data, don't hard code\\n  // or use copy pasta fix thisGPT lol\\n  // as you can see below tho, it works.\\n  // scan-analyze 10\\n  // copy the data and ask for it in the right form, sort in python\\n  // server_data.sort(key=lambda x: (x[2], x[1]), reverse=True)\\n  const server_data = [['solaris', 912, 5],\\n  ['defcomm', 903, 5],\\n  ['taiyang-digital', 888, 5],\\n  ['aerocorp', 887, 5],\\n  ['icarus', 885, 5],\\n  ['infocomm', 876, 5],\\n  ['galactic-cyber', 869, 5],\\n  ['omnia', 853, 5],\\n  ['deltaone', 849, 5],\\n  ['syscore', 849, 5],\\n  ['zeus-med', 832, 5],\\n  ['zb-institute', 726, 5],\\n  ['darkweb', 1, 5],\\n  ['univ-energy', 840, 4],\\n  ['unitalife', 813, 4],\\n  ['nova-med', 786, 4],\\n  ['global-pharm', 777, 4],\\n  ['zb-def', 776, 4],\\n  ['snap-fitness', 711, 4],\\n  ['lexo-corp', 689, 4],\\n  ['alpha-ent', 600, 4],\\n  ['aevum-police', 441, 4],\\n  ['millenium-fitness', 525, 3],\\n  ['rho-construction', 510, 3],\\n  ['summit-uni', 466, 3],\\n  ['rothman-uni', 430, 3],\\n  ['catalyst', 409, 3],\\n  ['netlink', 401, 3],\\n  ['I.I.I.I', 340, 3],\\n  ['computek', 320, 3],\\n  ['johnson-ortho', 292, 2],\\n  ['the-hub', 280, 2],\\n  ['crush-fitness', 246, 2],\\n  ['avmnite-02h', 212, 2],\\n  ['omega-net', 205, 2],\\n  ['silver-helix', 150, 2],\\n  ['phantasy', 100, 2],\\n  ['iron-gym', 100, 1],\\n  ['max-hardware', 80, 1],\\n  ['zer0', 75, 1],\\n  ['CSEC', 53, 1],\\n  ['neo-net', 50, 1],\\n  ['harakiri-sushi', 40, 0],\\n  ['hong-fang-tea', 30, 0],\\n  ['nectar-net', 20, 0],\\n  ['joesguns', 10, 0],\\n  ['sigma-cosmetics', 5, 0],\\n  ['n00dles', 1, 0],\\n  ['foodnstuff', 1, 0]]\\n\\n  function select_target(hackLevel, portsOpen, data) {\\n    let highestValue = -1; // Init with a low value\\n    let target = null;\\n    ns.tprint(data.length)\\n\\n    for (let i = 0; i < data.length; i++) {\\n      let serverHackLevel = data[i][1];\\n      let serverPortsOpen = data[i][2];\\n      console.log(serverHackLevel, hackLevel, serverPortsOpen, portsOpen)\\n\\n      if (serverHackLevel <= hackLevel && serverPortsOpen <= portsOpen) {\\n        // use a better formula here this just avoids hacking home and dark-net\\n        let value = serverHackLevel * serverPortsOpen;\\n        console.log(value)\\n\\n        if (value > highestValue) {\\n          highestValue = value;\\n          target = data[i][0];\\n        }\\n      }\\n    }\\n    ns.tprint(target);\\n\\n    return target;\\n  }\\n\\n  let target = select_target(hack_level, ports_open, server_data);\\n\\n  console.log(\\\"work.js\\\", \\\"target: \\\" + target, ns.args)\\n\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n  const justhack = false; //true;\\n  const time_options = {\\n  hour: '2-digit',\\n  minute: '2-digit',\\n  second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    ns.print(formattedTime);\\n    if (justhack) {\\n      await ns.hack(target);\\n    } else if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      await ns.grow(target);\\n    } else {\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"blade\"}}]]},\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":26928539215,\"moneyMax\":673213480375,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1111,\"serverGrowth\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[717,5],\"dataMap\":{},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1690.4100000002475,\"ramUsage\":2.4,\"server\":\"blade\",\"scriptKey\":\"work.js*[717,5]\",\"title\":\"work.js 717 5\",\"threads\":26,\"temporary\":false}}]}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nwo\",\"httpPortOpen\":true,\"ip\":\"60.3.3.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnitek\",\"megacorp\",\"fulcrumassets\",\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":20857236766,\"moneyMax\":521430919150,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1019,\"serverGrowth\":88,\"runningScripts\":[]}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"clarkinc\",\"httpPortOpen\":true,\"ip\":\"15.8.6.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnitek\",\"ecorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":48,\"hackDifficulty\":48,\"minDifficulty\":16,\"moneyAvailable\":18452689157,\"moneyMax\":461317228925,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1127,\"serverGrowth\":66,\"runningScripts\":[]}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"49.0.9.6\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  //const data = ns.args[0]\\n  //TODO pass all the main data? might be slow?\\n  const hack_level = ns.args[0];\\n  const ports_open = ns.args[1];\\n\\n  // Gerenate server data, don't hard code\\n  // or use copy pasta fix thisGPT lol\\n  // as you can see below tho, it works.\\n  // scan-analyze 10\\n  // copy the data and ask for it in the right form, sort in python\\n  // server_data.sort(key=lambda x: (x[2], x[1]), reverse=True)\\n  const server_data = [['solaris', 912, 5],\\n  ['defcomm', 903, 5],\\n  ['taiyang-digital', 888, 5],\\n  ['aerocorp', 887, 5],\\n  ['icarus', 885, 5],\\n  ['infocomm', 876, 5],\\n  ['galactic-cyber', 869, 5],\\n  ['omnia', 853, 5],\\n  ['deltaone', 849, 5],\\n  ['syscore', 849, 5],\\n  ['zeus-med', 832, 5],\\n  ['zb-institute', 726, 5],\\n  ['darkweb', 1, 5],\\n  ['univ-energy', 840, 4],\\n  ['unitalife', 813, 4],\\n  ['nova-med', 786, 4],\\n  ['global-pharm', 777, 4],\\n  ['zb-def', 776, 4],\\n  ['snap-fitness', 711, 4],\\n  ['lexo-corp', 689, 4],\\n  ['alpha-ent', 600, 4],\\n  ['aevum-police', 441, 4],\\n  ['millenium-fitness', 525, 3],\\n  ['rho-construction', 510, 3],\\n  ['summit-uni', 466, 3],\\n  ['rothman-uni', 430, 3],\\n  ['catalyst', 409, 3],\\n  ['netlink', 401, 3],\\n  ['I.I.I.I', 340, 3],\\n  ['computek', 320, 3],\\n  ['johnson-ortho', 292, 2],\\n  ['the-hub', 280, 2],\\n  ['crush-fitness', 246, 2],\\n  ['avmnite-02h', 212, 2],\\n  ['omega-net', 205, 2],\\n  ['silver-helix', 150, 2],\\n  ['phantasy', 100, 2],\\n  ['iron-gym', 100, 1],\\n  ['max-hardware', 80, 1],\\n  ['zer0', 75, 1],\\n  ['CSEC', 53, 1],\\n  ['neo-net', 50, 1],\\n  ['harakiri-sushi', 40, 0],\\n  ['hong-fang-tea', 30, 0],\\n  ['nectar-net', 20, 0],\\n  ['joesguns', 10, 0],\\n  ['sigma-cosmetics', 5, 0],\\n  ['n00dles', 1, 0],\\n  ['foodnstuff', 1, 0]]\\n\\n  function select_target(hackLevel, portsOpen, data) {\\n    let highestValue = -1; // Init with a low value\\n    let target = null;\\n    ns.tprint(data.length)\\n\\n    for (let i = 0; i < data.length; i++) {\\n      let serverHackLevel = data[i][1];\\n      let serverPortsOpen = data[i][2];\\n      console.log(serverHackLevel, hackLevel, serverPortsOpen, portsOpen)\\n\\n      if (serverHackLevel <= hackLevel && serverPortsOpen <= portsOpen) {\\n        // use a better formula here this just avoids hacking home and dark-net\\n        let value = serverHackLevel * serverPortsOpen;\\n        console.log(value)\\n\\n        if (value > highestValue) {\\n          highestValue = value;\\n          target = data[i][0];\\n        }\\n      }\\n    }\\n    ns.tprint(target);\\n\\n    return target;\\n  }\\n\\n  let target = select_target(hack_level, ports_open, server_data);\\n\\n  console.log(\\\"work.js\\\", \\\"target: \\\" + target, ns.args)\\n\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n  const justhack = false; //true;\\n  const time_options = {\\n  hour: '2-digit',\\n  minute: '2-digit',\\n  second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    ns.print(formattedTime);\\n    if (justhack) {\\n      await ns.hack(target);\\n    } else if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      await ns.grow(target);\\n    } else {\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"omnitek\"}}]]},\"serversOnNetwork\":[\"stormtech\",\"nwo\",\"clarkinc\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":13351450491,\"moneyMax\":333786262275,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":960,\"serverGrowth\":95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[717,5],\"dataMap\":{},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1690.4100000002475,\"ramUsage\":2.4,\"server\":\"omnitek\",\"scriptKey\":\"work.js*[717,5]\",\"title\":\"work.js 717 5\",\"threads\":106,\"temporary\":false}}]}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"4sigma\",\"httpPortOpen\":true,\"ip\":\"41.2.9.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"vitalife\",\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":24583139954,\"moneyMax\":614578498850,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":921,\"serverGrowth\":81,\"runningScripts\":[]}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"kuai-gong\",\"httpPortOpen\":true,\"ip\":\"47.4.4.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"vitalife\",\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":28969057893,\"moneyMax\":724226447325,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1029,\"serverGrowth\":98,\"runningScripts\":[]}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":true,\"ip\":\"39.3.5.2\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  //const data = ns.args[0]\\n  //TODO pass all the main data? might be slow?\\n  const hack_level = ns.args[0];\\n  const ports_open = ns.args[1];\\n\\n  // Gerenate server data, don't hard code\\n  // or use copy pasta fix thisGPT lol\\n  // as you can see below tho, it works.\\n  // scan-analyze 10\\n  // copy the data and ask for it in the right form, sort in python\\n  // server_data.sort(key=lambda x: (x[2], x[1]), reverse=True)\\n  const server_data = [['solaris', 912, 5],\\n  ['defcomm', 903, 5],\\n  ['taiyang-digital', 888, 5],\\n  ['aerocorp', 887, 5],\\n  ['icarus', 885, 5],\\n  ['infocomm', 876, 5],\\n  ['galactic-cyber', 869, 5],\\n  ['omnia', 853, 5],\\n  ['deltaone', 849, 5],\\n  ['syscore', 849, 5],\\n  ['zeus-med', 832, 5],\\n  ['zb-institute', 726, 5],\\n  ['darkweb', 1, 5],\\n  ['univ-energy', 840, 4],\\n  ['unitalife', 813, 4],\\n  ['nova-med', 786, 4],\\n  ['global-pharm', 777, 4],\\n  ['zb-def', 776, 4],\\n  ['snap-fitness', 711, 4],\\n  ['lexo-corp', 689, 4],\\n  ['alpha-ent', 600, 4],\\n  ['aevum-police', 441, 4],\\n  ['millenium-fitness', 525, 3],\\n  ['rho-construction', 510, 3],\\n  ['summit-uni', 466, 3],\\n  ['rothman-uni', 430, 3],\\n  ['catalyst', 409, 3],\\n  ['netlink', 401, 3],\\n  ['I.I.I.I', 340, 3],\\n  ['computek', 320, 3],\\n  ['johnson-ortho', 292, 2],\\n  ['the-hub', 280, 2],\\n  ['crush-fitness', 246, 2],\\n  ['avmnite-02h', 212, 2],\\n  ['omega-net', 205, 2],\\n  ['silver-helix', 150, 2],\\n  ['phantasy', 100, 2],\\n  ['iron-gym', 100, 1],\\n  ['max-hardware', 80, 1],\\n  ['zer0', 75, 1],\\n  ['CSEC', 53, 1],\\n  ['neo-net', 50, 1],\\n  ['harakiri-sushi', 40, 0],\\n  ['hong-fang-tea', 30, 0],\\n  ['nectar-net', 20, 0],\\n  ['joesguns', 10, 0],\\n  ['sigma-cosmetics', 5, 0],\\n  ['n00dles', 1, 0],\\n  ['foodnstuff', 1, 0]]\\n\\n  function select_target(hackLevel, portsOpen, data) {\\n    let highestValue = -1; // Init with a low value\\n    let target = null;\\n    ns.tprint(data.length)\\n\\n    for (let i = 0; i < data.length; i++) {\\n      let serverHackLevel = data[i][1];\\n      let serverPortsOpen = data[i][2];\\n      console.log(serverHackLevel, hackLevel, serverPortsOpen, portsOpen)\\n\\n      if (serverHackLevel <= hackLevel && serverPortsOpen <= portsOpen) {\\n        // use a better formula here this just avoids hacking home and dark-net\\n        let value = serverHackLevel * serverPortsOpen;\\n        console.log(value)\\n\\n        if (value > highestValue) {\\n          highestValue = value;\\n          target = data[i][0];\\n        }\\n      }\\n    }\\n    ns.tprint(target);\\n\\n    return target;\\n  }\\n\\n  let target = select_target(hack_level, ports_open, server_data);\\n\\n  console.log(\\\"work.js\\\", \\\"target: \\\" + target, ns.args)\\n\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n  const justhack = false; //true;\\n  const time_options = {\\n  hour: '2-digit',\\n  minute: '2-digit',\\n  second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    ns.print(formattedTime);\\n    if (justhack) {\\n      await ns.hack(target);\\n    } else if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      await ns.grow(target);\\n    } else {\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"fulcrumtech\"}}]]},\"serversOnNetwork\":[\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":1721581265,\"moneyMax\":43039531625,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1191,\"serverGrowth\":90,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[717,5],\"dataMap\":{},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1690.4100000002475,\"ramUsage\":2.4,\"server\":\"fulcrumtech\",\"scriptKey\":\"work.js*[717,5]\",\"title\":\"work.js 717 5\",\"threads\":213,\"temporary\":false}}]}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":true,\"ip\":\"78.3.7.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1536,\"serverGrowth\":1,\"runningScripts\":[]}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"stormtech\",\"httpPortOpen\":true,\"ip\":\"46.9.6.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"applied-energetics\",\"omnitek\",\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":1074550757,\"moneyMax\":26863768925,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":919,\"serverGrowth\":85,\"runningScripts\":[]}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"85.9.2.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":91,\"minDifficulty\":30,\"moneyAvailable\":853557244,\"moneyMax\":21338931100,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":903,\"serverGrowth\":69,\"runningScripts\":[]}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"62.2.9.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"icarus\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":682667388,\"moneyMax\":17066684700,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":912,\"serverGrowth\":59,\"runningScripts\":[]}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"8.0.2.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  //const data = ns.args[0]\\n  //TODO pass all the main data? might be slow?\\n  const hack_level = ns.args[0];\\n  const ports_open = ns.args[1];\\n\\n  // Gerenate server data, don't hard code\\n  // or use copy pasta fix thisGPT lol\\n  // as you can see below tho, it works.\\n  // scan-analyze 10\\n  // copy the data and ask for it in the right form, sort in python\\n  // server_data.sort(key=lambda x: (x[2], x[1]), reverse=True)\\n  const server_data = [['solaris', 912, 5],\\n  ['defcomm', 903, 5],\\n  ['taiyang-digital', 888, 5],\\n  ['aerocorp', 887, 5],\\n  ['icarus', 885, 5],\\n  ['infocomm', 876, 5],\\n  ['galactic-cyber', 869, 5],\\n  ['omnia', 853, 5],\\n  ['deltaone', 849, 5],\\n  ['syscore', 849, 5],\\n  ['zeus-med', 832, 5],\\n  ['zb-institute', 726, 5],\\n  ['darkweb', 1, 5],\\n  ['univ-energy', 840, 4],\\n  ['unitalife', 813, 4],\\n  ['nova-med', 786, 4],\\n  ['global-pharm', 777, 4],\\n  ['zb-def', 776, 4],\\n  ['snap-fitness', 711, 4],\\n  ['lexo-corp', 689, 4],\\n  ['alpha-ent', 600, 4],\\n  ['aevum-police', 441, 4],\\n  ['millenium-fitness', 525, 3],\\n  ['rho-construction', 510, 3],\\n  ['summit-uni', 466, 3],\\n  ['rothman-uni', 430, 3],\\n  ['catalyst', 409, 3],\\n  ['netlink', 401, 3],\\n  ['I.I.I.I', 340, 3],\\n  ['computek', 320, 3],\\n  ['johnson-ortho', 292, 2],\\n  ['the-hub', 280, 2],\\n  ['crush-fitness', 246, 2],\\n  ['avmnite-02h', 212, 2],\\n  ['omega-net', 205, 2],\\n  ['silver-helix', 150, 2],\\n  ['phantasy', 100, 2],\\n  ['iron-gym', 100, 1],\\n  ['max-hardware', 80, 1],\\n  ['zer0', 75, 1],\\n  ['CSEC', 53, 1],\\n  ['neo-net', 50, 1],\\n  ['harakiri-sushi', 40, 0],\\n  ['hong-fang-tea', 30, 0],\\n  ['nectar-net', 20, 0],\\n  ['joesguns', 10, 0],\\n  ['sigma-cosmetics', 5, 0],\\n  ['n00dles', 1, 0],\\n  ['foodnstuff', 1, 0]]\\n\\n  function select_target(hackLevel, portsOpen, data) {\\n    let highestValue = -1; // Init with a low value\\n    let target = null;\\n    ns.tprint(data.length)\\n\\n    for (let i = 0; i < data.length; i++) {\\n      let serverHackLevel = data[i][1];\\n      let serverPortsOpen = data[i][2];\\n      console.log(serverHackLevel, hackLevel, serverPortsOpen, portsOpen)\\n\\n      if (serverHackLevel <= hackLevel && serverPortsOpen <= portsOpen) {\\n        // use a better formula here this just avoids hacking home and dark-net\\n        let value = serverHackLevel * serverPortsOpen;\\n        console.log(value)\\n\\n        if (value > highestValue) {\\n          highestValue = value;\\n          target = data[i][0];\\n        }\\n      }\\n    }\\n    ns.tprint(target);\\n\\n    return target;\\n  }\\n\\n  let target = select_target(hack_level, ports_open, server_data);\\n\\n  console.log(\\\"work.js\\\", \\\"target: \\\" + target, ns.args)\\n\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n  const justhack = false; //true;\\n  const time_options = {\\n  hour: '2-digit',\\n  minute: '2-digit',\\n  second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    ns.print(formattedTime);\\n    if (justhack) {\\n      await ns.hack(target);\\n    } else if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      await ns.grow(target);\\n    } else {\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"helios\"}}]]},\"serversOnNetwork\":[\"microdyne\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":700720091,\"moneyMax\":17518002275,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":801,\"serverGrowth\":73,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[717,5],\"dataMap\":{},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1690.4100000002475,\"ramUsage\":2.4,\"server\":\"helios\",\"scriptKey\":\"work.js*[717,5]\",\"title\":\"work.js 717 5\",\"threads\":26,\"temporary\":false}}]}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"92.6.5.3\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  //const data = ns.args[0]\\n  //TODO pass all the main data? might be slow?\\n  const hack_level = ns.args[0];\\n  const ports_open = ns.args[1];\\n\\n  // Gerenate server data, don't hard code\\n  // or use copy pasta fix thisGPT lol\\n  // as you can see below tho, it works.\\n  // scan-analyze 10\\n  // copy the data and ask for it in the right form, sort in python\\n  // server_data.sort(key=lambda x: (x[2], x[1]), reverse=True)\\n  const server_data = [['solaris', 912, 5],\\n  ['defcomm', 903, 5],\\n  ['taiyang-digital', 888, 5],\\n  ['aerocorp', 887, 5],\\n  ['icarus', 885, 5],\\n  ['infocomm', 876, 5],\\n  ['galactic-cyber', 869, 5],\\n  ['omnia', 853, 5],\\n  ['deltaone', 849, 5],\\n  ['syscore', 849, 5],\\n  ['zeus-med', 832, 5],\\n  ['zb-institute', 726, 5],\\n  ['darkweb', 1, 5],\\n  ['univ-energy', 840, 4],\\n  ['unitalife', 813, 4],\\n  ['nova-med', 786, 4],\\n  ['global-pharm', 777, 4],\\n  ['zb-def', 776, 4],\\n  ['snap-fitness', 711, 4],\\n  ['lexo-corp', 689, 4],\\n  ['alpha-ent', 600, 4],\\n  ['aevum-police', 441, 4],\\n  ['millenium-fitness', 525, 3],\\n  ['rho-construction', 510, 3],\\n  ['summit-uni', 466, 3],\\n  ['rothman-uni', 430, 3],\\n  ['catalyst', 409, 3],\\n  ['netlink', 401, 3],\\n  ['I.I.I.I', 340, 3],\\n  ['computek', 320, 3],\\n  ['johnson-ortho', 292, 2],\\n  ['the-hub', 280, 2],\\n  ['crush-fitness', 246, 2],\\n  ['avmnite-02h', 212, 2],\\n  ['omega-net', 205, 2],\\n  ['silver-helix', 150, 2],\\n  ['phantasy', 100, 2],\\n  ['iron-gym', 100, 1],\\n  ['max-hardware', 80, 1],\\n  ['zer0', 75, 1],\\n  ['CSEC', 53, 1],\\n  ['neo-net', 50, 1],\\n  ['harakiri-sushi', 40, 0],\\n  ['hong-fang-tea', 30, 0],\\n  ['nectar-net', 20, 0],\\n  ['joesguns', 10, 0],\\n  ['sigma-cosmetics', 5, 0],\\n  ['n00dles', 1, 0],\\n  ['foodnstuff', 1, 0]]\\n\\n  function select_target(hackLevel, portsOpen, data) {\\n    let highestValue = -1; // Init with a low value\\n    let target = null;\\n    ns.tprint(data.length)\\n\\n    for (let i = 0; i < data.length; i++) {\\n      let serverHackLevel = data[i][1];\\n      let serverPortsOpen = data[i][2];\\n      console.log(serverHackLevel, hackLevel, serverPortsOpen, portsOpen)\\n\\n      if (serverHackLevel <= hackLevel && serverPortsOpen <= portsOpen) {\\n        // use a better formula here this just avoids hacking home and dark-net\\n        let value = serverHackLevel * serverPortsOpen;\\n        console.log(value)\\n\\n        if (value > highestValue) {\\n          highestValue = value;\\n          target = data[i][0];\\n        }\\n      }\\n    }\\n    ns.tprint(target);\\n\\n    return target;\\n  }\\n\\n  let target = select_target(hack_level, ports_open, server_data);\\n\\n  console.log(\\\"work.js\\\", \\\"target: \\\" + target, ns.args)\\n\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n  const justhack = false; //true;\\n  const time_options = {\\n  hour: '2-digit',\\n  minute: '2-digit',\\n  second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    ns.print(formattedTime);\\n    if (justhack) {\\n      await ns.hack(target);\\n    } else if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      await ns.grow(target);\\n    } else {\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"vitalife\"}}]]},\"serversOnNetwork\":[\"titan-labs\",\"4sigma\",\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":734128746,\"moneyMax\":18353218650,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":837,\"serverGrowth\":68,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[717,5],\"dataMap\":{},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1690.4100000002475,\"ramUsage\":2.4,\"server\":\"vitalife\",\"scriptKey\":\"work.js*[717,5]\",\"title\":\"work.js 717 5\",\"threads\":53,\"temporary\":false}}]}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"46.1.4.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"deltaone\",\"infocomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":935587278,\"moneyMax\":23389681950,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":876,\"serverGrowth\":87,\"runningScripts\":[]}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-324367.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[12,35,11,19],[34,16,13,11]],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"41.6.5.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  //const data = ns.args[0]\\n  //TODO pass all the main data? might be slow?\\n  const hack_level = ns.args[0];\\n  const ports_open = ns.args[1];\\n\\n  // Gerenate server data, don't hard code\\n  // or use copy pasta fix thisGPT lol\\n  // as you can see below tho, it works.\\n  // scan-analyze 10\\n  // copy the data and ask for it in the right form, sort in python\\n  // server_data.sort(key=lambda x: (x[2], x[1]), reverse=True)\\n  const server_data = [['solaris', 912, 5],\\n  ['defcomm', 903, 5],\\n  ['taiyang-digital', 888, 5],\\n  ['aerocorp', 887, 5],\\n  ['icarus', 885, 5],\\n  ['infocomm', 876, 5],\\n  ['galactic-cyber', 869, 5],\\n  ['omnia', 853, 5],\\n  ['deltaone', 849, 5],\\n  ['syscore', 849, 5],\\n  ['zeus-med', 832, 5],\\n  ['zb-institute', 726, 5],\\n  ['darkweb', 1, 5],\\n  ['univ-energy', 840, 4],\\n  ['unitalife', 813, 4],\\n  ['nova-med', 786, 4],\\n  ['global-pharm', 777, 4],\\n  ['zb-def', 776, 4],\\n  ['snap-fitness', 711, 4],\\n  ['lexo-corp', 689, 4],\\n  ['alpha-ent', 600, 4],\\n  ['aevum-police', 441, 4],\\n  ['millenium-fitness', 525, 3],\\n  ['rho-construction', 510, 3],\\n  ['summit-uni', 466, 3],\\n  ['rothman-uni', 430, 3],\\n  ['catalyst', 409, 3],\\n  ['netlink', 401, 3],\\n  ['I.I.I.I', 340, 3],\\n  ['computek', 320, 3],\\n  ['johnson-ortho', 292, 2],\\n  ['the-hub', 280, 2],\\n  ['crush-fitness', 246, 2],\\n  ['avmnite-02h', 212, 2],\\n  ['omega-net', 205, 2],\\n  ['silver-helix', 150, 2],\\n  ['phantasy', 100, 2],\\n  ['iron-gym', 100, 1],\\n  ['max-hardware', 80, 1],\\n  ['zer0', 75, 1],\\n  ['CSEC', 53, 1],\\n  ['neo-net', 50, 1],\\n  ['harakiri-sushi', 40, 0],\\n  ['hong-fang-tea', 30, 0],\\n  ['nectar-net', 20, 0],\\n  ['joesguns', 10, 0],\\n  ['sigma-cosmetics', 5, 0],\\n  ['n00dles', 1, 0],\\n  ['foodnstuff', 1, 0]]\\n\\n  function select_target(hackLevel, portsOpen, data) {\\n    let highestValue = -1; // Init with a low value\\n    let target = null;\\n    ns.tprint(data.length)\\n\\n    for (let i = 0; i < data.length; i++) {\\n      let serverHackLevel = data[i][1];\\n      let serverPortsOpen = data[i][2];\\n      console.log(serverHackLevel, hackLevel, serverPortsOpen, portsOpen)\\n\\n      if (serverHackLevel <= hackLevel && serverPortsOpen <= portsOpen) {\\n        // use a better formula here this just avoids hacking home and dark-net\\n        let value = serverHackLevel * serverPortsOpen;\\n        console.log(value)\\n\\n        if (value > highestValue) {\\n          highestValue = value;\\n          target = data[i][0];\\n        }\\n      }\\n    }\\n    ns.tprint(target);\\n\\n    return target;\\n  }\\n\\n  let target = select_target(hack_level, ports_open, server_data);\\n\\n  console.log(\\\"work.js\\\", \\\"target: \\\" + target, ns.args)\\n\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n  const justhack = false; //true;\\n  const time_options = {\\n  hour: '2-digit',\\n  minute: '2-digit',\\n  second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    ns.print(formattedTime);\\n    if (justhack) {\\n      await ns.hack(target);\\n    } else if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      await ns.grow(target);\\n    } else {\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"univ-energy\"}}]]},\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":1176667919,\"moneyMax\":29416697975,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":840,\"serverGrowth\":80,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[717,5],\"dataMap\":{},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1690.4100000002475,\"ramUsage\":2.4,\"server\":\"univ-energy\",\"scriptKey\":\"work.js*[717,5]\",\"title\":\"work.js 717 5\",\"threads\":26,\"temporary\":false}}]}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-9958.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,0,0,1,0,0,1,1,1,0],[0,1,0,1,0,0,0,1,1,1,0],[0,0,0,0,0,0,0,0,0,1,0],[0,0,1,0,0,0,1,0,0,0,0],[0,0,0,0,1,0,0,0,1,0,1],[1,1,0,0,0,1,1,1,1,1,0],[0,0,0,1,0,1,1,0,0,0,0],[0,0,1,1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,1,0,0,0],[0,1,0,1,0,0,1,0,0,0,0]],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"29.7.9.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  //const data = ns.args[0]\\n  //TODO pass all the main data? might be slow?\\n  const hack_level = ns.args[0];\\n  const ports_open = ns.args[1];\\n\\n  // Gerenate server data, don't hard code\\n  // or use copy pasta fix thisGPT lol\\n  // as you can see below tho, it works.\\n  // scan-analyze 10\\n  // copy the data and ask for it in the right form, sort in python\\n  // server_data.sort(key=lambda x: (x[2], x[1]), reverse=True)\\n  const server_data = [['solaris', 912, 5],\\n  ['defcomm', 903, 5],\\n  ['taiyang-digital', 888, 5],\\n  ['aerocorp', 887, 5],\\n  ['icarus', 885, 5],\\n  ['infocomm', 876, 5],\\n  ['galactic-cyber', 869, 5],\\n  ['omnia', 853, 5],\\n  ['deltaone', 849, 5],\\n  ['syscore', 849, 5],\\n  ['zeus-med', 832, 5],\\n  ['zb-institute', 726, 5],\\n  ['darkweb', 1, 5],\\n  ['univ-energy', 840, 4],\\n  ['unitalife', 813, 4],\\n  ['nova-med', 786, 4],\\n  ['global-pharm', 777, 4],\\n  ['zb-def', 776, 4],\\n  ['snap-fitness', 711, 4],\\n  ['lexo-corp', 689, 4],\\n  ['alpha-ent', 600, 4],\\n  ['aevum-police', 441, 4],\\n  ['millenium-fitness', 525, 3],\\n  ['rho-construction', 510, 3],\\n  ['summit-uni', 466, 3],\\n  ['rothman-uni', 430, 3],\\n  ['catalyst', 409, 3],\\n  ['netlink', 401, 3],\\n  ['I.I.I.I', 340, 3],\\n  ['computek', 320, 3],\\n  ['johnson-ortho', 292, 2],\\n  ['the-hub', 280, 2],\\n  ['crush-fitness', 246, 2],\\n  ['avmnite-02h', 212, 2],\\n  ['omega-net', 205, 2],\\n  ['silver-helix', 150, 2],\\n  ['phantasy', 100, 2],\\n  ['iron-gym', 100, 1],\\n  ['max-hardware', 80, 1],\\n  ['zer0', 75, 1],\\n  ['CSEC', 53, 1],\\n  ['neo-net', 50, 1],\\n  ['harakiri-sushi', 40, 0],\\n  ['hong-fang-tea', 30, 0],\\n  ['nectar-net', 20, 0],\\n  ['joesguns', 10, 0],\\n  ['sigma-cosmetics', 5, 0],\\n  ['n00dles', 1, 0],\\n  ['foodnstuff', 1, 0]]\\n\\n  function select_target(hackLevel, portsOpen, data) {\\n    let highestValue = -1; // Init with a low value\\n    let target = null;\\n    ns.tprint(data.length)\\n\\n    for (let i = 0; i < data.length; i++) {\\n      let serverHackLevel = data[i][1];\\n      let serverPortsOpen = data[i][2];\\n      console.log(serverHackLevel, hackLevel, serverPortsOpen, portsOpen)\\n\\n      if (serverHackLevel <= hackLevel && serverPortsOpen <= portsOpen) {\\n        // use a better formula here this just avoids hacking home and dark-net\\n        let value = serverHackLevel * serverPortsOpen;\\n        console.log(value)\\n\\n        if (value > highestValue) {\\n          highestValue = value;\\n          target = data[i][0];\\n        }\\n      }\\n    }\\n    ns.tprint(target);\\n\\n    return target;\\n  }\\n\\n  let target = select_target(hack_level, ports_open, server_data);\\n\\n  console.log(\\\"work.js\\\", \\\"target: \\\" + target, ns.args)\\n\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n  const justhack = false; //true;\\n  const time_options = {\\n  hour: '2-digit',\\n  minute: '2-digit',\\n  second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    ns.print(formattedTime);\\n    if (justhack) {\\n      await ns.hack(target);\\n    } else if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      await ns.grow(target);\\n    } else {\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"titan-labs\"}}]]},\"serversOnNetwork\":[\"nova-med\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":889025613,\"moneyMax\":22225640325,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":869,\"serverGrowth\":68,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[717,5],\"dataMap\":{},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1690.4100000002475,\"ramUsage\":2.4,\"server\":\"titan-labs\",\"scriptKey\":\"work.js*[717,5]\",\"title\":\"work.js 717 5\",\"threads\":6,\"temporary\":false}}]}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"97.2.0.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  //const data = ns.args[0]\\n  //TODO pass all the main data? might be slow?\\n  const hack_level = ns.args[0];\\n  const ports_open = ns.args[1];\\n\\n  // Gerenate server data, don't hard code\\n  // or use copy pasta fix thisGPT lol\\n  // as you can see below tho, it works.\\n  // scan-analyze 10\\n  // copy the data and ask for it in the right form, sort in python\\n  // server_data.sort(key=lambda x: (x[2], x[1]), reverse=True)\\n  const server_data = [['solaris', 912, 5],\\n  ['defcomm', 903, 5],\\n  ['taiyang-digital', 888, 5],\\n  ['aerocorp', 887, 5],\\n  ['icarus', 885, 5],\\n  ['infocomm', 876, 5],\\n  ['galactic-cyber', 869, 5],\\n  ['omnia', 853, 5],\\n  ['deltaone', 849, 5],\\n  ['syscore', 849, 5],\\n  ['zeus-med', 832, 5],\\n  ['zb-institute', 726, 5],\\n  ['darkweb', 1, 5],\\n  ['univ-energy', 840, 4],\\n  ['unitalife', 813, 4],\\n  ['nova-med', 786, 4],\\n  ['global-pharm', 777, 4],\\n  ['zb-def', 776, 4],\\n  ['snap-fitness', 711, 4],\\n  ['lexo-corp', 689, 4],\\n  ['alpha-ent', 600, 4],\\n  ['aevum-police', 441, 4],\\n  ['millenium-fitness', 525, 3],\\n  ['rho-construction', 510, 3],\\n  ['summit-uni', 466, 3],\\n  ['rothman-uni', 430, 3],\\n  ['catalyst', 409, 3],\\n  ['netlink', 401, 3],\\n  ['I.I.I.I', 340, 3],\\n  ['computek', 320, 3],\\n  ['johnson-ortho', 292, 2],\\n  ['the-hub', 280, 2],\\n  ['crush-fitness', 246, 2],\\n  ['avmnite-02h', 212, 2],\\n  ['omega-net', 205, 2],\\n  ['silver-helix', 150, 2],\\n  ['phantasy', 100, 2],\\n  ['iron-gym', 100, 1],\\n  ['max-hardware', 80, 1],\\n  ['zer0', 75, 1],\\n  ['CSEC', 53, 1],\\n  ['neo-net', 50, 1],\\n  ['harakiri-sushi', 40, 0],\\n  ['hong-fang-tea', 30, 0],\\n  ['nectar-net', 20, 0],\\n  ['joesguns', 10, 0],\\n  ['sigma-cosmetics', 5, 0],\\n  ['n00dles', 1, 0],\\n  ['foodnstuff', 1, 0]]\\n\\n  function select_target(hackLevel, portsOpen, data) {\\n    let highestValue = -1; // Init with a low value\\n    let target = null;\\n    ns.tprint(data.length)\\n\\n    for (let i = 0; i < data.length; i++) {\\n      let serverHackLevel = data[i][1];\\n      let serverPortsOpen = data[i][2];\\n      console.log(serverHackLevel, hackLevel, serverPortsOpen, portsOpen)\\n\\n      if (serverHackLevel <= hackLevel && serverPortsOpen <= portsOpen) {\\n        // use a better formula here this just avoids hacking home and dark-net\\n        let value = serverHackLevel * serverPortsOpen;\\n        console.log(value)\\n\\n        if (value > highestValue) {\\n          highestValue = value;\\n          target = data[i][0];\\n        }\\n      }\\n    }\\n    ns.tprint(target);\\n\\n    return target;\\n  }\\n\\n  let target = select_target(hack_level, ports_open, server_data);\\n\\n  console.log(\\\"work.js\\\", \\\"target: \\\" + target, ns.args)\\n\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n  const justhack = false; //true;\\n  const time_options = {\\n  hour: '2-digit',\\n  minute: '2-digit',\\n  second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    ns.print(formattedTime);\\n    if (justhack) {\\n      await ns.hack(target);\\n    } else if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      await ns.grow(target);\\n    } else {\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"microdyne\"}}]]},\"serversOnNetwork\":[\"zb-def\",\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":68,\"hackDifficulty\":68,\"minDifficulty\":23,\"moneyAvailable\":690790160,\"moneyMax\":17269754000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":863,\"serverGrowth\":74,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[717,5],\"dataMap\":{},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1690.4100000002475,\"ramUsage\":2.4,\"server\":\"microdyne\",\"scriptKey\":\"work.js*[717,5]\",\"title\":\"work.js 717 5\",\"threads\":26,\"temporary\":false}}]}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"46.0.9.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zeus-med\",\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":855831524,\"moneyMax\":21395788100,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":888,\"serverGrowth\":78,\"runningScripts\":[]}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"52.0.8.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"millenium-fitness\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":58,\"minDifficulty\":19,\"moneyAvailable\":843168353,\"moneyMax\":21079208825,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":869,\"serverGrowth\":87,\"runningScripts\":[]}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-513836.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[2,7],[10,12],[17,26],[17,22],[3,8],[25,35],[17,27],[25,33],[9,17]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"26.3.9.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":1083581705,\"moneyMax\":27089542625,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":887,\"serverGrowth\":58,\"runningScripts\":[]}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"99.7.6.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  //const data = ns.args[0]\\n  //TODO pass all the main data? might be slow?\\n  const hack_level = ns.args[0];\\n  const ports_open = ns.args[1];\\n\\n  // Gerenate server data, don't hard code\\n  // or use copy pasta fix thisGPT lol\\n  // as you can see below tho, it works.\\n  // scan-analyze 10\\n  // copy the data and ask for it in the right form, sort in python\\n  // server_data.sort(key=lambda x: (x[2], x[1]), reverse=True)\\n  const server_data = [['solaris', 912, 5],\\n  ['defcomm', 903, 5],\\n  ['taiyang-digital', 888, 5],\\n  ['aerocorp', 887, 5],\\n  ['icarus', 885, 5],\\n  ['infocomm', 876, 5],\\n  ['galactic-cyber', 869, 5],\\n  ['omnia', 853, 5],\\n  ['deltaone', 849, 5],\\n  ['syscore', 849, 5],\\n  ['zeus-med', 832, 5],\\n  ['zb-institute', 726, 5],\\n  ['darkweb', 1, 5],\\n  ['univ-energy', 840, 4],\\n  ['unitalife', 813, 4],\\n  ['nova-med', 786, 4],\\n  ['global-pharm', 777, 4],\\n  ['zb-def', 776, 4],\\n  ['snap-fitness', 711, 4],\\n  ['lexo-corp', 689, 4],\\n  ['alpha-ent', 600, 4],\\n  ['aevum-police', 441, 4],\\n  ['millenium-fitness', 525, 3],\\n  ['rho-construction', 510, 3],\\n  ['summit-uni', 466, 3],\\n  ['rothman-uni', 430, 3],\\n  ['catalyst', 409, 3],\\n  ['netlink', 401, 3],\\n  ['I.I.I.I', 340, 3],\\n  ['computek', 320, 3],\\n  ['johnson-ortho', 292, 2],\\n  ['the-hub', 280, 2],\\n  ['crush-fitness', 246, 2],\\n  ['avmnite-02h', 212, 2],\\n  ['omega-net', 205, 2],\\n  ['silver-helix', 150, 2],\\n  ['phantasy', 100, 2],\\n  ['iron-gym', 100, 1],\\n  ['max-hardware', 80, 1],\\n  ['zer0', 75, 1],\\n  ['CSEC', 53, 1],\\n  ['neo-net', 50, 1],\\n  ['harakiri-sushi', 40, 0],\\n  ['hong-fang-tea', 30, 0],\\n  ['nectar-net', 20, 0],\\n  ['joesguns', 10, 0],\\n  ['sigma-cosmetics', 5, 0],\\n  ['n00dles', 1, 0],\\n  ['foodnstuff', 1, 0]]\\n\\n  function select_target(hackLevel, portsOpen, data) {\\n    let highestValue = -1; // Init with a low value\\n    let target = null;\\n    ns.tprint(data.length)\\n\\n    for (let i = 0; i < data.length; i++) {\\n      let serverHackLevel = data[i][1];\\n      let serverPortsOpen = data[i][2];\\n      console.log(serverHackLevel, hackLevel, serverPortsOpen, portsOpen)\\n\\n      if (serverHackLevel <= hackLevel && serverPortsOpen <= portsOpen) {\\n        // use a better formula here this just avoids hacking home and dark-net\\n        let value = serverHackLevel * serverPortsOpen;\\n        console.log(value)\\n\\n        if (value > highestValue) {\\n          highestValue = value;\\n          target = data[i][0];\\n        }\\n      }\\n    }\\n    ns.tprint(target);\\n\\n    return target;\\n  }\\n\\n  let target = select_target(hack_level, ports_open, server_data);\\n\\n  console.log(\\\"work.js\\\", \\\"target: \\\" + target, ns.args)\\n\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n  const justhack = false; //true;\\n  const time_options = {\\n  hour: '2-digit',\\n  minute: '2-digit',\\n  second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    ns.print(formattedTime);\\n    if (justhack) {\\n      await ns.hack(target);\\n    } else if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      await ns.grow(target);\\n    } else {\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"omnia\"}}]]},\"serversOnNetwork\":[\"snap-fitness\",\"defcomm\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":931982285,\"moneyMax\":23299557125,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":853,\"serverGrowth\":62,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[717,5],\"dataMap\":{},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1690.4100000002475,\"ramUsage\":2.4,\"server\":\"omnia\",\"scriptKey\":\"work.js*[717,5]\",\"title\":\"work.js 717 5\",\"threads\":26,\"temporary\":false}}]}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"7.6.7.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zeus-med\",\"microdyne\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":1079556442,\"moneyMax\":26988911050,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":776,\"serverGrowth\":73,\"runningScripts\":[]}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"88.0.9.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"taiyang-digital\",\"stormtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":914886517,\"moneyMax\":22872162925,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":789,\"serverGrowth\":71,\"runningScripts\":[]}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"65.1.0.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  //const data = ns.args[0]\\n  //TODO pass all the main data? might be slow?\\n  const hack_level = ns.args[0];\\n  const ports_open = ns.args[1];\\n\\n  // Gerenate server data, don't hard code\\n  // or use copy pasta fix thisGPT lol\\n  // as you can see below tho, it works.\\n  // scan-analyze 10\\n  // copy the data and ask for it in the right form, sort in python\\n  // server_data.sort(key=lambda x: (x[2], x[1]), reverse=True)\\n  const server_data = [['solaris', 912, 5],\\n  ['defcomm', 903, 5],\\n  ['taiyang-digital', 888, 5],\\n  ['aerocorp', 887, 5],\\n  ['icarus', 885, 5],\\n  ['infocomm', 876, 5],\\n  ['galactic-cyber', 869, 5],\\n  ['omnia', 853, 5],\\n  ['deltaone', 849, 5],\\n  ['syscore', 849, 5],\\n  ['zeus-med', 832, 5],\\n  ['zb-institute', 726, 5],\\n  ['darkweb', 1, 5],\\n  ['univ-energy', 840, 4],\\n  ['unitalife', 813, 4],\\n  ['nova-med', 786, 4],\\n  ['global-pharm', 777, 4],\\n  ['zb-def', 776, 4],\\n  ['snap-fitness', 711, 4],\\n  ['lexo-corp', 689, 4],\\n  ['alpha-ent', 600, 4],\\n  ['aevum-police', 441, 4],\\n  ['millenium-fitness', 525, 3],\\n  ['rho-construction', 510, 3],\\n  ['summit-uni', 466, 3],\\n  ['rothman-uni', 430, 3],\\n  ['catalyst', 409, 3],\\n  ['netlink', 401, 3],\\n  ['I.I.I.I', 340, 3],\\n  ['computek', 320, 3],\\n  ['johnson-ortho', 292, 2],\\n  ['the-hub', 280, 2],\\n  ['crush-fitness', 246, 2],\\n  ['avmnite-02h', 212, 2],\\n  ['omega-net', 205, 2],\\n  ['silver-helix', 150, 2],\\n  ['phantasy', 100, 2],\\n  ['iron-gym', 100, 1],\\n  ['max-hardware', 80, 1],\\n  ['zer0', 75, 1],\\n  ['CSEC', 53, 1],\\n  ['neo-net', 50, 1],\\n  ['harakiri-sushi', 40, 0],\\n  ['hong-fang-tea', 30, 0],\\n  ['nectar-net', 20, 0],\\n  ['joesguns', 10, 0],\\n  ['sigma-cosmetics', 5, 0],\\n  ['n00dles', 1, 0],\\n  ['foodnstuff', 1, 0]]\\n\\n  function select_target(hackLevel, portsOpen, data) {\\n    let highestValue = -1; // Init with a low value\\n    let target = null;\\n    ns.tprint(data.length)\\n\\n    for (let i = 0; i < data.length; i++) {\\n      let serverHackLevel = data[i][1];\\n      let serverPortsOpen = data[i][2];\\n      console.log(serverHackLevel, hackLevel, serverPortsOpen, portsOpen)\\n\\n      if (serverHackLevel <= hackLevel && serverPortsOpen <= portsOpen) {\\n        // use a better formula here this just avoids hacking home and dark-net\\n        let value = serverHackLevel * serverPortsOpen;\\n        console.log(value)\\n\\n        if (value > highestValue) {\\n          highestValue = value;\\n          target = data[i][0];\\n        }\\n      }\\n    }\\n    ns.tprint(target);\\n\\n    return target;\\n  }\\n\\n  let target = select_target(hack_level, ports_open, server_data);\\n\\n  console.log(\\\"work.js\\\", \\\"target: \\\" + target, ns.args)\\n\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n  const justhack = false; //true;\\n  const time_options = {\\n  hour: '2-digit',\\n  minute: '2-digit',\\n  second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    ns.print(formattedTime);\\n    if (justhack) {\\n      await ns.hack(target);\\n    } else if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      await ns.grow(target);\\n    } else {\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"solaris\"}}]]},\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":754807209,\"moneyMax\":18870180225,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":849,\"serverGrowth\":76,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[717,5],\"dataMap\":{},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1690.4100000002475,\"ramUsage\":2.4,\"server\":\"solaris\",\"scriptKey\":\"work.js*[717,5]\",\"title\":\"work.js 717 5\",\"threads\":6,\"temporary\":false}}]}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-392757-Sector12.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":192,\"reward\":{\"type\":0,\"name\":\"Sector-12\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"39.2.1.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"global-pharm\",\"icarus\",\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":1499801678,\"moneyMax\":37495041950,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":885,\"serverGrowth\":63,\"runningScripts\":[]}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"62.6.6.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  //const data = ns.args[0]\\n  //TODO pass all the main data? might be slow?\\n  const hack_level = ns.args[0];\\n  const ports_open = ns.args[1];\\n\\n  // Gerenate server data, don't hard code\\n  // or use copy pasta fix thisGPT lol\\n  // as you can see below tho, it works.\\n  // scan-analyze 10\\n  // copy the data and ask for it in the right form, sort in python\\n  // server_data.sort(key=lambda x: (x[2], x[1]), reverse=True)\\n  const server_data = [['solaris', 912, 5],\\n  ['defcomm', 903, 5],\\n  ['taiyang-digital', 888, 5],\\n  ['aerocorp', 887, 5],\\n  ['icarus', 885, 5],\\n  ['infocomm', 876, 5],\\n  ['galactic-cyber', 869, 5],\\n  ['omnia', 853, 5],\\n  ['deltaone', 849, 5],\\n  ['syscore', 849, 5],\\n  ['zeus-med', 832, 5],\\n  ['zb-institute', 726, 5],\\n  ['darkweb', 1, 5],\\n  ['univ-energy', 840, 4],\\n  ['unitalife', 813, 4],\\n  ['nova-med', 786, 4],\\n  ['global-pharm', 777, 4],\\n  ['zb-def', 776, 4],\\n  ['snap-fitness', 711, 4],\\n  ['lexo-corp', 689, 4],\\n  ['alpha-ent', 600, 4],\\n  ['aevum-police', 441, 4],\\n  ['millenium-fitness', 525, 3],\\n  ['rho-construction', 510, 3],\\n  ['summit-uni', 466, 3],\\n  ['rothman-uni', 430, 3],\\n  ['catalyst', 409, 3],\\n  ['netlink', 401, 3],\\n  ['I.I.I.I', 340, 3],\\n  ['computek', 320, 3],\\n  ['johnson-ortho', 292, 2],\\n  ['the-hub', 280, 2],\\n  ['crush-fitness', 246, 2],\\n  ['avmnite-02h', 212, 2],\\n  ['omega-net', 205, 2],\\n  ['silver-helix', 150, 2],\\n  ['phantasy', 100, 2],\\n  ['iron-gym', 100, 1],\\n  ['max-hardware', 80, 1],\\n  ['zer0', 75, 1],\\n  ['CSEC', 53, 1],\\n  ['neo-net', 50, 1],\\n  ['harakiri-sushi', 40, 0],\\n  ['hong-fang-tea', 30, 0],\\n  ['nectar-net', 20, 0],\\n  ['joesguns', 10, 0],\\n  ['sigma-cosmetics', 5, 0],\\n  ['n00dles', 1, 0],\\n  ['foodnstuff', 1, 0]]\\n\\n  function select_target(hackLevel, portsOpen, data) {\\n    let highestValue = -1; // Init with a low value\\n    let target = null;\\n    ns.tprint(data.length)\\n\\n    for (let i = 0; i < data.length; i++) {\\n      let serverHackLevel = data[i][1];\\n      let serverPortsOpen = data[i][2];\\n      console.log(serverHackLevel, hackLevel, serverPortsOpen, portsOpen)\\n\\n      if (serverHackLevel <= hackLevel && serverPortsOpen <= portsOpen) {\\n        // use a better formula here this just avoids hacking home and dark-net\\n        let value = serverHackLevel * serverPortsOpen;\\n        console.log(value)\\n\\n        if (value > highestValue) {\\n          highestValue = value;\\n          target = data[i][0];\\n        }\\n      }\\n    }\\n    ns.tprint(target);\\n\\n    return target;\\n  }\\n\\n  let target = select_target(hack_level, ports_open, server_data);\\n\\n  console.log(\\\"work.js\\\", \\\"target: \\\" + target, ns.args)\\n\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n  const justhack = false; //true;\\n  const time_options = {\\n  hour: '2-digit',\\n  minute: '2-digit',\\n  second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    ns.print(formattedTime);\\n    if (justhack) {\\n      await ns.hack(target);\\n    } else if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      await ns.grow(target);\\n    } else {\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"global-pharm\"}}]]},\"serversOnNetwork\":[\"millenium-fitness\",\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":1726182617,\"moneyMax\":43154565425,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":777,\"serverGrowth\":83,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[717,5],\"dataMap\":{},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1690.4100000002475,\"ramUsage\":2.4,\"server\":\"global-pharm\",\"scriptKey\":\"work.js*[717,5]\",\"title\":\"work.js 717 5\",\"threads\":26,\"temporary\":false}}]}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"55.4.4.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zeus-med\",\"titan-labs\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":1201682633,\"moneyMax\":30042065825,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":786,\"serverGrowth\":78,\"runningScripts\":[]}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"80.8.0.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnia\",\"taiyang-digital\",\"zb-def\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":1307956686,\"moneyMax\":32698917150,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":832,\"serverGrowth\":74,\"runningScripts\":[]}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"35.8.7.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  //const data = ns.args[0]\\n  //TODO pass all the main data? might be slow?\\n  const hack_level = ns.args[0];\\n  const ports_open = ns.args[1];\\n\\n  // Gerenate server data, don't hard code\\n  // or use copy pasta fix thisGPT lol\\n  // as you can see below tho, it works.\\n  // scan-analyze 10\\n  // copy the data and ask for it in the right form, sort in python\\n  // server_data.sort(key=lambda x: (x[2], x[1]), reverse=True)\\n  const server_data = [['solaris', 912, 5],\\n  ['defcomm', 903, 5],\\n  ['taiyang-digital', 888, 5],\\n  ['aerocorp', 887, 5],\\n  ['icarus', 885, 5],\\n  ['infocomm', 876, 5],\\n  ['galactic-cyber', 869, 5],\\n  ['omnia', 853, 5],\\n  ['deltaone', 849, 5],\\n  ['syscore', 849, 5],\\n  ['zeus-med', 832, 5],\\n  ['zb-institute', 726, 5],\\n  ['darkweb', 1, 5],\\n  ['univ-energy', 840, 4],\\n  ['unitalife', 813, 4],\\n  ['nova-med', 786, 4],\\n  ['global-pharm', 777, 4],\\n  ['zb-def', 776, 4],\\n  ['snap-fitness', 711, 4],\\n  ['lexo-corp', 689, 4],\\n  ['alpha-ent', 600, 4],\\n  ['aevum-police', 441, 4],\\n  ['millenium-fitness', 525, 3],\\n  ['rho-construction', 510, 3],\\n  ['summit-uni', 466, 3],\\n  ['rothman-uni', 430, 3],\\n  ['catalyst', 409, 3],\\n  ['netlink', 401, 3],\\n  ['I.I.I.I', 340, 3],\\n  ['computek', 320, 3],\\n  ['johnson-ortho', 292, 2],\\n  ['the-hub', 280, 2],\\n  ['crush-fitness', 246, 2],\\n  ['avmnite-02h', 212, 2],\\n  ['omega-net', 205, 2],\\n  ['silver-helix', 150, 2],\\n  ['phantasy', 100, 2],\\n  ['iron-gym', 100, 1],\\n  ['max-hardware', 80, 1],\\n  ['zer0', 75, 1],\\n  ['CSEC', 53, 1],\\n  ['neo-net', 50, 1],\\n  ['harakiri-sushi', 40, 0],\\n  ['hong-fang-tea', 30, 0],\\n  ['nectar-net', 20, 0],\\n  ['joesguns', 10, 0],\\n  ['sigma-cosmetics', 5, 0],\\n  ['n00dles', 1, 0],\\n  ['foodnstuff', 1, 0]]\\n\\n  function select_target(hackLevel, portsOpen, data) {\\n    let highestValue = -1; // Init with a low value\\n    let target = null;\\n    ns.tprint(data.length)\\n\\n    for (let i = 0; i < data.length; i++) {\\n      let serverHackLevel = data[i][1];\\n      let serverPortsOpen = data[i][2];\\n      console.log(serverHackLevel, hackLevel, serverPortsOpen, portsOpen)\\n\\n      if (serverHackLevel <= hackLevel && serverPortsOpen <= portsOpen) {\\n        // use a better formula here this just avoids hacking home and dark-net\\n        let value = serverHackLevel * serverPortsOpen;\\n        console.log(value)\\n\\n        if (value > highestValue) {\\n          highestValue = value;\\n          target = data[i][0];\\n        }\\n      }\\n    }\\n    ns.tprint(target);\\n\\n    return target;\\n  }\\n\\n  let target = select_target(hack_level, ports_open, server_data);\\n\\n  console.log(\\\"work.js\\\", \\\"target: \\\" + target, ns.args)\\n\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n  const justhack = false; //true;\\n  const time_options = {\\n  hour: '2-digit',\\n  minute: '2-digit',\\n  second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    ns.print(formattedTime);\\n    if (justhack) {\\n      await ns.hack(target);\\n    } else if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      await ns.grow(target);\\n    } else {\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"unitalife\"}}]]},\"serversOnNetwork\":[\"galactic-cyber\",\"univ-energy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":1006218676,\"moneyMax\":25155466900,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":813,\"serverGrowth\":75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[717,5],\"dataMap\":{},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1690.4100000002475,\"ramUsage\":2.4,\"server\":\"unitalife\",\"scriptKey\":\"work.js*[717,5]\",\"title\":\"work.js 717 5\",\"threads\":6,\"temporary\":false}}]}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-785358.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0,0,0,0,0,1,1],[0,1,0,0,0,0,0,1,0,0,0],[0,1,0,0,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0,0],[1,0,0,0,0,0,1,0,1,0,0],[0,1,0,0,0,0,0,0,0,1,0]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"10.9.8.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  //const data = ns.args[0]\\n  //TODO pass all the main data? might be slow?\\n  const hack_level = ns.args[0];\\n  const ports_open = ns.args[1];\\n\\n  // Gerenate server data, don't hard code\\n  // or use copy pasta fix thisGPT lol\\n  // as you can see below tho, it works.\\n  // scan-analyze 10\\n  // copy the data and ask for it in the right form, sort in python\\n  // server_data.sort(key=lambda x: (x[2], x[1]), reverse=True)\\n  const server_data = [['solaris', 912, 5],\\n  ['defcomm', 903, 5],\\n  ['taiyang-digital', 888, 5],\\n  ['aerocorp', 887, 5],\\n  ['icarus', 885, 5],\\n  ['infocomm', 876, 5],\\n  ['galactic-cyber', 869, 5],\\n  ['omnia', 853, 5],\\n  ['deltaone', 849, 5],\\n  ['syscore', 849, 5],\\n  ['zeus-med', 832, 5],\\n  ['zb-institute', 726, 5],\\n  ['darkweb', 1, 5],\\n  ['univ-energy', 840, 4],\\n  ['unitalife', 813, 4],\\n  ['nova-med', 786, 4],\\n  ['global-pharm', 777, 4],\\n  ['zb-def', 776, 4],\\n  ['snap-fitness', 711, 4],\\n  ['lexo-corp', 689, 4],\\n  ['alpha-ent', 600, 4],\\n  ['aevum-police', 441, 4],\\n  ['millenium-fitness', 525, 3],\\n  ['rho-construction', 510, 3],\\n  ['summit-uni', 466, 3],\\n  ['rothman-uni', 430, 3],\\n  ['catalyst', 409, 3],\\n  ['netlink', 401, 3],\\n  ['I.I.I.I', 340, 3],\\n  ['computek', 320, 3],\\n  ['johnson-ortho', 292, 2],\\n  ['the-hub', 280, 2],\\n  ['crush-fitness', 246, 2],\\n  ['avmnite-02h', 212, 2],\\n  ['omega-net', 205, 2],\\n  ['silver-helix', 150, 2],\\n  ['phantasy', 100, 2],\\n  ['iron-gym', 100, 1],\\n  ['max-hardware', 80, 1],\\n  ['zer0', 75, 1],\\n  ['CSEC', 53, 1],\\n  ['neo-net', 50, 1],\\n  ['harakiri-sushi', 40, 0],\\n  ['hong-fang-tea', 30, 0],\\n  ['nectar-net', 20, 0],\\n  ['joesguns', 10, 0],\\n  ['sigma-cosmetics', 5, 0],\\n  ['n00dles', 1, 0],\\n  ['foodnstuff', 1, 0]]\\n\\n  function select_target(hackLevel, portsOpen, data) {\\n    let highestValue = -1; // Init with a low value\\n    let target = null;\\n    ns.tprint(data.length)\\n\\n    for (let i = 0; i < data.length; i++) {\\n      let serverHackLevel = data[i][1];\\n      let serverPortsOpen = data[i][2];\\n      console.log(serverHackLevel, hackLevel, serverPortsOpen, portsOpen)\\n\\n      if (serverHackLevel <= hackLevel && serverPortsOpen <= portsOpen) {\\n        // use a better formula here this just avoids hacking home and dark-net\\n        let value = serverHackLevel * serverPortsOpen;\\n        console.log(value)\\n\\n        if (value > highestValue) {\\n          highestValue = value;\\n          target = data[i][0];\\n        }\\n      }\\n    }\\n    ns.tprint(target);\\n\\n    return target;\\n  }\\n\\n  let target = select_target(hack_level, ports_open, server_data);\\n\\n  console.log(\\\"work.js\\\", \\\"target: \\\" + target, ns.args)\\n\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n  const justhack = false; //true;\\n  const time_options = {\\n  hour: '2-digit',\\n  minute: '2-digit',\\n  second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    ns.print(formattedTime);\\n    if (justhack) {\\n      await ns.hack(target);\\n    } else if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      await ns.grow(target);\\n    } else {\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"lexo-corp\"}}]]},\"serversOnNetwork\":[\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":24,\"minDifficulty\":24,\"moneyAvailable\":19467519275,\"moneyMax\":19467519275,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":689,\"serverGrowth\":65,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[717,5],\"dataMap\":{},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1690.4100000002475,\"ramUsage\":2.4,\"server\":\"lexo-corp\",\"scriptKey\":\"work.js*[717,5]\",\"title\":\"work.js 717 5\",\"threads\":13,\"temporary\":false}}]}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-412176.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[8,[[2,4],[0,1],[1,2],[0,4],[3,6],[1,3],[2,5],[6,7],[2,3],[0,6],[0,5],[2,6]]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":true,\"ip\":\"28.0.9.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  //const data = ns.args[0]\\n  //TODO pass all the main data? might be slow?\\n  const hack_level = ns.args[0];\\n  const ports_open = ns.args[1];\\n\\n  // Gerenate server data, don't hard code\\n  // or use copy pasta fix thisGPT lol\\n  // as you can see below tho, it works.\\n  // scan-analyze 10\\n  // copy the data and ask for it in the right form, sort in python\\n  // server_data.sort(key=lambda x: (x[2], x[1]), reverse=True)\\n  const server_data = [['solaris', 912, 5],\\n  ['defcomm', 903, 5],\\n  ['taiyang-digital', 888, 5],\\n  ['aerocorp', 887, 5],\\n  ['icarus', 885, 5],\\n  ['infocomm', 876, 5],\\n  ['galactic-cyber', 869, 5],\\n  ['omnia', 853, 5],\\n  ['deltaone', 849, 5],\\n  ['syscore', 849, 5],\\n  ['zeus-med', 832, 5],\\n  ['zb-institute', 726, 5],\\n  ['darkweb', 1, 5],\\n  ['univ-energy', 840, 4],\\n  ['unitalife', 813, 4],\\n  ['nova-med', 786, 4],\\n  ['global-pharm', 777, 4],\\n  ['zb-def', 776, 4],\\n  ['snap-fitness', 711, 4],\\n  ['lexo-corp', 689, 4],\\n  ['alpha-ent', 600, 4],\\n  ['aevum-police', 441, 4],\\n  ['millenium-fitness', 525, 3],\\n  ['rho-construction', 510, 3],\\n  ['summit-uni', 466, 3],\\n  ['rothman-uni', 430, 3],\\n  ['catalyst', 409, 3],\\n  ['netlink', 401, 3],\\n  ['I.I.I.I', 340, 3],\\n  ['computek', 320, 3],\\n  ['johnson-ortho', 292, 2],\\n  ['the-hub', 280, 2],\\n  ['crush-fitness', 246, 2],\\n  ['avmnite-02h', 212, 2],\\n  ['omega-net', 205, 2],\\n  ['silver-helix', 150, 2],\\n  ['phantasy', 100, 2],\\n  ['iron-gym', 100, 1],\\n  ['max-hardware', 80, 1],\\n  ['zer0', 75, 1],\\n  ['CSEC', 53, 1],\\n  ['neo-net', 50, 1],\\n  ['harakiri-sushi', 40, 0],\\n  ['hong-fang-tea', 30, 0],\\n  ['nectar-net', 20, 0],\\n  ['joesguns', 10, 0],\\n  ['sigma-cosmetics', 5, 0],\\n  ['n00dles', 1, 0],\\n  ['foodnstuff', 1, 0]]\\n\\n  function select_target(hackLevel, portsOpen, data) {\\n    let highestValue = -1; // Init with a low value\\n    let target = null;\\n    ns.tprint(data.length)\\n\\n    for (let i = 0; i < data.length; i++) {\\n      let serverHackLevel = data[i][1];\\n      let serverPortsOpen = data[i][2];\\n      console.log(serverHackLevel, hackLevel, serverPortsOpen, portsOpen)\\n\\n      if (serverHackLevel <= hackLevel && serverPortsOpen <= portsOpen) {\\n        // use a better formula here this just avoids hacking home and dark-net\\n        let value = serverHackLevel * serverPortsOpen;\\n        console.log(value)\\n\\n        if (value > highestValue) {\\n          highestValue = value;\\n          target = data[i][0];\\n        }\\n      }\\n    }\\n    ns.tprint(target);\\n\\n    return target;\\n  }\\n\\n  let target = select_target(hack_level, ports_open, server_data);\\n\\n  console.log(\\\"work.js\\\", \\\"target: \\\" + target, ns.args)\\n\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n  const justhack = false; //true;\\n  const time_options = {\\n  hour: '2-digit',\\n  minute: '2-digit',\\n  second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    ns.print(formattedTime);\\n    if (justhack) {\\n      await ns.hack(target);\\n    } else if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      await ns.grow(target);\\n    } else {\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"rho-construction\"}}]]},\"serversOnNetwork\":[\"I.I.I.I\",\"aerocorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":49,\"hackDifficulty\":49,\"minDifficulty\":16,\"moneyAvailable\":585620079,\"moneyMax\":14640501975,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":510,\"serverGrowth\":49,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[717,5],\"dataMap\":{},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1690.4100000002475,\"ramUsage\":2.4,\"server\":\"rho-construction\",\"scriptKey\":\"work.js*[717,5]\",\"title\":\"work.js 717 5\",\"threads\":13,\"temporary\":false}}]}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"85.7.6.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  //const data = ns.args[0]\\n  //TODO pass all the main data? might be slow?\\n  const hack_level = ns.args[0];\\n  const ports_open = ns.args[1];\\n\\n  // Gerenate server data, don't hard code\\n  // or use copy pasta fix thisGPT lol\\n  // as you can see below tho, it works.\\n  // scan-analyze 10\\n  // copy the data and ask for it in the right form, sort in python\\n  // server_data.sort(key=lambda x: (x[2], x[1]), reverse=True)\\n  const server_data = [['solaris', 912, 5],\\n  ['defcomm', 903, 5],\\n  ['taiyang-digital', 888, 5],\\n  ['aerocorp', 887, 5],\\n  ['icarus', 885, 5],\\n  ['infocomm', 876, 5],\\n  ['galactic-cyber', 869, 5],\\n  ['omnia', 853, 5],\\n  ['deltaone', 849, 5],\\n  ['syscore', 849, 5],\\n  ['zeus-med', 832, 5],\\n  ['zb-institute', 726, 5],\\n  ['darkweb', 1, 5],\\n  ['univ-energy', 840, 4],\\n  ['unitalife', 813, 4],\\n  ['nova-med', 786, 4],\\n  ['global-pharm', 777, 4],\\n  ['zb-def', 776, 4],\\n  ['snap-fitness', 711, 4],\\n  ['lexo-corp', 689, 4],\\n  ['alpha-ent', 600, 4],\\n  ['aevum-police', 441, 4],\\n  ['millenium-fitness', 525, 3],\\n  ['rho-construction', 510, 3],\\n  ['summit-uni', 466, 3],\\n  ['rothman-uni', 430, 3],\\n  ['catalyst', 409, 3],\\n  ['netlink', 401, 3],\\n  ['I.I.I.I', 340, 3],\\n  ['computek', 320, 3],\\n  ['johnson-ortho', 292, 2],\\n  ['the-hub', 280, 2],\\n  ['crush-fitness', 246, 2],\\n  ['avmnite-02h', 212, 2],\\n  ['omega-net', 205, 2],\\n  ['silver-helix', 150, 2],\\n  ['phantasy', 100, 2],\\n  ['iron-gym', 100, 1],\\n  ['max-hardware', 80, 1],\\n  ['zer0', 75, 1],\\n  ['CSEC', 53, 1],\\n  ['neo-net', 50, 1],\\n  ['harakiri-sushi', 40, 0],\\n  ['hong-fang-tea', 30, 0],\\n  ['nectar-net', 20, 0],\\n  ['joesguns', 10, 0],\\n  ['sigma-cosmetics', 5, 0],\\n  ['n00dles', 1, 0],\\n  ['foodnstuff', 1, 0]]\\n\\n  function select_target(hackLevel, portsOpen, data) {\\n    let highestValue = -1; // Init with a low value\\n    let target = null;\\n    ns.tprint(data.length)\\n\\n    for (let i = 0; i < data.length; i++) {\\n      let serverHackLevel = data[i][1];\\n      let serverPortsOpen = data[i][2];\\n      console.log(serverHackLevel, hackLevel, serverPortsOpen, portsOpen)\\n\\n      if (serverHackLevel <= hackLevel && serverPortsOpen <= portsOpen) {\\n        // use a better formula here this just avoids hacking home and dark-net\\n        let value = serverHackLevel * serverPortsOpen;\\n        console.log(value)\\n\\n        if (value > highestValue) {\\n          highestValue = value;\\n          target = data[i][0];\\n        }\\n      }\\n    }\\n    ns.tprint(target);\\n\\n    return target;\\n  }\\n\\n  let target = select_target(hack_level, ports_open, server_data);\\n\\n  console.log(\\\"work.js\\\", \\\"target: \\\" + target, ns.args)\\n\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n  const justhack = false; //true;\\n  const time_options = {\\n  hour: '2-digit',\\n  minute: '2-digit',\\n  second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    ns.print(formattedTime);\\n    if (justhack) {\\n      await ns.hack(target);\\n    } else if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      await ns.grow(target);\\n    } else {\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"alpha-ent\"}}]]},\"serversOnNetwork\":[\"syscore\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":52,\"hackDifficulty\":75.906,\"minDifficulty\":17,\"moneyAvailable\":17716417504.751083,\"moneyMax\":17870587075,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":547,\"serverGrowth\":54,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[717,5],\"dataMap\":{},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1690.4100000002475,\"ramUsage\":2.4,\"server\":\"alpha-ent\",\"scriptKey\":\"work.js*[717,5]\",\"title\":\"work.js 717 5\",\"threads\":13,\"temporary\":false}}]}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"45.7.7.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  //const data = ns.args[0]\\n  //TODO pass all the main data? might be slow?\\n  const hack_level = ns.args[0];\\n  const ports_open = ns.args[1];\\n\\n  // Gerenate server data, don't hard code\\n  // or use copy pasta fix thisGPT lol\\n  // as you can see below tho, it works.\\n  // scan-analyze 10\\n  // copy the data and ask for it in the right form, sort in python\\n  // server_data.sort(key=lambda x: (x[2], x[1]), reverse=True)\\n  const server_data = [['solaris', 912, 5],\\n  ['defcomm', 903, 5],\\n  ['taiyang-digital', 888, 5],\\n  ['aerocorp', 887, 5],\\n  ['icarus', 885, 5],\\n  ['infocomm', 876, 5],\\n  ['galactic-cyber', 869, 5],\\n  ['omnia', 853, 5],\\n  ['deltaone', 849, 5],\\n  ['syscore', 849, 5],\\n  ['zeus-med', 832, 5],\\n  ['zb-institute', 726, 5],\\n  ['darkweb', 1, 5],\\n  ['univ-energy', 840, 4],\\n  ['unitalife', 813, 4],\\n  ['nova-med', 786, 4],\\n  ['global-pharm', 777, 4],\\n  ['zb-def', 776, 4],\\n  ['snap-fitness', 711, 4],\\n  ['lexo-corp', 689, 4],\\n  ['alpha-ent', 600, 4],\\n  ['aevum-police', 441, 4],\\n  ['millenium-fitness', 525, 3],\\n  ['rho-construction', 510, 3],\\n  ['summit-uni', 466, 3],\\n  ['rothman-uni', 430, 3],\\n  ['catalyst', 409, 3],\\n  ['netlink', 401, 3],\\n  ['I.I.I.I', 340, 3],\\n  ['computek', 320, 3],\\n  ['johnson-ortho', 292, 2],\\n  ['the-hub', 280, 2],\\n  ['crush-fitness', 246, 2],\\n  ['avmnite-02h', 212, 2],\\n  ['omega-net', 205, 2],\\n  ['silver-helix', 150, 2],\\n  ['phantasy', 100, 2],\\n  ['iron-gym', 100, 1],\\n  ['max-hardware', 80, 1],\\n  ['zer0', 75, 1],\\n  ['CSEC', 53, 1],\\n  ['neo-net', 50, 1],\\n  ['harakiri-sushi', 40, 0],\\n  ['hong-fang-tea', 30, 0],\\n  ['nectar-net', 20, 0],\\n  ['joesguns', 10, 0],\\n  ['sigma-cosmetics', 5, 0],\\n  ['n00dles', 1, 0],\\n  ['foodnstuff', 1, 0]]\\n\\n  function select_target(hackLevel, portsOpen, data) {\\n    let highestValue = -1; // Init with a low value\\n    let target = null;\\n    ns.tprint(data.length)\\n\\n    for (let i = 0; i < data.length; i++) {\\n      let serverHackLevel = data[i][1];\\n      let serverPortsOpen = data[i][2];\\n      console.log(serverHackLevel, hackLevel, serverPortsOpen, portsOpen)\\n\\n      if (serverHackLevel <= hackLevel && serverPortsOpen <= portsOpen) {\\n        // use a better formula here this just avoids hacking home and dark-net\\n        let value = serverHackLevel * serverPortsOpen;\\n        console.log(value)\\n\\n        if (value > highestValue) {\\n          highestValue = value;\\n          target = data[i][0];\\n        }\\n      }\\n    }\\n    ns.tprint(target);\\n\\n    return target;\\n  }\\n\\n  let target = select_target(hack_level, ports_open, server_data);\\n\\n  console.log(\\\"work.js\\\", \\\"target: \\\" + target, ns.args)\\n\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n  const justhack = false; //true;\\n  const time_options = {\\n  hour: '2-digit',\\n  minute: '2-digit',\\n  second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    ns.print(formattedTime);\\n    if (justhack) {\\n      await ns.hack(target);\\n    } else if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      await ns.grow(target);\\n    } else {\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"aevum-police\"}}]]},\"serversOnNetwork\":[\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":204417997,\"moneyMax\":5110449925,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":441,\"serverGrowth\":47,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[717,5],\"dataMap\":{},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1690.4100000002475,\"ramUsage\":2.4,\"server\":\"aevum-police\",\"scriptKey\":\"work.js*[717,5]\",\"title\":\"work.js 717 5\",\"threads\":6,\"temporary\":false}}]}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":true,\"ip\":\"60.9.0.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  //const data = ns.args[0]\\n  //TODO pass all the main data? might be slow?\\n  const hack_level = ns.args[0];\\n  const ports_open = ns.args[1];\\n\\n  // Gerenate server data, don't hard code\\n  // or use copy pasta fix thisGPT lol\\n  // as you can see below tho, it works.\\n  // scan-analyze 10\\n  // copy the data and ask for it in the right form, sort in python\\n  // server_data.sort(key=lambda x: (x[2], x[1]), reverse=True)\\n  const server_data = [['solaris', 912, 5],\\n  ['defcomm', 903, 5],\\n  ['taiyang-digital', 888, 5],\\n  ['aerocorp', 887, 5],\\n  ['icarus', 885, 5],\\n  ['infocomm', 876, 5],\\n  ['galactic-cyber', 869, 5],\\n  ['omnia', 853, 5],\\n  ['deltaone', 849, 5],\\n  ['syscore', 849, 5],\\n  ['zeus-med', 832, 5],\\n  ['zb-institute', 726, 5],\\n  ['darkweb', 1, 5],\\n  ['univ-energy', 840, 4],\\n  ['unitalife', 813, 4],\\n  ['nova-med', 786, 4],\\n  ['global-pharm', 777, 4],\\n  ['zb-def', 776, 4],\\n  ['snap-fitness', 711, 4],\\n  ['lexo-corp', 689, 4],\\n  ['alpha-ent', 600, 4],\\n  ['aevum-police', 441, 4],\\n  ['millenium-fitness', 525, 3],\\n  ['rho-construction', 510, 3],\\n  ['summit-uni', 466, 3],\\n  ['rothman-uni', 430, 3],\\n  ['catalyst', 409, 3],\\n  ['netlink', 401, 3],\\n  ['I.I.I.I', 340, 3],\\n  ['computek', 320, 3],\\n  ['johnson-ortho', 292, 2],\\n  ['the-hub', 280, 2],\\n  ['crush-fitness', 246, 2],\\n  ['avmnite-02h', 212, 2],\\n  ['omega-net', 205, 2],\\n  ['silver-helix', 150, 2],\\n  ['phantasy', 100, 2],\\n  ['iron-gym', 100, 1],\\n  ['max-hardware', 80, 1],\\n  ['zer0', 75, 1],\\n  ['CSEC', 53, 1],\\n  ['neo-net', 50, 1],\\n  ['harakiri-sushi', 40, 0],\\n  ['hong-fang-tea', 30, 0],\\n  ['nectar-net', 20, 0],\\n  ['joesguns', 10, 0],\\n  ['sigma-cosmetics', 5, 0],\\n  ['n00dles', 1, 0],\\n  ['foodnstuff', 1, 0]]\\n\\n  function select_target(hackLevel, portsOpen, data) {\\n    let highestValue = -1; // Init with a low value\\n    let target = null;\\n    ns.tprint(data.length)\\n\\n    for (let i = 0; i < data.length; i++) {\\n      let serverHackLevel = data[i][1];\\n      let serverPortsOpen = data[i][2];\\n      console.log(serverHackLevel, hackLevel, serverPortsOpen, portsOpen)\\n\\n      if (serverHackLevel <= hackLevel && serverPortsOpen <= portsOpen) {\\n        // use a better formula here this just avoids hacking home and dark-net\\n        let value = serverHackLevel * serverPortsOpen;\\n        console.log(value)\\n\\n        if (value > highestValue) {\\n          highestValue = value;\\n          target = data[i][0];\\n        }\\n      }\\n    }\\n    ns.tprint(target);\\n\\n    return target;\\n  }\\n\\n  let target = select_target(hack_level, ports_open, server_data);\\n\\n  console.log(\\\"work.js\\\", \\\"target: \\\" + target, ns.args)\\n\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n  const justhack = false; //true;\\n  const time_options = {\\n  hour: '2-digit',\\n  minute: '2-digit',\\n  second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    ns.print(formattedTime);\\n    if (justhack) {\\n      await ns.hack(target);\\n    } else if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      await ns.grow(target);\\n    } else {\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"rothman-uni\"}}]]},\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":52,\"hackDifficulty\":52,\"minDifficulty\":17,\"moneyAvailable\":203845621,\"moneyMax\":5096140525,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":430,\"serverGrowth\":41,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[717,5],\"dataMap\":{},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1690.4100000002475,\"ramUsage\":2.4,\"server\":\"rothman-uni\",\"scriptKey\":\"work.js*[717,5]\",\"title\":\"work.js 717 5\",\"threads\":53,\"temporary\":false}}]}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"95.9.9.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  //const data = ns.args[0]\\n  //TODO pass all the main data? might be slow?\\n  const hack_level = ns.args[0];\\n  const ports_open = ns.args[1];\\n\\n  // Gerenate server data, don't hard code\\n  // or use copy pasta fix thisGPT lol\\n  // as you can see below tho, it works.\\n  // scan-analyze 10\\n  // copy the data and ask for it in the right form, sort in python\\n  // server_data.sort(key=lambda x: (x[2], x[1]), reverse=True)\\n  const server_data = [['solaris', 912, 5],\\n  ['defcomm', 903, 5],\\n  ['taiyang-digital', 888, 5],\\n  ['aerocorp', 887, 5],\\n  ['icarus', 885, 5],\\n  ['infocomm', 876, 5],\\n  ['galactic-cyber', 869, 5],\\n  ['omnia', 853, 5],\\n  ['deltaone', 849, 5],\\n  ['syscore', 849, 5],\\n  ['zeus-med', 832, 5],\\n  ['zb-institute', 726, 5],\\n  ['darkweb', 1, 5],\\n  ['univ-energy', 840, 4],\\n  ['unitalife', 813, 4],\\n  ['nova-med', 786, 4],\\n  ['global-pharm', 777, 4],\\n  ['zb-def', 776, 4],\\n  ['snap-fitness', 711, 4],\\n  ['lexo-corp', 689, 4],\\n  ['alpha-ent', 600, 4],\\n  ['aevum-police', 441, 4],\\n  ['millenium-fitness', 525, 3],\\n  ['rho-construction', 510, 3],\\n  ['summit-uni', 466, 3],\\n  ['rothman-uni', 430, 3],\\n  ['catalyst', 409, 3],\\n  ['netlink', 401, 3],\\n  ['I.I.I.I', 340, 3],\\n  ['computek', 320, 3],\\n  ['johnson-ortho', 292, 2],\\n  ['the-hub', 280, 2],\\n  ['crush-fitness', 246, 2],\\n  ['avmnite-02h', 212, 2],\\n  ['omega-net', 205, 2],\\n  ['silver-helix', 150, 2],\\n  ['phantasy', 100, 2],\\n  ['iron-gym', 100, 1],\\n  ['max-hardware', 80, 1],\\n  ['zer0', 75, 1],\\n  ['CSEC', 53, 1],\\n  ['neo-net', 50, 1],\\n  ['harakiri-sushi', 40, 0],\\n  ['hong-fang-tea', 30, 0],\\n  ['nectar-net', 20, 0],\\n  ['joesguns', 10, 0],\\n  ['sigma-cosmetics', 5, 0],\\n  ['n00dles', 1, 0],\\n  ['foodnstuff', 1, 0]]\\n\\n  function select_target(hackLevel, portsOpen, data) {\\n    let highestValue = -1; // Init with a low value\\n    let target = null;\\n    ns.tprint(data.length)\\n\\n    for (let i = 0; i < data.length; i++) {\\n      let serverHackLevel = data[i][1];\\n      let serverPortsOpen = data[i][2];\\n      console.log(serverHackLevel, hackLevel, serverPortsOpen, portsOpen)\\n\\n      if (serverHackLevel <= hackLevel && serverPortsOpen <= portsOpen) {\\n        // use a better formula here this just avoids hacking home and dark-net\\n        let value = serverHackLevel * serverPortsOpen;\\n        console.log(value)\\n\\n        if (value > highestValue) {\\n          highestValue = value;\\n          target = data[i][0];\\n        }\\n      }\\n    }\\n    ns.tprint(target);\\n\\n    return target;\\n  }\\n\\n  let target = select_target(hack_level, ports_open, server_data);\\n\\n  console.log(\\\"work.js\\\", \\\"target: \\\" + target, ns.args)\\n\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n  const justhack = false; //true;\\n  const time_options = {\\n  hour: '2-digit',\\n  minute: '2-digit',\\n  second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    ns.print(formattedTime);\\n    if (justhack) {\\n      await ns.hack(target);\\n    } else if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      await ns.grow(target);\\n    } else {\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"zb-institute\"}}]]},\"serversOnNetwork\":[\"computek\",\"aevum-police\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67,\"hackDifficulty\":67,\"minDifficulty\":22,\"moneyAvailable\":881818017,\"moneyMax\":22045450425,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":726,\"serverGrowth\":83,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[717,5],\"dataMap\":{},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1690.4100000002475,\"ramUsage\":2.4,\"server\":\"zb-institute\",\"scriptKey\":\"work.js*[717,5]\",\"title\":\"work.js 717 5\",\"threads\":53,\"temporary\":false}}]}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":true,\"ip\":\"19.9.7.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  //const data = ns.args[0]\\n  //TODO pass all the main data? might be slow?\\n  const hack_level = ns.args[0];\\n  const ports_open = ns.args[1];\\n\\n  // Gerenate server data, don't hard code\\n  // or use copy pasta fix thisGPT lol\\n  // as you can see below tho, it works.\\n  // scan-analyze 10\\n  // copy the data and ask for it in the right form, sort in python\\n  // server_data.sort(key=lambda x: (x[2], x[1]), reverse=True)\\n  const server_data = [['solaris', 912, 5],\\n  ['defcomm', 903, 5],\\n  ['taiyang-digital', 888, 5],\\n  ['aerocorp', 887, 5],\\n  ['icarus', 885, 5],\\n  ['infocomm', 876, 5],\\n  ['galactic-cyber', 869, 5],\\n  ['omnia', 853, 5],\\n  ['deltaone', 849, 5],\\n  ['syscore', 849, 5],\\n  ['zeus-med', 832, 5],\\n  ['zb-institute', 726, 5],\\n  ['darkweb', 1, 5],\\n  ['univ-energy', 840, 4],\\n  ['unitalife', 813, 4],\\n  ['nova-med', 786, 4],\\n  ['global-pharm', 777, 4],\\n  ['zb-def', 776, 4],\\n  ['snap-fitness', 711, 4],\\n  ['lexo-corp', 689, 4],\\n  ['alpha-ent', 600, 4],\\n  ['aevum-police', 441, 4],\\n  ['millenium-fitness', 525, 3],\\n  ['rho-construction', 510, 3],\\n  ['summit-uni', 466, 3],\\n  ['rothman-uni', 430, 3],\\n  ['catalyst', 409, 3],\\n  ['netlink', 401, 3],\\n  ['I.I.I.I', 340, 3],\\n  ['computek', 320, 3],\\n  ['johnson-ortho', 292, 2],\\n  ['the-hub', 280, 2],\\n  ['crush-fitness', 246, 2],\\n  ['avmnite-02h', 212, 2],\\n  ['omega-net', 205, 2],\\n  ['silver-helix', 150, 2],\\n  ['phantasy', 100, 2],\\n  ['iron-gym', 100, 1],\\n  ['max-hardware', 80, 1],\\n  ['zer0', 75, 1],\\n  ['CSEC', 53, 1],\\n  ['neo-net', 50, 1],\\n  ['harakiri-sushi', 40, 0],\\n  ['hong-fang-tea', 30, 0],\\n  ['nectar-net', 20, 0],\\n  ['joesguns', 10, 0],\\n  ['sigma-cosmetics', 5, 0],\\n  ['n00dles', 1, 0],\\n  ['foodnstuff', 1, 0]]\\n\\n  function select_target(hackLevel, portsOpen, data) {\\n    let highestValue = -1; // Init with a low value\\n    let target = null;\\n    ns.tprint(data.length)\\n\\n    for (let i = 0; i < data.length; i++) {\\n      let serverHackLevel = data[i][1];\\n      let serverPortsOpen = data[i][2];\\n      console.log(serverHackLevel, hackLevel, serverPortsOpen, portsOpen)\\n\\n      if (serverHackLevel <= hackLevel && serverPortsOpen <= portsOpen) {\\n        // use a better formula here this just avoids hacking home and dark-net\\n        let value = serverHackLevel * serverPortsOpen;\\n        console.log(value)\\n\\n        if (value > highestValue) {\\n          highestValue = value;\\n          target = data[i][0];\\n        }\\n      }\\n    }\\n    ns.tprint(target);\\n\\n    return target;\\n  }\\n\\n  let target = select_target(hack_level, ports_open, server_data);\\n\\n  console.log(\\\"work.js\\\", \\\"target: \\\" + target, ns.args)\\n\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n  const justhack = false; //true;\\n  const time_options = {\\n  hour: '2-digit',\\n  minute: '2-digit',\\n  second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    ns.print(formattedTime);\\n    if (justhack) {\\n      await ns.hack(target);\\n    } else if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      await ns.grow(target);\\n    } else {\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"summit-uni\"}}]]},\"serversOnNetwork\":[\"johnson-ortho\",\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":48,\"hackDifficulty\":48,\"minDifficulty\":16,\"moneyAvailable\":266681109,\"moneyMax\":6667027725,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":466,\"serverGrowth\":50,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[717,5],\"dataMap\":{},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1690.4100000002475,\"ramUsage\":2.4,\"server\":\"summit-uni\",\"scriptKey\":\"work.js*[717,5]\",\"title\":\"work.js 717 5\",\"threads\":26,\"temporary\":false}}]}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"41.1.1.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"computek\",\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":522182045,\"moneyMax\":13054551125,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":600,\"serverGrowth\":69,\"runningScripts\":[]}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":true,\"ip\":\"45.6.2.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  //const data = ns.args[0]\\n  //TODO pass all the main data? might be slow?\\n  const hack_level = ns.args[0];\\n  const ports_open = ns.args[1];\\n\\n  // Gerenate server data, don't hard code\\n  // or use copy pasta fix thisGPT lol\\n  // as you can see below tho, it works.\\n  // scan-analyze 10\\n  // copy the data and ask for it in the right form, sort in python\\n  // server_data.sort(key=lambda x: (x[2], x[1]), reverse=True)\\n  const server_data = [['solaris', 912, 5],\\n  ['defcomm', 903, 5],\\n  ['taiyang-digital', 888, 5],\\n  ['aerocorp', 887, 5],\\n  ['icarus', 885, 5],\\n  ['infocomm', 876, 5],\\n  ['galactic-cyber', 869, 5],\\n  ['omnia', 853, 5],\\n  ['deltaone', 849, 5],\\n  ['syscore', 849, 5],\\n  ['zeus-med', 832, 5],\\n  ['zb-institute', 726, 5],\\n  ['darkweb', 1, 5],\\n  ['univ-energy', 840, 4],\\n  ['unitalife', 813, 4],\\n  ['nova-med', 786, 4],\\n  ['global-pharm', 777, 4],\\n  ['zb-def', 776, 4],\\n  ['snap-fitness', 711, 4],\\n  ['lexo-corp', 689, 4],\\n  ['alpha-ent', 600, 4],\\n  ['aevum-police', 441, 4],\\n  ['millenium-fitness', 525, 3],\\n  ['rho-construction', 510, 3],\\n  ['summit-uni', 466, 3],\\n  ['rothman-uni', 430, 3],\\n  ['catalyst', 409, 3],\\n  ['netlink', 401, 3],\\n  ['I.I.I.I', 340, 3],\\n  ['computek', 320, 3],\\n  ['johnson-ortho', 292, 2],\\n  ['the-hub', 280, 2],\\n  ['crush-fitness', 246, 2],\\n  ['avmnite-02h', 212, 2],\\n  ['omega-net', 205, 2],\\n  ['silver-helix', 150, 2],\\n  ['phantasy', 100, 2],\\n  ['iron-gym', 100, 1],\\n  ['max-hardware', 80, 1],\\n  ['zer0', 75, 1],\\n  ['CSEC', 53, 1],\\n  ['neo-net', 50, 1],\\n  ['harakiri-sushi', 40, 0],\\n  ['hong-fang-tea', 30, 0],\\n  ['nectar-net', 20, 0],\\n  ['joesguns', 10, 0],\\n  ['sigma-cosmetics', 5, 0],\\n  ['n00dles', 1, 0],\\n  ['foodnstuff', 1, 0]]\\n\\n  function select_target(hackLevel, portsOpen, data) {\\n    let highestValue = -1; // Init with a low value\\n    let target = null;\\n    ns.tprint(data.length)\\n\\n    for (let i = 0; i < data.length; i++) {\\n      let serverHackLevel = data[i][1];\\n      let serverPortsOpen = data[i][2];\\n      console.log(serverHackLevel, hackLevel, serverPortsOpen, portsOpen)\\n\\n      if (serverHackLevel <= hackLevel && serverPortsOpen <= portsOpen) {\\n        // use a better formula here this just avoids hacking home and dark-net\\n        let value = serverHackLevel * serverPortsOpen;\\n        console.log(value)\\n\\n        if (value > highestValue) {\\n          highestValue = value;\\n          target = data[i][0];\\n        }\\n      }\\n    }\\n    ns.tprint(target);\\n\\n    return target;\\n  }\\n\\n  let target = select_target(hack_level, ports_open, server_data);\\n\\n  console.log(\\\"work.js\\\", \\\"target: \\\" + target, ns.args)\\n\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n  const justhack = false; //true;\\n  const time_options = {\\n  hour: '2-digit',\\n  minute: '2-digit',\\n  second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    ns.print(formattedTime);\\n    if (justhack) {\\n      await ns.hack(target);\\n    } else if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      await ns.grow(target);\\n    } else {\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"catalyst\"}}]]},\"serversOnNetwork\":[\"the-hub\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":420632378,\"moneyMax\":10515809450,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":409,\"serverGrowth\":44,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[717,5],\"dataMap\":{},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1690.4100000002475,\"ramUsage\":2.4,\"server\":\"catalyst\",\"scriptKey\":\"work.js*[717,5]\",\"title\":\"work.js 717 5\",\"threads\":53,\"temporary\":false}}]}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-3883.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,0,0,1,0,0,1,0,1],[1,0,1,0,0,1,0,0,0,1],[0,0,0,0,0,1,1,0,0,0],[0,1,0,0,0,0,1,0,0,0],[0,0,1,1,1,0,1,0,0,0],[0,1,0,0,1,0,1,1,0,0],[1,0,1,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,0,0,0]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-736090.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"84762219564\",41],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":true,\"ip\":\"40.3.1.7\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  //const data = ns.args[0]\\n  //TODO pass all the main data? might be slow?\\n  const hack_level = ns.args[0];\\n  const ports_open = ns.args[1];\\n\\n  // Gerenate server data, don't hard code\\n  // or use copy pasta fix thisGPT lol\\n  // as you can see below tho, it works.\\n  // scan-analyze 10\\n  // copy the data and ask for it in the right form, sort in python\\n  // server_data.sort(key=lambda x: (x[2], x[1]), reverse=True)\\n  const server_data = [['solaris', 912, 5],\\n  ['defcomm', 903, 5],\\n  ['taiyang-digital', 888, 5],\\n  ['aerocorp', 887, 5],\\n  ['icarus', 885, 5],\\n  ['infocomm', 876, 5],\\n  ['galactic-cyber', 869, 5],\\n  ['omnia', 853, 5],\\n  ['deltaone', 849, 5],\\n  ['syscore', 849, 5],\\n  ['zeus-med', 832, 5],\\n  ['zb-institute', 726, 5],\\n  ['darkweb', 1, 5],\\n  ['univ-energy', 840, 4],\\n  ['unitalife', 813, 4],\\n  ['nova-med', 786, 4],\\n  ['global-pharm', 777, 4],\\n  ['zb-def', 776, 4],\\n  ['snap-fitness', 711, 4],\\n  ['lexo-corp', 689, 4],\\n  ['alpha-ent', 600, 4],\\n  ['aevum-police', 441, 4],\\n  ['millenium-fitness', 525, 3],\\n  ['rho-construction', 510, 3],\\n  ['summit-uni', 466, 3],\\n  ['rothman-uni', 430, 3],\\n  ['catalyst', 409, 3],\\n  ['netlink', 401, 3],\\n  ['I.I.I.I', 340, 3],\\n  ['computek', 320, 3],\\n  ['johnson-ortho', 292, 2],\\n  ['the-hub', 280, 2],\\n  ['crush-fitness', 246, 2],\\n  ['avmnite-02h', 212, 2],\\n  ['omega-net', 205, 2],\\n  ['silver-helix', 150, 2],\\n  ['phantasy', 100, 2],\\n  ['iron-gym', 100, 1],\\n  ['max-hardware', 80, 1],\\n  ['zer0', 75, 1],\\n  ['CSEC', 53, 1],\\n  ['neo-net', 50, 1],\\n  ['harakiri-sushi', 40, 0],\\n  ['hong-fang-tea', 30, 0],\\n  ['nectar-net', 20, 0],\\n  ['joesguns', 10, 0],\\n  ['sigma-cosmetics', 5, 0],\\n  ['n00dles', 1, 0],\\n  ['foodnstuff', 1, 0]]\\n\\n  function select_target(hackLevel, portsOpen, data) {\\n    let highestValue = -1; // Init with a low value\\n    let target = null;\\n    ns.tprint(data.length)\\n\\n    for (let i = 0; i < data.length; i++) {\\n      let serverHackLevel = data[i][1];\\n      let serverPortsOpen = data[i][2];\\n      console.log(serverHackLevel, hackLevel, serverPortsOpen, portsOpen)\\n\\n      if (serverHackLevel <= hackLevel && serverPortsOpen <= portsOpen) {\\n        // use a better formula here this just avoids hacking home and dark-net\\n        let value = serverHackLevel * serverPortsOpen;\\n        console.log(value)\\n\\n        if (value > highestValue) {\\n          highestValue = value;\\n          target = data[i][0];\\n        }\\n      }\\n    }\\n    ns.tprint(target);\\n\\n    return target;\\n  }\\n\\n  let target = select_target(hack_level, ports_open, server_data);\\n\\n  console.log(\\\"work.js\\\", \\\"target: \\\" + target, ns.args)\\n\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n  const justhack = false; //true;\\n  const time_options = {\\n  hour: '2-digit',\\n  minute: '2-digit',\\n  second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    ns.print(formattedTime);\\n    if (justhack) {\\n      await ns.hack(target);\\n    } else if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      await ns.grow(target);\\n    } else {\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"the-hub\"}}]]},\"serversOnNetwork\":[\"phantasy\",\"catalyst\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":39,\"hackDifficulty\":39,\"minDifficulty\":13,\"moneyAvailable\":183767294,\"moneyMax\":4594182350,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":280,\"serverGrowth\":46,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[717,5],\"dataMap\":{},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1690.4100000002475,\"ramUsage\":2.4,\"server\":\"the-hub\",\"scriptKey\":\"work.js*[717,5]\",\"title\":\"work.js 717 5\",\"threads\":3,\"temporary\":false}}]}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"computek\",\"httpPortOpen\":true,\"ip\":\"82.7.8.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"silver-helix\",\"zb-institute\",\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":246917172,\"moneyMax\":6172929300,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":320,\"serverGrowth\":50,\"runningScripts\":[]}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":true,\"ip\":\"43.9.2.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  //const data = ns.args[0]\\n  //TODO pass all the main data? might be slow?\\n  const hack_level = ns.args[0];\\n  const ports_open = ns.args[1];\\n\\n  // Gerenate server data, don't hard code\\n  // or use copy pasta fix thisGPT lol\\n  // as you can see below tho, it works.\\n  // scan-analyze 10\\n  // copy the data and ask for it in the right form, sort in python\\n  // server_data.sort(key=lambda x: (x[2], x[1]), reverse=True)\\n  const server_data = [['solaris', 912, 5],\\n  ['defcomm', 903, 5],\\n  ['taiyang-digital', 888, 5],\\n  ['aerocorp', 887, 5],\\n  ['icarus', 885, 5],\\n  ['infocomm', 876, 5],\\n  ['galactic-cyber', 869, 5],\\n  ['omnia', 853, 5],\\n  ['deltaone', 849, 5],\\n  ['syscore', 849, 5],\\n  ['zeus-med', 832, 5],\\n  ['zb-institute', 726, 5],\\n  ['darkweb', 1, 5],\\n  ['univ-energy', 840, 4],\\n  ['unitalife', 813, 4],\\n  ['nova-med', 786, 4],\\n  ['global-pharm', 777, 4],\\n  ['zb-def', 776, 4],\\n  ['snap-fitness', 711, 4],\\n  ['lexo-corp', 689, 4],\\n  ['alpha-ent', 600, 4],\\n  ['aevum-police', 441, 4],\\n  ['millenium-fitness', 525, 3],\\n  ['rho-construction', 510, 3],\\n  ['summit-uni', 466, 3],\\n  ['rothman-uni', 430, 3],\\n  ['catalyst', 409, 3],\\n  ['netlink', 401, 3],\\n  ['I.I.I.I', 340, 3],\\n  ['computek', 320, 3],\\n  ['johnson-ortho', 292, 2],\\n  ['the-hub', 280, 2],\\n  ['crush-fitness', 246, 2],\\n  ['avmnite-02h', 212, 2],\\n  ['omega-net', 205, 2],\\n  ['silver-helix', 150, 2],\\n  ['phantasy', 100, 2],\\n  ['iron-gym', 100, 1],\\n  ['max-hardware', 80, 1],\\n  ['zer0', 75, 1],\\n  ['CSEC', 53, 1],\\n  ['neo-net', 50, 1],\\n  ['harakiri-sushi', 40, 0],\\n  ['hong-fang-tea', 30, 0],\\n  ['nectar-net', 20, 0],\\n  ['joesguns', 10, 0],\\n  ['sigma-cosmetics', 5, 0],\\n  ['n00dles', 1, 0],\\n  ['foodnstuff', 1, 0]]\\n\\n  function select_target(hackLevel, portsOpen, data) {\\n    let highestValue = -1; // Init with a low value\\n    let target = null;\\n    ns.tprint(data.length)\\n\\n    for (let i = 0; i < data.length; i++) {\\n      let serverHackLevel = data[i][1];\\n      let serverPortsOpen = data[i][2];\\n      console.log(serverHackLevel, hackLevel, serverPortsOpen, portsOpen)\\n\\n      if (serverHackLevel <= hackLevel && serverPortsOpen <= portsOpen) {\\n        // use a better formula here this just avoids hacking home and dark-net\\n        let value = serverHackLevel * serverPortsOpen;\\n        console.log(value)\\n\\n        if (value > highestValue) {\\n          highestValue = value;\\n          target = data[i][0];\\n        }\\n      }\\n    }\\n    ns.tprint(target);\\n\\n    return target;\\n  }\\n\\n  let target = select_target(hack_level, ports_open, server_data);\\n\\n  console.log(\\\"work.js\\\", \\\"target: \\\" + target, ns.args)\\n\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n  const justhack = false; //true;\\n  const time_options = {\\n  hour: '2-digit',\\n  minute: '2-digit',\\n  second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    ns.print(formattedTime);\\n    if (justhack) {\\n      await ns.hack(target);\\n    } else if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      await ns.grow(target);\\n    } else {\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"netlink\"}}]]},\"serversOnNetwork\":[\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":66,\"minDifficulty\":22,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":401,\"serverGrowth\":75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[717,5],\"dataMap\":{},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1690.4100000002475,\"ramUsage\":2.4,\"server\":\"netlink\",\"scriptKey\":\"work.js*[717,5]\",\"title\":\"work.js 717 5\",\"threads\":26,\"temporary\":false}}]}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":true,\"ip\":\"43.6.2.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"neo-net\",\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":42.850000000000016,\"minDifficulty\":15,\"moneyAvailable\":73030634,\"moneyMax\":1825765850,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":292,\"serverGrowth\":51,\"runningScripts\":[]}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":true,\"ip\":\"6.9.4.8\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  //const data = ns.args[0]\\n  //TODO pass all the main data? might be slow?\\n  const hack_level = ns.args[0];\\n  const ports_open = ns.args[1];\\n\\n  // Gerenate server data, don't hard code\\n  // or use copy pasta fix thisGPT lol\\n  // as you can see below tho, it works.\\n  // scan-analyze 10\\n  // copy the data and ask for it in the right form, sort in python\\n  // server_data.sort(key=lambda x: (x[2], x[1]), reverse=True)\\n  const server_data = [['solaris', 912, 5],\\n  ['defcomm', 903, 5],\\n  ['taiyang-digital', 888, 5],\\n  ['aerocorp', 887, 5],\\n  ['icarus', 885, 5],\\n  ['infocomm', 876, 5],\\n  ['galactic-cyber', 869, 5],\\n  ['omnia', 853, 5],\\n  ['deltaone', 849, 5],\\n  ['syscore', 849, 5],\\n  ['zeus-med', 832, 5],\\n  ['zb-institute', 726, 5],\\n  ['darkweb', 1, 5],\\n  ['univ-energy', 840, 4],\\n  ['unitalife', 813, 4],\\n  ['nova-med', 786, 4],\\n  ['global-pharm', 777, 4],\\n  ['zb-def', 776, 4],\\n  ['snap-fitness', 711, 4],\\n  ['lexo-corp', 689, 4],\\n  ['alpha-ent', 600, 4],\\n  ['aevum-police', 441, 4],\\n  ['millenium-fitness', 525, 3],\\n  ['rho-construction', 510, 3],\\n  ['summit-uni', 466, 3],\\n  ['rothman-uni', 430, 3],\\n  ['catalyst', 409, 3],\\n  ['netlink', 401, 3],\\n  ['I.I.I.I', 340, 3],\\n  ['computek', 320, 3],\\n  ['johnson-ortho', 292, 2],\\n  ['the-hub', 280, 2],\\n  ['crush-fitness', 246, 2],\\n  ['avmnite-02h', 212, 2],\\n  ['omega-net', 205, 2],\\n  ['silver-helix', 150, 2],\\n  ['phantasy', 100, 2],\\n  ['iron-gym', 100, 1],\\n  ['max-hardware', 80, 1],\\n  ['zer0', 75, 1],\\n  ['CSEC', 53, 1],\\n  ['neo-net', 50, 1],\\n  ['harakiri-sushi', 40, 0],\\n  ['hong-fang-tea', 30, 0],\\n  ['nectar-net', 20, 0],\\n  ['joesguns', 10, 0],\\n  ['sigma-cosmetics', 5, 0],\\n  ['n00dles', 1, 0],\\n  ['foodnstuff', 1, 0]]\\n\\n  function select_target(hackLevel, portsOpen, data) {\\n    let highestValue = -1; // Init with a low value\\n    let target = null;\\n    ns.tprint(data.length)\\n\\n    for (let i = 0; i < data.length; i++) {\\n      let serverHackLevel = data[i][1];\\n      let serverPortsOpen = data[i][2];\\n      console.log(serverHackLevel, hackLevel, serverPortsOpen, portsOpen)\\n\\n      if (serverHackLevel <= hackLevel && serverPortsOpen <= portsOpen) {\\n        // use a better formula here this just avoids hacking home and dark-net\\n        let value = serverHackLevel * serverPortsOpen;\\n        console.log(value)\\n\\n        if (value > highestValue) {\\n          highestValue = value;\\n          target = data[i][0];\\n        }\\n      }\\n    }\\n    ns.tprint(target);\\n\\n    return target;\\n  }\\n\\n  let target = select_target(hack_level, ports_open, server_data);\\n\\n  console.log(\\\"work.js\\\", \\\"target: \\\" + target, ns.args)\\n\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n  const justhack = false; //true;\\n  const time_options = {\\n  hour: '2-digit',\\n  minute: '2-digit',\\n  second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    ns.print(formattedTime);\\n    if (justhack) {\\n      await ns.hack(target);\\n    } else if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      await ns.grow(target);\\n    } else {\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"n00dles\"}}]]},\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1.596,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":3000,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[717,5],\"dataMap\":{},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1690.4100000002475,\"ramUsage\":2.4,\"server\":\"n00dles\",\"scriptKey\":\"work.js*[717,5]\",\"title\":\"work.js 717 5\",\"threads\":1,\"temporary\":false}}]}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":true,\"ip\":\"18.0.3.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  //const data = ns.args[0]\\n  //TODO pass all the main data? might be slow?\\n  const hack_level = ns.args[0];\\n  const ports_open = ns.args[1];\\n\\n  // Gerenate server data, don't hard code\\n  // or use copy pasta fix thisGPT lol\\n  // as you can see below tho, it works.\\n  // scan-analyze 10\\n  // copy the data and ask for it in the right form, sort in python\\n  // server_data.sort(key=lambda x: (x[2], x[1]), reverse=True)\\n  const server_data = [['solaris', 912, 5],\\n  ['defcomm', 903, 5],\\n  ['taiyang-digital', 888, 5],\\n  ['aerocorp', 887, 5],\\n  ['icarus', 885, 5],\\n  ['infocomm', 876, 5],\\n  ['galactic-cyber', 869, 5],\\n  ['omnia', 853, 5],\\n  ['deltaone', 849, 5],\\n  ['syscore', 849, 5],\\n  ['zeus-med', 832, 5],\\n  ['zb-institute', 726, 5],\\n  ['darkweb', 1, 5],\\n  ['univ-energy', 840, 4],\\n  ['unitalife', 813, 4],\\n  ['nova-med', 786, 4],\\n  ['global-pharm', 777, 4],\\n  ['zb-def', 776, 4],\\n  ['snap-fitness', 711, 4],\\n  ['lexo-corp', 689, 4],\\n  ['alpha-ent', 600, 4],\\n  ['aevum-police', 441, 4],\\n  ['millenium-fitness', 525, 3],\\n  ['rho-construction', 510, 3],\\n  ['summit-uni', 466, 3],\\n  ['rothman-uni', 430, 3],\\n  ['catalyst', 409, 3],\\n  ['netlink', 401, 3],\\n  ['I.I.I.I', 340, 3],\\n  ['computek', 320, 3],\\n  ['johnson-ortho', 292, 2],\\n  ['the-hub', 280, 2],\\n  ['crush-fitness', 246, 2],\\n  ['avmnite-02h', 212, 2],\\n  ['omega-net', 205, 2],\\n  ['silver-helix', 150, 2],\\n  ['phantasy', 100, 2],\\n  ['iron-gym', 100, 1],\\n  ['max-hardware', 80, 1],\\n  ['zer0', 75, 1],\\n  ['CSEC', 53, 1],\\n  ['neo-net', 50, 1],\\n  ['harakiri-sushi', 40, 0],\\n  ['hong-fang-tea', 30, 0],\\n  ['nectar-net', 20, 0],\\n  ['joesguns', 10, 0],\\n  ['sigma-cosmetics', 5, 0],\\n  ['n00dles', 1, 0],\\n  ['foodnstuff', 1, 0]]\\n\\n  function select_target(hackLevel, portsOpen, data) {\\n    let highestValue = -1; // Init with a low value\\n    let target = null;\\n    ns.tprint(data.length)\\n\\n    for (let i = 0; i < data.length; i++) {\\n      let serverHackLevel = data[i][1];\\n      let serverPortsOpen = data[i][2];\\n      console.log(serverHackLevel, hackLevel, serverPortsOpen, portsOpen)\\n\\n      if (serverHackLevel <= hackLevel && serverPortsOpen <= portsOpen) {\\n        // use a better formula here this just avoids hacking home and dark-net\\n        let value = serverHackLevel * serverPortsOpen;\\n        console.log(value)\\n\\n        if (value > highestValue) {\\n          highestValue = value;\\n          target = data[i][0];\\n        }\\n      }\\n    }\\n    ns.tprint(target);\\n\\n    return target;\\n  }\\n\\n  let target = select_target(hack_level, ports_open, server_data);\\n\\n  console.log(\\\"work.js\\\", \\\"target: \\\" + target, ns.args)\\n\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n  const justhack = false; //true;\\n  const time_options = {\\n  hour: '2-digit',\\n  minute: '2-digit',\\n  second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    ns.print(formattedTime);\\n    if (justhack) {\\n      await ns.hack(target);\\n    } else if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      await ns.grow(target);\\n    } else {\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"foodnstuff\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":10,\"hackDifficulty\":10,\"minDifficulty\":3,\"moneyAvailable\":2000000,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[717,5],\"dataMap\":{},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1690.4100000002475,\"ramUsage\":2.4,\"server\":\"foodnstuff\",\"scriptKey\":\"work.js*[717,5]\",\"title\":\"work.js 717 5\",\"threads\":6,\"temporary\":false}}]}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":true,\"ip\":\"52.4.7.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  //const data = ns.args[0]\\n  //TODO pass all the main data? might be slow?\\n  const hack_level = ns.args[0];\\n  const ports_open = ns.args[1];\\n\\n  // Gerenate server data, don't hard code\\n  // or use copy pasta fix thisGPT lol\\n  // as you can see below tho, it works.\\n  // scan-analyze 10\\n  // copy the data and ask for it in the right form, sort in python\\n  // server_data.sort(key=lambda x: (x[2], x[1]), reverse=True)\\n  const server_data = [['solaris', 912, 5],\\n  ['defcomm', 903, 5],\\n  ['taiyang-digital', 888, 5],\\n  ['aerocorp', 887, 5],\\n  ['icarus', 885, 5],\\n  ['infocomm', 876, 5],\\n  ['galactic-cyber', 869, 5],\\n  ['omnia', 853, 5],\\n  ['deltaone', 849, 5],\\n  ['syscore', 849, 5],\\n  ['zeus-med', 832, 5],\\n  ['zb-institute', 726, 5],\\n  ['darkweb', 1, 5],\\n  ['univ-energy', 840, 4],\\n  ['unitalife', 813, 4],\\n  ['nova-med', 786, 4],\\n  ['global-pharm', 777, 4],\\n  ['zb-def', 776, 4],\\n  ['snap-fitness', 711, 4],\\n  ['lexo-corp', 689, 4],\\n  ['alpha-ent', 600, 4],\\n  ['aevum-police', 441, 4],\\n  ['millenium-fitness', 525, 3],\\n  ['rho-construction', 510, 3],\\n  ['summit-uni', 466, 3],\\n  ['rothman-uni', 430, 3],\\n  ['catalyst', 409, 3],\\n  ['netlink', 401, 3],\\n  ['I.I.I.I', 340, 3],\\n  ['computek', 320, 3],\\n  ['johnson-ortho', 292, 2],\\n  ['the-hub', 280, 2],\\n  ['crush-fitness', 246, 2],\\n  ['avmnite-02h', 212, 2],\\n  ['omega-net', 205, 2],\\n  ['silver-helix', 150, 2],\\n  ['phantasy', 100, 2],\\n  ['iron-gym', 100, 1],\\n  ['max-hardware', 80, 1],\\n  ['zer0', 75, 1],\\n  ['CSEC', 53, 1],\\n  ['neo-net', 50, 1],\\n  ['harakiri-sushi', 40, 0],\\n  ['hong-fang-tea', 30, 0],\\n  ['nectar-net', 20, 0],\\n  ['joesguns', 10, 0],\\n  ['sigma-cosmetics', 5, 0],\\n  ['n00dles', 1, 0],\\n  ['foodnstuff', 1, 0]]\\n\\n  function select_target(hackLevel, portsOpen, data) {\\n    let highestValue = -1; // Init with a low value\\n    let target = null;\\n    ns.tprint(data.length)\\n\\n    for (let i = 0; i < data.length; i++) {\\n      let serverHackLevel = data[i][1];\\n      let serverPortsOpen = data[i][2];\\n      console.log(serverHackLevel, hackLevel, serverPortsOpen, portsOpen)\\n\\n      if (serverHackLevel <= hackLevel && serverPortsOpen <= portsOpen) {\\n        // use a better formula here this just avoids hacking home and dark-net\\n        let value = serverHackLevel * serverPortsOpen;\\n        console.log(value)\\n\\n        if (value > highestValue) {\\n          highestValue = value;\\n          target = data[i][0];\\n        }\\n      }\\n    }\\n    ns.tprint(target);\\n\\n    return target;\\n  }\\n\\n  let target = select_target(hack_level, ports_open, server_data);\\n\\n  console.log(\\\"work.js\\\", \\\"target: \\\" + target, ns.args)\\n\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n  const justhack = false; //true;\\n  const time_options = {\\n  hour: '2-digit',\\n  minute: '2-digit',\\n  second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    ns.print(formattedTime);\\n    if (justhack) {\\n      await ns.hack(target);\\n    } else if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      await ns.grow(target);\\n    } else {\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"sigma-cosmetics\"}}]]},\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":10,\"hackDifficulty\":10,\"minDifficulty\":3,\"moneyAvailable\":2300000,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":5,\"serverGrowth\":10,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[717,5],\"dataMap\":{},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1690.4100000002475,\"ramUsage\":2.4,\"server\":\"sigma-cosmetics\",\"scriptKey\":\"work.js*[717,5]\",\"title\":\"work.js 717 5\",\"threads\":6,\"temporary\":false}}]}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-438441.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[24,33],[2,9],[21,25],[25,27],[14,20]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":true,\"ip\":\"47.7.6.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  //const data = ns.args[0]\\n  //TODO pass all the main data? might be slow?\\n  const hack_level = ns.args[0];\\n  const ports_open = ns.args[1];\\n\\n  // Gerenate server data, don't hard code\\n  // or use copy pasta fix thisGPT lol\\n  // as you can see below tho, it works.\\n  // scan-analyze 10\\n  // copy the data and ask for it in the right form, sort in python\\n  // server_data.sort(key=lambda x: (x[2], x[1]), reverse=True)\\n  const server_data = [['solaris', 912, 5],\\n  ['defcomm', 903, 5],\\n  ['taiyang-digital', 888, 5],\\n  ['aerocorp', 887, 5],\\n  ['icarus', 885, 5],\\n  ['infocomm', 876, 5],\\n  ['galactic-cyber', 869, 5],\\n  ['omnia', 853, 5],\\n  ['deltaone', 849, 5],\\n  ['syscore', 849, 5],\\n  ['zeus-med', 832, 5],\\n  ['zb-institute', 726, 5],\\n  ['darkweb', 1, 5],\\n  ['univ-energy', 840, 4],\\n  ['unitalife', 813, 4],\\n  ['nova-med', 786, 4],\\n  ['global-pharm', 777, 4],\\n  ['zb-def', 776, 4],\\n  ['snap-fitness', 711, 4],\\n  ['lexo-corp', 689, 4],\\n  ['alpha-ent', 600, 4],\\n  ['aevum-police', 441, 4],\\n  ['millenium-fitness', 525, 3],\\n  ['rho-construction', 510, 3],\\n  ['summit-uni', 466, 3],\\n  ['rothman-uni', 430, 3],\\n  ['catalyst', 409, 3],\\n  ['netlink', 401, 3],\\n  ['I.I.I.I', 340, 3],\\n  ['computek', 320, 3],\\n  ['johnson-ortho', 292, 2],\\n  ['the-hub', 280, 2],\\n  ['crush-fitness', 246, 2],\\n  ['avmnite-02h', 212, 2],\\n  ['omega-net', 205, 2],\\n  ['silver-helix', 150, 2],\\n  ['phantasy', 100, 2],\\n  ['iron-gym', 100, 1],\\n  ['max-hardware', 80, 1],\\n  ['zer0', 75, 1],\\n  ['CSEC', 53, 1],\\n  ['neo-net', 50, 1],\\n  ['harakiri-sushi', 40, 0],\\n  ['hong-fang-tea', 30, 0],\\n  ['nectar-net', 20, 0],\\n  ['joesguns', 10, 0],\\n  ['sigma-cosmetics', 5, 0],\\n  ['n00dles', 1, 0],\\n  ['foodnstuff', 1, 0]]\\n\\n  function select_target(hackLevel, portsOpen, data) {\\n    let highestValue = -1; // Init with a low value\\n    let target = null;\\n    ns.tprint(data.length)\\n\\n    for (let i = 0; i < data.length; i++) {\\n      let serverHackLevel = data[i][1];\\n      let serverPortsOpen = data[i][2];\\n      console.log(serverHackLevel, hackLevel, serverPortsOpen, portsOpen)\\n\\n      if (serverHackLevel <= hackLevel && serverPortsOpen <= portsOpen) {\\n        // use a better formula here this just avoids hacking home and dark-net\\n        let value = serverHackLevel * serverPortsOpen;\\n        console.log(value)\\n\\n        if (value > highestValue) {\\n          highestValue = value;\\n          target = data[i][0];\\n        }\\n      }\\n    }\\n    ns.tprint(target);\\n\\n    return target;\\n  }\\n\\n  let target = select_target(hack_level, ports_open, server_data);\\n\\n  console.log(\\\"work.js\\\", \\\"target: \\\" + target, ns.args)\\n\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n  const justhack = false; //true;\\n  const time_options = {\\n  hour: '2-digit',\\n  minute: '2-digit',\\n  second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    ns.print(formattedTime);\\n    if (justhack) {\\n      await ns.hack(target);\\n    } else if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      await ns.grow(target);\\n    } else {\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"joesguns\"}}]]},\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":2500000,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":10,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[717,5],\"dataMap\":{},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1690.4100000002475,\"ramUsage\":2.4,\"server\":\"joesguns\",\"scriptKey\":\"work.js*[717,5]\",\"title\":\"work.js 717 5\",\"threads\":6,\"temporary\":false}}]}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":true,\"ip\":\"80.0.7.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  //const data = ns.args[0]\\n  //TODO pass all the main data? might be slow?\\n  const hack_level = ns.args[0];\\n  const ports_open = ns.args[1];\\n\\n  // Gerenate server data, don't hard code\\n  // or use copy pasta fix thisGPT lol\\n  // as you can see below tho, it works.\\n  // scan-analyze 10\\n  // copy the data and ask for it in the right form, sort in python\\n  // server_data.sort(key=lambda x: (x[2], x[1]), reverse=True)\\n  const server_data = [['solaris', 912, 5],\\n  ['defcomm', 903, 5],\\n  ['taiyang-digital', 888, 5],\\n  ['aerocorp', 887, 5],\\n  ['icarus', 885, 5],\\n  ['infocomm', 876, 5],\\n  ['galactic-cyber', 869, 5],\\n  ['omnia', 853, 5],\\n  ['deltaone', 849, 5],\\n  ['syscore', 849, 5],\\n  ['zeus-med', 832, 5],\\n  ['zb-institute', 726, 5],\\n  ['darkweb', 1, 5],\\n  ['univ-energy', 840, 4],\\n  ['unitalife', 813, 4],\\n  ['nova-med', 786, 4],\\n  ['global-pharm', 777, 4],\\n  ['zb-def', 776, 4],\\n  ['snap-fitness', 711, 4],\\n  ['lexo-corp', 689, 4],\\n  ['alpha-ent', 600, 4],\\n  ['aevum-police', 441, 4],\\n  ['millenium-fitness', 525, 3],\\n  ['rho-construction', 510, 3],\\n  ['summit-uni', 466, 3],\\n  ['rothman-uni', 430, 3],\\n  ['catalyst', 409, 3],\\n  ['netlink', 401, 3],\\n  ['I.I.I.I', 340, 3],\\n  ['computek', 320, 3],\\n  ['johnson-ortho', 292, 2],\\n  ['the-hub', 280, 2],\\n  ['crush-fitness', 246, 2],\\n  ['avmnite-02h', 212, 2],\\n  ['omega-net', 205, 2],\\n  ['silver-helix', 150, 2],\\n  ['phantasy', 100, 2],\\n  ['iron-gym', 100, 1],\\n  ['max-hardware', 80, 1],\\n  ['zer0', 75, 1],\\n  ['CSEC', 53, 1],\\n  ['neo-net', 50, 1],\\n  ['harakiri-sushi', 40, 0],\\n  ['hong-fang-tea', 30, 0],\\n  ['nectar-net', 20, 0],\\n  ['joesguns', 10, 0],\\n  ['sigma-cosmetics', 5, 0],\\n  ['n00dles', 1, 0],\\n  ['foodnstuff', 1, 0]]\\n\\n  function select_target(hackLevel, portsOpen, data) {\\n    let highestValue = -1; // Init with a low value\\n    let target = null;\\n    ns.tprint(data.length)\\n\\n    for (let i = 0; i < data.length; i++) {\\n      let serverHackLevel = data[i][1];\\n      let serverPortsOpen = data[i][2];\\n      console.log(serverHackLevel, hackLevel, serverPortsOpen, portsOpen)\\n\\n      if (serverHackLevel <= hackLevel && serverPortsOpen <= portsOpen) {\\n        // use a better formula here this just avoids hacking home and dark-net\\n        let value = serverHackLevel * serverPortsOpen;\\n        console.log(value)\\n\\n        if (value > highestValue) {\\n          highestValue = value;\\n          target = data[i][0];\\n        }\\n      }\\n    }\\n    ns.tprint(target);\\n\\n    return target;\\n  }\\n\\n  let target = select_target(hack_level, ports_open, server_data);\\n\\n  console.log(\\\"work.js\\\", \\\"target: \\\" + target, ns.args)\\n\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n  const justhack = false; //true;\\n  const time_options = {\\n  hour: '2-digit',\\n  minute: '2-digit',\\n  second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    ns.print(formattedTime);\\n    if (justhack) {\\n      await ns.hack(target);\\n    } else if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      await ns.grow(target);\\n    } else {\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"zer0\"}}]]},\"serversOnNetwork\":[\"sigma-cosmetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":7500000,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":75,\"serverGrowth\":40,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[717,5],\"dataMap\":{},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1690.4100000002475,\"ramUsage\":2.4,\"server\":\"zer0\",\"scriptKey\":\"work.js*[717,5]\",\"title\":\"work.js 717 5\",\"threads\":13,\"temporary\":false}}]}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":true,\"ip\":\"30.4.7.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  //const data = ns.args[0]\\n  //TODO pass all the main data? might be slow?\\n  const hack_level = ns.args[0];\\n  const ports_open = ns.args[1];\\n\\n  // Gerenate server data, don't hard code\\n  // or use copy pasta fix thisGPT lol\\n  // as you can see below tho, it works.\\n  // scan-analyze 10\\n  // copy the data and ask for it in the right form, sort in python\\n  // server_data.sort(key=lambda x: (x[2], x[1]), reverse=True)\\n  const server_data = [['solaris', 912, 5],\\n  ['defcomm', 903, 5],\\n  ['taiyang-digital', 888, 5],\\n  ['aerocorp', 887, 5],\\n  ['icarus', 885, 5],\\n  ['infocomm', 876, 5],\\n  ['galactic-cyber', 869, 5],\\n  ['omnia', 853, 5],\\n  ['deltaone', 849, 5],\\n  ['syscore', 849, 5],\\n  ['zeus-med', 832, 5],\\n  ['zb-institute', 726, 5],\\n  ['darkweb', 1, 5],\\n  ['univ-energy', 840, 4],\\n  ['unitalife', 813, 4],\\n  ['nova-med', 786, 4],\\n  ['global-pharm', 777, 4],\\n  ['zb-def', 776, 4],\\n  ['snap-fitness', 711, 4],\\n  ['lexo-corp', 689, 4],\\n  ['alpha-ent', 600, 4],\\n  ['aevum-police', 441, 4],\\n  ['millenium-fitness', 525, 3],\\n  ['rho-construction', 510, 3],\\n  ['summit-uni', 466, 3],\\n  ['rothman-uni', 430, 3],\\n  ['catalyst', 409, 3],\\n  ['netlink', 401, 3],\\n  ['I.I.I.I', 340, 3],\\n  ['computek', 320, 3],\\n  ['johnson-ortho', 292, 2],\\n  ['the-hub', 280, 2],\\n  ['crush-fitness', 246, 2],\\n  ['avmnite-02h', 212, 2],\\n  ['omega-net', 205, 2],\\n  ['silver-helix', 150, 2],\\n  ['phantasy', 100, 2],\\n  ['iron-gym', 100, 1],\\n  ['max-hardware', 80, 1],\\n  ['zer0', 75, 1],\\n  ['CSEC', 53, 1],\\n  ['neo-net', 50, 1],\\n  ['harakiri-sushi', 40, 0],\\n  ['hong-fang-tea', 30, 0],\\n  ['nectar-net', 20, 0],\\n  ['joesguns', 10, 0],\\n  ['sigma-cosmetics', 5, 0],\\n  ['n00dles', 1, 0],\\n  ['foodnstuff', 1, 0]]\\n\\n  function select_target(hackLevel, portsOpen, data) {\\n    let highestValue = -1; // Init with a low value\\n    let target = null;\\n    ns.tprint(data.length)\\n\\n    for (let i = 0; i < data.length; i++) {\\n      let serverHackLevel = data[i][1];\\n      let serverPortsOpen = data[i][2];\\n      console.log(serverHackLevel, hackLevel, serverPortsOpen, portsOpen)\\n\\n      if (serverHackLevel <= hackLevel && serverPortsOpen <= portsOpen) {\\n        // use a better formula here this just avoids hacking home and dark-net\\n        let value = serverHackLevel * serverPortsOpen;\\n        console.log(value)\\n\\n        if (value > highestValue) {\\n          highestValue = value;\\n          target = data[i][0];\\n        }\\n      }\\n    }\\n    ns.tprint(target);\\n\\n    return target;\\n  }\\n\\n  let target = select_target(hack_level, ports_open, server_data);\\n\\n  console.log(\\\"work.js\\\", \\\"target: \\\" + target, ns.args)\\n\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n  const justhack = false; //true;\\n  const time_options = {\\n  hour: '2-digit',\\n  minute: '2-digit',\\n  second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    ns.print(formattedTime);\\n    if (justhack) {\\n      await ns.hack(target);\\n    } else if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      await ns.grow(target);\\n    } else {\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"nectar-net\"}}]]},\"serversOnNetwork\":[\"joesguns\",\"neo-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":2750000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":20,\"serverGrowth\":25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[717,5],\"dataMap\":{},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1690.4100000002475,\"ramUsage\":2.4,\"server\":\"nectar-net\",\"scriptKey\":\"work.js*[717,5]\",\"title\":\"work.js 717 5\",\"threads\":6,\"temporary\":false}}]}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":true,\"ip\":\"34.4.7.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  //const data = ns.args[0]\\n  //TODO pass all the main data? might be slow?\\n  const hack_level = ns.args[0];\\n  const ports_open = ns.args[1];\\n\\n  // Gerenate server data, don't hard code\\n  // or use copy pasta fix thisGPT lol\\n  // as you can see below tho, it works.\\n  // scan-analyze 10\\n  // copy the data and ask for it in the right form, sort in python\\n  // server_data.sort(key=lambda x: (x[2], x[1]), reverse=True)\\n  const server_data = [['solaris', 912, 5],\\n  ['defcomm', 903, 5],\\n  ['taiyang-digital', 888, 5],\\n  ['aerocorp', 887, 5],\\n  ['icarus', 885, 5],\\n  ['infocomm', 876, 5],\\n  ['galactic-cyber', 869, 5],\\n  ['omnia', 853, 5],\\n  ['deltaone', 849, 5],\\n  ['syscore', 849, 5],\\n  ['zeus-med', 832, 5],\\n  ['zb-institute', 726, 5],\\n  ['darkweb', 1, 5],\\n  ['univ-energy', 840, 4],\\n  ['unitalife', 813, 4],\\n  ['nova-med', 786, 4],\\n  ['global-pharm', 777, 4],\\n  ['zb-def', 776, 4],\\n  ['snap-fitness', 711, 4],\\n  ['lexo-corp', 689, 4],\\n  ['alpha-ent', 600, 4],\\n  ['aevum-police', 441, 4],\\n  ['millenium-fitness', 525, 3],\\n  ['rho-construction', 510, 3],\\n  ['summit-uni', 466, 3],\\n  ['rothman-uni', 430, 3],\\n  ['catalyst', 409, 3],\\n  ['netlink', 401, 3],\\n  ['I.I.I.I', 340, 3],\\n  ['computek', 320, 3],\\n  ['johnson-ortho', 292, 2],\\n  ['the-hub', 280, 2],\\n  ['crush-fitness', 246, 2],\\n  ['avmnite-02h', 212, 2],\\n  ['omega-net', 205, 2],\\n  ['silver-helix', 150, 2],\\n  ['phantasy', 100, 2],\\n  ['iron-gym', 100, 1],\\n  ['max-hardware', 80, 1],\\n  ['zer0', 75, 1],\\n  ['CSEC', 53, 1],\\n  ['neo-net', 50, 1],\\n  ['harakiri-sushi', 40, 0],\\n  ['hong-fang-tea', 30, 0],\\n  ['nectar-net', 20, 0],\\n  ['joesguns', 10, 0],\\n  ['sigma-cosmetics', 5, 0],\\n  ['n00dles', 1, 0],\\n  ['foodnstuff', 1, 0]]\\n\\n  function select_target(hackLevel, portsOpen, data) {\\n    let highestValue = -1; // Init with a low value\\n    let target = null;\\n    ns.tprint(data.length)\\n\\n    for (let i = 0; i < data.length; i++) {\\n      let serverHackLevel = data[i][1];\\n      let serverPortsOpen = data[i][2];\\n      console.log(serverHackLevel, hackLevel, serverPortsOpen, portsOpen)\\n\\n      if (serverHackLevel <= hackLevel && serverPortsOpen <= portsOpen) {\\n        // use a better formula here this just avoids hacking home and dark-net\\n        let value = serverHackLevel * serverPortsOpen;\\n        console.log(value)\\n\\n        if (value > highestValue) {\\n          highestValue = value;\\n          target = data[i][0];\\n        }\\n      }\\n    }\\n    ns.tprint(target);\\n\\n    return target;\\n  }\\n\\n  let target = select_target(hack_level, ports_open, server_data);\\n\\n  console.log(\\\"work.js\\\", \\\"target: \\\" + target, ns.args)\\n\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n  const justhack = false; //true;\\n  const time_options = {\\n  hour: '2-digit',\\n  minute: '2-digit',\\n  second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    ns.print(formattedTime);\\n    if (justhack) {\\n      await ns.hack(target);\\n    } else if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      await ns.grow(target);\\n    } else {\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"neo-net\"}}]]},\"serversOnNetwork\":[\"nectar-net\",\"johnson-ortho\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":5000000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":50,\"serverGrowth\":25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[717,5],\"dataMap\":{},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1690.4100000002475,\"ramUsage\":2.4,\"server\":\"neo-net\",\"scriptKey\":\"work.js*[717,5]\",\"title\":\"work.js 717 5\",\"threads\":13,\"temporary\":false}}]}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":true,\"ip\":\"71.7.2.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  //const data = ns.args[0]\\n  //TODO pass all the main data? might be slow?\\n  const hack_level = ns.args[0];\\n  const ports_open = ns.args[1];\\n\\n  // Gerenate server data, don't hard code\\n  // or use copy pasta fix thisGPT lol\\n  // as you can see below tho, it works.\\n  // scan-analyze 10\\n  // copy the data and ask for it in the right form, sort in python\\n  // server_data.sort(key=lambda x: (x[2], x[1]), reverse=True)\\n  const server_data = [['solaris', 912, 5],\\n  ['defcomm', 903, 5],\\n  ['taiyang-digital', 888, 5],\\n  ['aerocorp', 887, 5],\\n  ['icarus', 885, 5],\\n  ['infocomm', 876, 5],\\n  ['galactic-cyber', 869, 5],\\n  ['omnia', 853, 5],\\n  ['deltaone', 849, 5],\\n  ['syscore', 849, 5],\\n  ['zeus-med', 832, 5],\\n  ['zb-institute', 726, 5],\\n  ['darkweb', 1, 5],\\n  ['univ-energy', 840, 4],\\n  ['unitalife', 813, 4],\\n  ['nova-med', 786, 4],\\n  ['global-pharm', 777, 4],\\n  ['zb-def', 776, 4],\\n  ['snap-fitness', 711, 4],\\n  ['lexo-corp', 689, 4],\\n  ['alpha-ent', 600, 4],\\n  ['aevum-police', 441, 4],\\n  ['millenium-fitness', 525, 3],\\n  ['rho-construction', 510, 3],\\n  ['summit-uni', 466, 3],\\n  ['rothman-uni', 430, 3],\\n  ['catalyst', 409, 3],\\n  ['netlink', 401, 3],\\n  ['I.I.I.I', 340, 3],\\n  ['computek', 320, 3],\\n  ['johnson-ortho', 292, 2],\\n  ['the-hub', 280, 2],\\n  ['crush-fitness', 246, 2],\\n  ['avmnite-02h', 212, 2],\\n  ['omega-net', 205, 2],\\n  ['silver-helix', 150, 2],\\n  ['phantasy', 100, 2],\\n  ['iron-gym', 100, 1],\\n  ['max-hardware', 80, 1],\\n  ['zer0', 75, 1],\\n  ['CSEC', 53, 1],\\n  ['neo-net', 50, 1],\\n  ['harakiri-sushi', 40, 0],\\n  ['hong-fang-tea', 30, 0],\\n  ['nectar-net', 20, 0],\\n  ['joesguns', 10, 0],\\n  ['sigma-cosmetics', 5, 0],\\n  ['n00dles', 1, 0],\\n  ['foodnstuff', 1, 0]]\\n\\n  function select_target(hackLevel, portsOpen, data) {\\n    let highestValue = -1; // Init with a low value\\n    let target = null;\\n    ns.tprint(data.length)\\n\\n    for (let i = 0; i < data.length; i++) {\\n      let serverHackLevel = data[i][1];\\n      let serverPortsOpen = data[i][2];\\n      console.log(serverHackLevel, hackLevel, serverPortsOpen, portsOpen)\\n\\n      if (serverHackLevel <= hackLevel && serverPortsOpen <= portsOpen) {\\n        // use a better formula here this just avoids hacking home and dark-net\\n        let value = serverHackLevel * serverPortsOpen;\\n        console.log(value)\\n\\n        if (value > highestValue) {\\n          highestValue = value;\\n          target = data[i][0];\\n        }\\n      }\\n    }\\n    ns.tprint(target);\\n\\n    return target;\\n  }\\n\\n  let target = select_target(hack_level, ports_open, server_data);\\n\\n  console.log(\\\"work.js\\\", \\\"target: \\\" + target, ns.args)\\n\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n  const justhack = false; //true;\\n  const time_options = {\\n  hour: '2-digit',\\n  minute: '2-digit',\\n  second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    ns.print(formattedTime);\\n    if (justhack) {\\n      await ns.hack(target);\\n    } else if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      await ns.grow(target);\\n    } else {\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"silver-helix\"}}]]},\"serversOnNetwork\":[\"CSEC\",\"computek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":45000000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":150,\"serverGrowth\":30,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[717,5],\"dataMap\":{},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1690.4100000002475,\"ramUsage\":2.4,\"server\":\"silver-helix\",\"scriptKey\":\"work.js*[717,5]\",\"title\":\"work.js 717 5\",\"threads\":26,\"temporary\":false}}]}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":true,\"ip\":\"45.0.0.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  //const data = ns.args[0]\\n  //TODO pass all the main data? might be slow?\\n  const hack_level = ns.args[0];\\n  const ports_open = ns.args[1];\\n\\n  // Gerenate server data, don't hard code\\n  // or use copy pasta fix thisGPT lol\\n  // as you can see below tho, it works.\\n  // scan-analyze 10\\n  // copy the data and ask for it in the right form, sort in python\\n  // server_data.sort(key=lambda x: (x[2], x[1]), reverse=True)\\n  const server_data = [['solaris', 912, 5],\\n  ['defcomm', 903, 5],\\n  ['taiyang-digital', 888, 5],\\n  ['aerocorp', 887, 5],\\n  ['icarus', 885, 5],\\n  ['infocomm', 876, 5],\\n  ['galactic-cyber', 869, 5],\\n  ['omnia', 853, 5],\\n  ['deltaone', 849, 5],\\n  ['syscore', 849, 5],\\n  ['zeus-med', 832, 5],\\n  ['zb-institute', 726, 5],\\n  ['darkweb', 1, 5],\\n  ['univ-energy', 840, 4],\\n  ['unitalife', 813, 4],\\n  ['nova-med', 786, 4],\\n  ['global-pharm', 777, 4],\\n  ['zb-def', 776, 4],\\n  ['snap-fitness', 711, 4],\\n  ['lexo-corp', 689, 4],\\n  ['alpha-ent', 600, 4],\\n  ['aevum-police', 441, 4],\\n  ['millenium-fitness', 525, 3],\\n  ['rho-construction', 510, 3],\\n  ['summit-uni', 466, 3],\\n  ['rothman-uni', 430, 3],\\n  ['catalyst', 409, 3],\\n  ['netlink', 401, 3],\\n  ['I.I.I.I', 340, 3],\\n  ['computek', 320, 3],\\n  ['johnson-ortho', 292, 2],\\n  ['the-hub', 280, 2],\\n  ['crush-fitness', 246, 2],\\n  ['avmnite-02h', 212, 2],\\n  ['omega-net', 205, 2],\\n  ['silver-helix', 150, 2],\\n  ['phantasy', 100, 2],\\n  ['iron-gym', 100, 1],\\n  ['max-hardware', 80, 1],\\n  ['zer0', 75, 1],\\n  ['CSEC', 53, 1],\\n  ['neo-net', 50, 1],\\n  ['harakiri-sushi', 40, 0],\\n  ['hong-fang-tea', 30, 0],\\n  ['nectar-net', 20, 0],\\n  ['joesguns', 10, 0],\\n  ['sigma-cosmetics', 5, 0],\\n  ['n00dles', 1, 0],\\n  ['foodnstuff', 1, 0]]\\n\\n  function select_target(hackLevel, portsOpen, data) {\\n    let highestValue = -1; // Init with a low value\\n    let target = null;\\n    ns.tprint(data.length)\\n\\n    for (let i = 0; i < data.length; i++) {\\n      let serverHackLevel = data[i][1];\\n      let serverPortsOpen = data[i][2];\\n      console.log(serverHackLevel, hackLevel, serverPortsOpen, portsOpen)\\n\\n      if (serverHackLevel <= hackLevel && serverPortsOpen <= portsOpen) {\\n        // use a better formula here this just avoids hacking home and dark-net\\n        let value = serverHackLevel * serverPortsOpen;\\n        console.log(value)\\n\\n        if (value > highestValue) {\\n          highestValue = value;\\n          target = data[i][0];\\n        }\\n      }\\n    }\\n    ns.tprint(target);\\n\\n    return target;\\n  }\\n\\n  let target = select_target(hack_level, ports_open, server_data);\\n\\n  console.log(\\\"work.js\\\", \\\"target: \\\" + target, ns.args)\\n\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n  const justhack = false; //true;\\n  const time_options = {\\n  hour: '2-digit',\\n  minute: '2-digit',\\n  second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    ns.print(formattedTime);\\n    if (justhack) {\\n      await ns.hack(target);\\n    } else if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      await ns.grow(target);\\n    } else {\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"hong-fang-tea\"}}]]},\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":3000000,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":30,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[717,5],\"dataMap\":{},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1690.4100000002475,\"ramUsage\":2.4,\"server\":\"hong-fang-tea\",\"scriptKey\":\"work.js*[717,5]\",\"title\":\"work.js 717 5\",\"threads\":6,\"temporary\":false}}]}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":true,\"ip\":\"18.3.8.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  //const data = ns.args[0]\\n  //TODO pass all the main data? might be slow?\\n  const hack_level = ns.args[0];\\n  const ports_open = ns.args[1];\\n\\n  // Gerenate server data, don't hard code\\n  // or use copy pasta fix thisGPT lol\\n  // as you can see below tho, it works.\\n  // scan-analyze 10\\n  // copy the data and ask for it in the right form, sort in python\\n  // server_data.sort(key=lambda x: (x[2], x[1]), reverse=True)\\n  const server_data = [['solaris', 912, 5],\\n  ['defcomm', 903, 5],\\n  ['taiyang-digital', 888, 5],\\n  ['aerocorp', 887, 5],\\n  ['icarus', 885, 5],\\n  ['infocomm', 876, 5],\\n  ['galactic-cyber', 869, 5],\\n  ['omnia', 853, 5],\\n  ['deltaone', 849, 5],\\n  ['syscore', 849, 5],\\n  ['zeus-med', 832, 5],\\n  ['zb-institute', 726, 5],\\n  ['darkweb', 1, 5],\\n  ['univ-energy', 840, 4],\\n  ['unitalife', 813, 4],\\n  ['nova-med', 786, 4],\\n  ['global-pharm', 777, 4],\\n  ['zb-def', 776, 4],\\n  ['snap-fitness', 711, 4],\\n  ['lexo-corp', 689, 4],\\n  ['alpha-ent', 600, 4],\\n  ['aevum-police', 441, 4],\\n  ['millenium-fitness', 525, 3],\\n  ['rho-construction', 510, 3],\\n  ['summit-uni', 466, 3],\\n  ['rothman-uni', 430, 3],\\n  ['catalyst', 409, 3],\\n  ['netlink', 401, 3],\\n  ['I.I.I.I', 340, 3],\\n  ['computek', 320, 3],\\n  ['johnson-ortho', 292, 2],\\n  ['the-hub', 280, 2],\\n  ['crush-fitness', 246, 2],\\n  ['avmnite-02h', 212, 2],\\n  ['omega-net', 205, 2],\\n  ['silver-helix', 150, 2],\\n  ['phantasy', 100, 2],\\n  ['iron-gym', 100, 1],\\n  ['max-hardware', 80, 1],\\n  ['zer0', 75, 1],\\n  ['CSEC', 53, 1],\\n  ['neo-net', 50, 1],\\n  ['harakiri-sushi', 40, 0],\\n  ['hong-fang-tea', 30, 0],\\n  ['nectar-net', 20, 0],\\n  ['joesguns', 10, 0],\\n  ['sigma-cosmetics', 5, 0],\\n  ['n00dles', 1, 0],\\n  ['foodnstuff', 1, 0]]\\n\\n  function select_target(hackLevel, portsOpen, data) {\\n    let highestValue = -1; // Init with a low value\\n    let target = null;\\n    ns.tprint(data.length)\\n\\n    for (let i = 0; i < data.length; i++) {\\n      let serverHackLevel = data[i][1];\\n      let serverPortsOpen = data[i][2];\\n      console.log(serverHackLevel, hackLevel, serverPortsOpen, portsOpen)\\n\\n      if (serverHackLevel <= hackLevel && serverPortsOpen <= portsOpen) {\\n        // use a better formula here this just avoids hacking home and dark-net\\n        let value = serverHackLevel * serverPortsOpen;\\n        console.log(value)\\n\\n        if (value > highestValue) {\\n          highestValue = value;\\n          target = data[i][0];\\n        }\\n      }\\n    }\\n    ns.tprint(target);\\n\\n    return target;\\n  }\\n\\n  let target = select_target(hack_level, ports_open, server_data);\\n\\n  console.log(\\\"work.js\\\", \\\"target: \\\" + target, ns.args)\\n\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n  const justhack = false; //true;\\n  const time_options = {\\n  hour: '2-digit',\\n  minute: '2-digit',\\n  second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    ns.print(formattedTime);\\n    if (justhack) {\\n      await ns.hack(target);\\n    } else if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      await ns.grow(target);\\n    } else {\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"harakiri-sushi\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":4000000,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":40,\"serverGrowth\":40,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[717,5],\"dataMap\":{},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1690.4100000002475,\"ramUsage\":2.4,\"server\":\"harakiri-sushi\",\"scriptKey\":\"work.js*[717,5]\",\"title\":\"work.js 717 5\",\"threads\":6,\"temporary\":false}}]}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":true,\"ip\":\"90.9.9.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  //const data = ns.args[0]\\n  //TODO pass all the main data? might be slow?\\n  const hack_level = ns.args[0];\\n  const ports_open = ns.args[1];\\n\\n  // Gerenate server data, don't hard code\\n  // or use copy pasta fix thisGPT lol\\n  // as you can see below tho, it works.\\n  // scan-analyze 10\\n  // copy the data and ask for it in the right form, sort in python\\n  // server_data.sort(key=lambda x: (x[2], x[1]), reverse=True)\\n  const server_data = [['solaris', 912, 5],\\n  ['defcomm', 903, 5],\\n  ['taiyang-digital', 888, 5],\\n  ['aerocorp', 887, 5],\\n  ['icarus', 885, 5],\\n  ['infocomm', 876, 5],\\n  ['galactic-cyber', 869, 5],\\n  ['omnia', 853, 5],\\n  ['deltaone', 849, 5],\\n  ['syscore', 849, 5],\\n  ['zeus-med', 832, 5],\\n  ['zb-institute', 726, 5],\\n  ['darkweb', 1, 5],\\n  ['univ-energy', 840, 4],\\n  ['unitalife', 813, 4],\\n  ['nova-med', 786, 4],\\n  ['global-pharm', 777, 4],\\n  ['zb-def', 776, 4],\\n  ['snap-fitness', 711, 4],\\n  ['lexo-corp', 689, 4],\\n  ['alpha-ent', 600, 4],\\n  ['aevum-police', 441, 4],\\n  ['millenium-fitness', 525, 3],\\n  ['rho-construction', 510, 3],\\n  ['summit-uni', 466, 3],\\n  ['rothman-uni', 430, 3],\\n  ['catalyst', 409, 3],\\n  ['netlink', 401, 3],\\n  ['I.I.I.I', 340, 3],\\n  ['computek', 320, 3],\\n  ['johnson-ortho', 292, 2],\\n  ['the-hub', 280, 2],\\n  ['crush-fitness', 246, 2],\\n  ['avmnite-02h', 212, 2],\\n  ['omega-net', 205, 2],\\n  ['silver-helix', 150, 2],\\n  ['phantasy', 100, 2],\\n  ['iron-gym', 100, 1],\\n  ['max-hardware', 80, 1],\\n  ['zer0', 75, 1],\\n  ['CSEC', 53, 1],\\n  ['neo-net', 50, 1],\\n  ['harakiri-sushi', 40, 0],\\n  ['hong-fang-tea', 30, 0],\\n  ['nectar-net', 20, 0],\\n  ['joesguns', 10, 0],\\n  ['sigma-cosmetics', 5, 0],\\n  ['n00dles', 1, 0],\\n  ['foodnstuff', 1, 0]]\\n\\n  function select_target(hackLevel, portsOpen, data) {\\n    let highestValue = -1; // Init with a low value\\n    let target = null;\\n    ns.tprint(data.length)\\n\\n    for (let i = 0; i < data.length; i++) {\\n      let serverHackLevel = data[i][1];\\n      let serverPortsOpen = data[i][2];\\n      console.log(serverHackLevel, hackLevel, serverPortsOpen, portsOpen)\\n\\n      if (serverHackLevel <= hackLevel && serverPortsOpen <= portsOpen) {\\n        // use a better formula here this just avoids hacking home and dark-net\\n        let value = serverHackLevel * serverPortsOpen;\\n        console.log(value)\\n\\n        if (value > highestValue) {\\n          highestValue = value;\\n          target = data[i][0];\\n        }\\n      }\\n    }\\n    ns.tprint(target);\\n\\n    return target;\\n  }\\n\\n  let target = select_target(hack_level, ports_open, server_data);\\n\\n  console.log(\\\"work.js\\\", \\\"target: \\\" + target, ns.args)\\n\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n  const justhack = false; //true;\\n  const time_options = {\\n  hour: '2-digit',\\n  minute: '2-digit',\\n  second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    ns.print(formattedTime);\\n    if (justhack) {\\n      await ns.hack(target);\\n    } else if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      await ns.grow(target);\\n    } else {\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"phantasy\"}}]]},\"serversOnNetwork\":[\"CSEC\",\"the-hub\",\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":24000000,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":100,\"serverGrowth\":35,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[717,5],\"dataMap\":{},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1690.4100000002475,\"ramUsage\":2.4,\"server\":\"phantasy\",\"scriptKey\":\"work.js*[717,5]\",\"title\":\"work.js 717 5\",\"threads\":13,\"temporary\":false}}]}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":true,\"ip\":\"48.2.5.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  //const data = ns.args[0]\\n  //TODO pass all the main data? might be slow?\\n  const hack_level = ns.args[0];\\n  const ports_open = ns.args[1];\\n\\n  // Gerenate server data, don't hard code\\n  // or use copy pasta fix thisGPT lol\\n  // as you can see below tho, it works.\\n  // scan-analyze 10\\n  // copy the data and ask for it in the right form, sort in python\\n  // server_data.sort(key=lambda x: (x[2], x[1]), reverse=True)\\n  const server_data = [['solaris', 912, 5],\\n  ['defcomm', 903, 5],\\n  ['taiyang-digital', 888, 5],\\n  ['aerocorp', 887, 5],\\n  ['icarus', 885, 5],\\n  ['infocomm', 876, 5],\\n  ['galactic-cyber', 869, 5],\\n  ['omnia', 853, 5],\\n  ['deltaone', 849, 5],\\n  ['syscore', 849, 5],\\n  ['zeus-med', 832, 5],\\n  ['zb-institute', 726, 5],\\n  ['darkweb', 1, 5],\\n  ['univ-energy', 840, 4],\\n  ['unitalife', 813, 4],\\n  ['nova-med', 786, 4],\\n  ['global-pharm', 777, 4],\\n  ['zb-def', 776, 4],\\n  ['snap-fitness', 711, 4],\\n  ['lexo-corp', 689, 4],\\n  ['alpha-ent', 600, 4],\\n  ['aevum-police', 441, 4],\\n  ['millenium-fitness', 525, 3],\\n  ['rho-construction', 510, 3],\\n  ['summit-uni', 466, 3],\\n  ['rothman-uni', 430, 3],\\n  ['catalyst', 409, 3],\\n  ['netlink', 401, 3],\\n  ['I.I.I.I', 340, 3],\\n  ['computek', 320, 3],\\n  ['johnson-ortho', 292, 2],\\n  ['the-hub', 280, 2],\\n  ['crush-fitness', 246, 2],\\n  ['avmnite-02h', 212, 2],\\n  ['omega-net', 205, 2],\\n  ['silver-helix', 150, 2],\\n  ['phantasy', 100, 2],\\n  ['iron-gym', 100, 1],\\n  ['max-hardware', 80, 1],\\n  ['zer0', 75, 1],\\n  ['CSEC', 53, 1],\\n  ['neo-net', 50, 1],\\n  ['harakiri-sushi', 40, 0],\\n  ['hong-fang-tea', 30, 0],\\n  ['nectar-net', 20, 0],\\n  ['joesguns', 10, 0],\\n  ['sigma-cosmetics', 5, 0],\\n  ['n00dles', 1, 0],\\n  ['foodnstuff', 1, 0]]\\n\\n  function select_target(hackLevel, portsOpen, data) {\\n    let highestValue = -1; // Init with a low value\\n    let target = null;\\n    ns.tprint(data.length)\\n\\n    for (let i = 0; i < data.length; i++) {\\n      let serverHackLevel = data[i][1];\\n      let serverPortsOpen = data[i][2];\\n      console.log(serverHackLevel, hackLevel, serverPortsOpen, portsOpen)\\n\\n      if (serverHackLevel <= hackLevel && serverPortsOpen <= portsOpen) {\\n        // use a better formula here this just avoids hacking home and dark-net\\n        let value = serverHackLevel * serverPortsOpen;\\n        console.log(value)\\n\\n        if (value > highestValue) {\\n          highestValue = value;\\n          target = data[i][0];\\n        }\\n      }\\n    }\\n    ns.tprint(target);\\n\\n    return target;\\n  }\\n\\n  let target = select_target(hack_level, ports_open, server_data);\\n\\n  console.log(\\\"work.js\\\", \\\"target: \\\" + target, ns.args)\\n\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n  const justhack = false; //true;\\n  const time_options = {\\n  hour: '2-digit',\\n  minute: '2-digit',\\n  second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    ns.print(formattedTime);\\n    if (justhack) {\\n      await ns.hack(target);\\n    } else if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      await ns.grow(target);\\n    } else {\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"max-hardware\"}}]]},\"serversOnNetwork\":[\"n00dles\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":97713.027092042,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":80,\"serverGrowth\":30,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[717,5],\"dataMap\":{},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1690.4100000002475,\"ramUsage\":2.4,\"server\":\"max-hardware\",\"scriptKey\":\"work.js*[717,5]\",\"title\":\"work.js 717 5\",\"threads\":13,\"temporary\":false}}]}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":true,\"ip\":\"56.7.8.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  //const data = ns.args[0]\\n  //TODO pass all the main data? might be slow?\\n  const hack_level = ns.args[0];\\n  const ports_open = ns.args[1];\\n\\n  // Gerenate server data, don't hard code\\n  // or use copy pasta fix thisGPT lol\\n  // as you can see below tho, it works.\\n  // scan-analyze 10\\n  // copy the data and ask for it in the right form, sort in python\\n  // server_data.sort(key=lambda x: (x[2], x[1]), reverse=True)\\n  const server_data = [['solaris', 912, 5],\\n  ['defcomm', 903, 5],\\n  ['taiyang-digital', 888, 5],\\n  ['aerocorp', 887, 5],\\n  ['icarus', 885, 5],\\n  ['infocomm', 876, 5],\\n  ['galactic-cyber', 869, 5],\\n  ['omnia', 853, 5],\\n  ['deltaone', 849, 5],\\n  ['syscore', 849, 5],\\n  ['zeus-med', 832, 5],\\n  ['zb-institute', 726, 5],\\n  ['darkweb', 1, 5],\\n  ['univ-energy', 840, 4],\\n  ['unitalife', 813, 4],\\n  ['nova-med', 786, 4],\\n  ['global-pharm', 777, 4],\\n  ['zb-def', 776, 4],\\n  ['snap-fitness', 711, 4],\\n  ['lexo-corp', 689, 4],\\n  ['alpha-ent', 600, 4],\\n  ['aevum-police', 441, 4],\\n  ['millenium-fitness', 525, 3],\\n  ['rho-construction', 510, 3],\\n  ['summit-uni', 466, 3],\\n  ['rothman-uni', 430, 3],\\n  ['catalyst', 409, 3],\\n  ['netlink', 401, 3],\\n  ['I.I.I.I', 340, 3],\\n  ['computek', 320, 3],\\n  ['johnson-ortho', 292, 2],\\n  ['the-hub', 280, 2],\\n  ['crush-fitness', 246, 2],\\n  ['avmnite-02h', 212, 2],\\n  ['omega-net', 205, 2],\\n  ['silver-helix', 150, 2],\\n  ['phantasy', 100, 2],\\n  ['iron-gym', 100, 1],\\n  ['max-hardware', 80, 1],\\n  ['zer0', 75, 1],\\n  ['CSEC', 53, 1],\\n  ['neo-net', 50, 1],\\n  ['harakiri-sushi', 40, 0],\\n  ['hong-fang-tea', 30, 0],\\n  ['nectar-net', 20, 0],\\n  ['joesguns', 10, 0],\\n  ['sigma-cosmetics', 5, 0],\\n  ['n00dles', 1, 0],\\n  ['foodnstuff', 1, 0]]\\n\\n  function select_target(hackLevel, portsOpen, data) {\\n    let highestValue = -1; // Init with a low value\\n    let target = null;\\n    ns.tprint(data.length)\\n\\n    for (let i = 0; i < data.length; i++) {\\n      let serverHackLevel = data[i][1];\\n      let serverPortsOpen = data[i][2];\\n      console.log(serverHackLevel, hackLevel, serverPortsOpen, portsOpen)\\n\\n      if (serverHackLevel <= hackLevel && serverPortsOpen <= portsOpen) {\\n        // use a better formula here this just avoids hacking home and dark-net\\n        let value = serverHackLevel * serverPortsOpen;\\n        console.log(value)\\n\\n        if (value > highestValue) {\\n          highestValue = value;\\n          target = data[i][0];\\n        }\\n      }\\n    }\\n    ns.tprint(target);\\n\\n    return target;\\n  }\\n\\n  let target = select_target(hack_level, ports_open, server_data);\\n\\n  console.log(\\\"work.js\\\", \\\"target: \\\" + target, ns.args)\\n\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n  const justhack = false; //true;\\n  const time_options = {\\n  hour: '2-digit',\\n  minute: '2-digit',\\n  second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    ns.print(formattedTime);\\n    if (justhack) {\\n      await ns.hack(target);\\n    } else if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      await ns.grow(target);\\n    } else {\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"omega-net\"}}]]},\"serversOnNetwork\":[\"CSEC\",\"netlink\",\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":33,\"hackDifficulty\":11,\"minDifficulty\":11,\"moneyAvailable\":1641562204.6035132,\"moneyMax\":1699555100,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":205,\"serverGrowth\":32,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[717,5],\"dataMap\":{},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1690.4100000002475,\"ramUsage\":2.4,\"server\":\"omega-net\",\"scriptKey\":\"work.js*[717,5]\",\"title\":\"work.js 717 5\",\"threads\":13,\"temporary\":false}}]}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":true,\"ip\":\"57.4.7.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":38,\"hackDifficulty\":38,\"minDifficulty\":13,\"moneyAvailable\":41760069,\"moneyMax\":1044001725,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":246,\"serverGrowth\":28,\"runningScripts\":[]}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":true,\"ip\":\"19.7.9.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  //const data = ns.args[0]\\n  //TODO pass all the main data? might be slow?\\n  const hack_level = ns.args[0];\\n  const ports_open = ns.args[1];\\n\\n  // Gerenate server data, don't hard code\\n  // or use copy pasta fix thisGPT lol\\n  // as you can see below tho, it works.\\n  // scan-analyze 10\\n  // copy the data and ask for it in the right form, sort in python\\n  // server_data.sort(key=lambda x: (x[2], x[1]), reverse=True)\\n  const server_data = [['solaris', 912, 5],\\n  ['defcomm', 903, 5],\\n  ['taiyang-digital', 888, 5],\\n  ['aerocorp', 887, 5],\\n  ['icarus', 885, 5],\\n  ['infocomm', 876, 5],\\n  ['galactic-cyber', 869, 5],\\n  ['omnia', 853, 5],\\n  ['deltaone', 849, 5],\\n  ['syscore', 849, 5],\\n  ['zeus-med', 832, 5],\\n  ['zb-institute', 726, 5],\\n  ['darkweb', 1, 5],\\n  ['univ-energy', 840, 4],\\n  ['unitalife', 813, 4],\\n  ['nova-med', 786, 4],\\n  ['global-pharm', 777, 4],\\n  ['zb-def', 776, 4],\\n  ['snap-fitness', 711, 4],\\n  ['lexo-corp', 689, 4],\\n  ['alpha-ent', 600, 4],\\n  ['aevum-police', 441, 4],\\n  ['millenium-fitness', 525, 3],\\n  ['rho-construction', 510, 3],\\n  ['summit-uni', 466, 3],\\n  ['rothman-uni', 430, 3],\\n  ['catalyst', 409, 3],\\n  ['netlink', 401, 3],\\n  ['I.I.I.I', 340, 3],\\n  ['computek', 320, 3],\\n  ['johnson-ortho', 292, 2],\\n  ['the-hub', 280, 2],\\n  ['crush-fitness', 246, 2],\\n  ['avmnite-02h', 212, 2],\\n  ['omega-net', 205, 2],\\n  ['silver-helix', 150, 2],\\n  ['phantasy', 100, 2],\\n  ['iron-gym', 100, 1],\\n  ['max-hardware', 80, 1],\\n  ['zer0', 75, 1],\\n  ['CSEC', 53, 1],\\n  ['neo-net', 50, 1],\\n  ['harakiri-sushi', 40, 0],\\n  ['hong-fang-tea', 30, 0],\\n  ['nectar-net', 20, 0],\\n  ['joesguns', 10, 0],\\n  ['sigma-cosmetics', 5, 0],\\n  ['n00dles', 1, 0],\\n  ['foodnstuff', 1, 0]]\\n\\n  function select_target(hackLevel, portsOpen, data) {\\n    let highestValue = -1; // Init with a low value\\n    let target = null;\\n    ns.tprint(data.length)\\n\\n    for (let i = 0; i < data.length; i++) {\\n      let serverHackLevel = data[i][1];\\n      let serverPortsOpen = data[i][2];\\n      console.log(serverHackLevel, hackLevel, serverPortsOpen, portsOpen)\\n\\n      if (serverHackLevel <= hackLevel && serverPortsOpen <= portsOpen) {\\n        // use a better formula here this just avoids hacking home and dark-net\\n        let value = serverHackLevel * serverPortsOpen;\\n        console.log(value)\\n\\n        if (value > highestValue) {\\n          highestValue = value;\\n          target = data[i][0];\\n        }\\n      }\\n    }\\n    ns.tprint(target);\\n\\n    return target;\\n  }\\n\\n  let target = select_target(hack_level, ports_open, server_data);\\n\\n  console.log(\\\"work.js\\\", \\\"target: \\\" + target, ns.args)\\n\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n  const justhack = false; //true;\\n  const time_options = {\\n  hour: '2-digit',\\n  minute: '2-digit',\\n  second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    ns.print(formattedTime);\\n    if (justhack) {\\n      await ns.hack(target);\\n    } else if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      await ns.grow(target);\\n    } else {\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"iron-gym\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":20000000,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":100,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[717,5],\"dataMap\":{},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1690.4100000002475,\"ramUsage\":2.4,\"server\":\"iron-gym\",\"scriptKey\":\"work.js*[717,5]\",\"title\":\"work.js 717 5\",\"threads\":13,\"temporary\":false}}]}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":true,\"ip\":\"12.3.3.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  //const data = ns.args[0]\\n  //TODO pass all the main data? might be slow?\\n  const hack_level = ns.args[0];\\n  const ports_open = ns.args[1];\\n\\n  // Gerenate server data, don't hard code\\n  // or use copy pasta fix thisGPT lol\\n  // as you can see below tho, it works.\\n  // scan-analyze 10\\n  // copy the data and ask for it in the right form, sort in python\\n  // server_data.sort(key=lambda x: (x[2], x[1]), reverse=True)\\n  const server_data = [['solaris', 912, 5],\\n  ['defcomm', 903, 5],\\n  ['taiyang-digital', 888, 5],\\n  ['aerocorp', 887, 5],\\n  ['icarus', 885, 5],\\n  ['infocomm', 876, 5],\\n  ['galactic-cyber', 869, 5],\\n  ['omnia', 853, 5],\\n  ['deltaone', 849, 5],\\n  ['syscore', 849, 5],\\n  ['zeus-med', 832, 5],\\n  ['zb-institute', 726, 5],\\n  ['darkweb', 1, 5],\\n  ['univ-energy', 840, 4],\\n  ['unitalife', 813, 4],\\n  ['nova-med', 786, 4],\\n  ['global-pharm', 777, 4],\\n  ['zb-def', 776, 4],\\n  ['snap-fitness', 711, 4],\\n  ['lexo-corp', 689, 4],\\n  ['alpha-ent', 600, 4],\\n  ['aevum-police', 441, 4],\\n  ['millenium-fitness', 525, 3],\\n  ['rho-construction', 510, 3],\\n  ['summit-uni', 466, 3],\\n  ['rothman-uni', 430, 3],\\n  ['catalyst', 409, 3],\\n  ['netlink', 401, 3],\\n  ['I.I.I.I', 340, 3],\\n  ['computek', 320, 3],\\n  ['johnson-ortho', 292, 2],\\n  ['the-hub', 280, 2],\\n  ['crush-fitness', 246, 2],\\n  ['avmnite-02h', 212, 2],\\n  ['omega-net', 205, 2],\\n  ['silver-helix', 150, 2],\\n  ['phantasy', 100, 2],\\n  ['iron-gym', 100, 1],\\n  ['max-hardware', 80, 1],\\n  ['zer0', 75, 1],\\n  ['CSEC', 53, 1],\\n  ['neo-net', 50, 1],\\n  ['harakiri-sushi', 40, 0],\\n  ['hong-fang-tea', 30, 0],\\n  ['nectar-net', 20, 0],\\n  ['joesguns', 10, 0],\\n  ['sigma-cosmetics', 5, 0],\\n  ['n00dles', 1, 0],\\n  ['foodnstuff', 1, 0]]\\n\\n  function select_target(hackLevel, portsOpen, data) {\\n    let highestValue = -1; // Init with a low value\\n    let target = null;\\n    ns.tprint(data.length)\\n\\n    for (let i = 0; i < data.length; i++) {\\n      let serverHackLevel = data[i][1];\\n      let serverPortsOpen = data[i][2];\\n      console.log(serverHackLevel, hackLevel, serverPortsOpen, portsOpen)\\n\\n      if (serverHackLevel <= hackLevel && serverPortsOpen <= portsOpen) {\\n        // use a better formula here this just avoids hacking home and dark-net\\n        let value = serverHackLevel * serverPortsOpen;\\n        console.log(value)\\n\\n        if (value > highestValue) {\\n          highestValue = value;\\n          target = data[i][0];\\n        }\\n      }\\n    }\\n    ns.tprint(target);\\n\\n    return target;\\n  }\\n\\n  let target = select_target(hack_level, ports_open, server_data);\\n\\n  console.log(\\\"work.js\\\", \\\"target: \\\" + target, ns.args)\\n\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n  const justhack = false; //true;\\n  const time_options = {\\n  hour: '2-digit',\\n  minute: '2-digit',\\n  second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    ns.print(formattedTime);\\n    if (justhack) {\\n      await ns.hack(target);\\n    } else if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      await ns.grow(target);\\n    } else {\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"millenium-fitness\"}}]]},\"serversOnNetwork\":[\"zb-institute\",\"galactic-cyber\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":47,\"hackDifficulty\":47,\"minDifficulty\":16,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":525,\"serverGrowth\":37,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[717,5],\"dataMap\":{},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1690.4100000002475,\"ramUsage\":2.4,\"server\":\"millenium-fitness\",\"scriptKey\":\"work.js*[717,5]\",\"title\":\"work.js 717 5\",\"threads\":6,\"temporary\":false}}]}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":true,\"ip\":\"95.7.0.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  //const data = ns.args[0]\\n  //TODO pass all the main data? might be slow?\\n  const hack_level = ns.args[0];\\n  const ports_open = ns.args[1];\\n\\n  // Gerenate server data, don't hard code\\n  // or use copy pasta fix thisGPT lol\\n  // as you can see below tho, it works.\\n  // scan-analyze 10\\n  // copy the data and ask for it in the right form, sort in python\\n  // server_data.sort(key=lambda x: (x[2], x[1]), reverse=True)\\n  const server_data = [['solaris', 912, 5],\\n  ['defcomm', 903, 5],\\n  ['taiyang-digital', 888, 5],\\n  ['aerocorp', 887, 5],\\n  ['icarus', 885, 5],\\n  ['infocomm', 876, 5],\\n  ['galactic-cyber', 869, 5],\\n  ['omnia', 853, 5],\\n  ['deltaone', 849, 5],\\n  ['syscore', 849, 5],\\n  ['zeus-med', 832, 5],\\n  ['zb-institute', 726, 5],\\n  ['darkweb', 1, 5],\\n  ['univ-energy', 840, 4],\\n  ['unitalife', 813, 4],\\n  ['nova-med', 786, 4],\\n  ['global-pharm', 777, 4],\\n  ['zb-def', 776, 4],\\n  ['snap-fitness', 711, 4],\\n  ['lexo-corp', 689, 4],\\n  ['alpha-ent', 600, 4],\\n  ['aevum-police', 441, 4],\\n  ['millenium-fitness', 525, 3],\\n  ['rho-construction', 510, 3],\\n  ['summit-uni', 466, 3],\\n  ['rothman-uni', 430, 3],\\n  ['catalyst', 409, 3],\\n  ['netlink', 401, 3],\\n  ['I.I.I.I', 340, 3],\\n  ['computek', 320, 3],\\n  ['johnson-ortho', 292, 2],\\n  ['the-hub', 280, 2],\\n  ['crush-fitness', 246, 2],\\n  ['avmnite-02h', 212, 2],\\n  ['omega-net', 205, 2],\\n  ['silver-helix', 150, 2],\\n  ['phantasy', 100, 2],\\n  ['iron-gym', 100, 1],\\n  ['max-hardware', 80, 1],\\n  ['zer0', 75, 1],\\n  ['CSEC', 53, 1],\\n  ['neo-net', 50, 1],\\n  ['harakiri-sushi', 40, 0],\\n  ['hong-fang-tea', 30, 0],\\n  ['nectar-net', 20, 0],\\n  ['joesguns', 10, 0],\\n  ['sigma-cosmetics', 5, 0],\\n  ['n00dles', 1, 0],\\n  ['foodnstuff', 1, 0]]\\n\\n  function select_target(hackLevel, portsOpen, data) {\\n    let highestValue = -1; // Init with a low value\\n    let target = null;\\n    ns.tprint(data.length)\\n\\n    for (let i = 0; i < data.length; i++) {\\n      let serverHackLevel = data[i][1];\\n      let serverPortsOpen = data[i][2];\\n      console.log(serverHackLevel, hackLevel, serverPortsOpen, portsOpen)\\n\\n      if (serverHackLevel <= hackLevel && serverPortsOpen <= portsOpen) {\\n        // use a better formula here this just avoids hacking home and dark-net\\n        let value = serverHackLevel * serverPortsOpen;\\n        console.log(value)\\n\\n        if (value > highestValue) {\\n          highestValue = value;\\n          target = data[i][0];\\n        }\\n      }\\n    }\\n    ns.tprint(target);\\n\\n    return target;\\n  }\\n\\n  let target = select_target(hack_level, ports_open, server_data);\\n\\n  console.log(\\\"work.js\\\", \\\"target: \\\" + target, ns.args)\\n\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n  const justhack = false; //true;\\n  const time_options = {\\n  hour: '2-digit',\\n  minute: '2-digit',\\n  second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    ns.print(formattedTime);\\n    if (justhack) {\\n      await ns.hack(target);\\n    } else if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      await ns.grow(target);\\n    } else {\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"powerhouse-fitness\"}}]]},\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":57,\"minDifficulty\":19,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1060,\"serverGrowth\":52,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[717,5],\"dataMap\":{},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1690.4100000002475,\"ramUsage\":2.4,\"server\":\"powerhouse-fitness\",\"scriptKey\":\"work.js*[717,5]\",\"title\":\"work.js 717 5\",\"threads\":13,\"temporary\":false}}]}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"67.6.8.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"alpha-ent\",\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":52,\"hackDifficulty\":52,\"minDifficulty\":17,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":711,\"serverGrowth\":59,\"runningScripts\":[]}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"26.4.4.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  //const data = ns.args[0]\\n  //TODO pass all the main data? might be slow?\\n  const hack_level = ns.args[0];\\n  const ports_open = ns.args[1];\\n\\n  // Gerenate server data, don't hard code\\n  // or use copy pasta fix thisGPT lol\\n  // as you can see below tho, it works.\\n  // scan-analyze 10\\n  // copy the data and ask for it in the right form, sort in python\\n  // server_data.sort(key=lambda x: (x[2], x[1]), reverse=True)\\n  const server_data = [['solaris', 912, 5],\\n  ['defcomm', 903, 5],\\n  ['taiyang-digital', 888, 5],\\n  ['aerocorp', 887, 5],\\n  ['icarus', 885, 5],\\n  ['infocomm', 876, 5],\\n  ['galactic-cyber', 869, 5],\\n  ['omnia', 853, 5],\\n  ['deltaone', 849, 5],\\n  ['syscore', 849, 5],\\n  ['zeus-med', 832, 5],\\n  ['zb-institute', 726, 5],\\n  ['darkweb', 1, 5],\\n  ['univ-energy', 840, 4],\\n  ['unitalife', 813, 4],\\n  ['nova-med', 786, 4],\\n  ['global-pharm', 777, 4],\\n  ['zb-def', 776, 4],\\n  ['snap-fitness', 711, 4],\\n  ['lexo-corp', 689, 4],\\n  ['alpha-ent', 600, 4],\\n  ['aevum-police', 441, 4],\\n  ['millenium-fitness', 525, 3],\\n  ['rho-construction', 510, 3],\\n  ['summit-uni', 466, 3],\\n  ['rothman-uni', 430, 3],\\n  ['catalyst', 409, 3],\\n  ['netlink', 401, 3],\\n  ['I.I.I.I', 340, 3],\\n  ['computek', 320, 3],\\n  ['johnson-ortho', 292, 2],\\n  ['the-hub', 280, 2],\\n  ['crush-fitness', 246, 2],\\n  ['avmnite-02h', 212, 2],\\n  ['omega-net', 205, 2],\\n  ['silver-helix', 150, 2],\\n  ['phantasy', 100, 2],\\n  ['iron-gym', 100, 1],\\n  ['max-hardware', 80, 1],\\n  ['zer0', 75, 1],\\n  ['CSEC', 53, 1],\\n  ['neo-net', 50, 1],\\n  ['harakiri-sushi', 40, 0],\\n  ['hong-fang-tea', 30, 0],\\n  ['nectar-net', 20, 0],\\n  ['joesguns', 10, 0],\\n  ['sigma-cosmetics', 5, 0],\\n  ['n00dles', 1, 0],\\n  ['foodnstuff', 1, 0]]\\n\\n  function select_target(hackLevel, portsOpen, data) {\\n    let highestValue = -1; // Init with a low value\\n    let target = null;\\n    ns.tprint(data.length)\\n\\n    for (let i = 0; i < data.length; i++) {\\n      let serverHackLevel = data[i][1];\\n      let serverPortsOpen = data[i][2];\\n      console.log(serverHackLevel, hackLevel, serverPortsOpen, portsOpen)\\n\\n      if (serverHackLevel <= hackLevel && serverPortsOpen <= portsOpen) {\\n        // use a better formula here this just avoids hacking home and dark-net\\n        let value = serverHackLevel * serverPortsOpen;\\n        console.log(value)\\n\\n        if (value > highestValue) {\\n          highestValue = value;\\n          target = data[i][0];\\n        }\\n      }\\n    }\\n    ns.tprint(target);\\n\\n    return target;\\n  }\\n\\n  let target = select_target(hack_level, ports_open, server_data);\\n\\n  console.log(\\\"work.js\\\", \\\"target: \\\" + target, ns.args)\\n\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n  const justhack = false; //true;\\n  const time_options = {\\n  hour: '2-digit',\\n  minute: '2-digit',\\n  second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    ns.print(formattedTime);\\n    if (justhack) {\\n      await ns.hack(target);\\n    } else if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      await ns.grow(target);\\n    } else {\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"run4theh111z\"}}]]},\"serversOnNetwork\":[\"infocomm\",\"fulcrumtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":539,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[717,5],\"dataMap\":{},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1690.4100000002475,\"ramUsage\":2.4,\"server\":\"run4theh111z\",\"scriptKey\":\"work.js*[717,5]\",\"title\":\"work.js 717 5\",\"threads\":53,\"temporary\":false}}]}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":true,\"ip\":\"52.3.5.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  //const data = ns.args[0]\\n  //TODO pass all the main data? might be slow?\\n  const hack_level = ns.args[0];\\n  const ports_open = ns.args[1];\\n\\n  // Gerenate server data, don't hard code\\n  // or use copy pasta fix thisGPT lol\\n  // as you can see below tho, it works.\\n  // scan-analyze 10\\n  // copy the data and ask for it in the right form, sort in python\\n  // server_data.sort(key=lambda x: (x[2], x[1]), reverse=True)\\n  const server_data = [['solaris', 912, 5],\\n  ['defcomm', 903, 5],\\n  ['taiyang-digital', 888, 5],\\n  ['aerocorp', 887, 5],\\n  ['icarus', 885, 5],\\n  ['infocomm', 876, 5],\\n  ['galactic-cyber', 869, 5],\\n  ['omnia', 853, 5],\\n  ['deltaone', 849, 5],\\n  ['syscore', 849, 5],\\n  ['zeus-med', 832, 5],\\n  ['zb-institute', 726, 5],\\n  ['darkweb', 1, 5],\\n  ['univ-energy', 840, 4],\\n  ['unitalife', 813, 4],\\n  ['nova-med', 786, 4],\\n  ['global-pharm', 777, 4],\\n  ['zb-def', 776, 4],\\n  ['snap-fitness', 711, 4],\\n  ['lexo-corp', 689, 4],\\n  ['alpha-ent', 600, 4],\\n  ['aevum-police', 441, 4],\\n  ['millenium-fitness', 525, 3],\\n  ['rho-construction', 510, 3],\\n  ['summit-uni', 466, 3],\\n  ['rothman-uni', 430, 3],\\n  ['catalyst', 409, 3],\\n  ['netlink', 401, 3],\\n  ['I.I.I.I', 340, 3],\\n  ['computek', 320, 3],\\n  ['johnson-ortho', 292, 2],\\n  ['the-hub', 280, 2],\\n  ['crush-fitness', 246, 2],\\n  ['avmnite-02h', 212, 2],\\n  ['omega-net', 205, 2],\\n  ['silver-helix', 150, 2],\\n  ['phantasy', 100, 2],\\n  ['iron-gym', 100, 1],\\n  ['max-hardware', 80, 1],\\n  ['zer0', 75, 1],\\n  ['CSEC', 53, 1],\\n  ['neo-net', 50, 1],\\n  ['harakiri-sushi', 40, 0],\\n  ['hong-fang-tea', 30, 0],\\n  ['nectar-net', 20, 0],\\n  ['joesguns', 10, 0],\\n  ['sigma-cosmetics', 5, 0],\\n  ['n00dles', 1, 0],\\n  ['foodnstuff', 1, 0]]\\n\\n  function select_target(hackLevel, portsOpen, data) {\\n    let highestValue = -1; // Init with a low value\\n    let target = null;\\n    ns.tprint(data.length)\\n\\n    for (let i = 0; i < data.length; i++) {\\n      let serverHackLevel = data[i][1];\\n      let serverPortsOpen = data[i][2];\\n      console.log(serverHackLevel, hackLevel, serverPortsOpen, portsOpen)\\n\\n      if (serverHackLevel <= hackLevel && serverPortsOpen <= portsOpen) {\\n        // use a better formula here this just avoids hacking home and dark-net\\n        let value = serverHackLevel * serverPortsOpen;\\n        console.log(value)\\n\\n        if (value > highestValue) {\\n          highestValue = value;\\n          target = data[i][0];\\n        }\\n      }\\n    }\\n    ns.tprint(target);\\n\\n    return target;\\n  }\\n\\n  let target = select_target(hack_level, ports_open, server_data);\\n\\n  console.log(\\\"work.js\\\", \\\"target: \\\" + target, ns.args)\\n\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n  const justhack = false; //true;\\n  const time_options = {\\n  hour: '2-digit',\\n  minute: '2-digit',\\n  second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    ns.print(formattedTime);\\n    if (justhack) {\\n      await ns.hack(target);\\n    } else if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      await ns.grow(target);\\n    } else {\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"I.I.I.I\"}}]]},\"serversOnNetwork\":[\"the-hub\",\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":340,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[717,5],\"dataMap\":{},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1690.4100000002475,\"ramUsage\":2.4,\"server\":\"I.I.I.I\",\"scriptKey\":\"work.js*[717,5]\",\"title\":\"work.js 717 5\",\"threads\":26,\"temporary\":false}}]}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-853664.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"53z5qcJEcJEcrQ5oSjTxt88888888jR6jR6jR6jR6jR6jR6jKjR677ys77ysycNyPcNyQx6nvCccccN6nvCcccccccc\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":true,\"ip\":\"97.3.1.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  //const data = ns.args[0]\\n  //TODO pass all the main data? might be slow?\\n  const hack_level = ns.args[0];\\n  const ports_open = ns.args[1];\\n\\n  // Gerenate server data, don't hard code\\n  // or use copy pasta fix thisGPT lol\\n  // as you can see below tho, it works.\\n  // scan-analyze 10\\n  // copy the data and ask for it in the right form, sort in python\\n  // server_data.sort(key=lambda x: (x[2], x[1]), reverse=True)\\n  const server_data = [['solaris', 912, 5],\\n  ['defcomm', 903, 5],\\n  ['taiyang-digital', 888, 5],\\n  ['aerocorp', 887, 5],\\n  ['icarus', 885, 5],\\n  ['infocomm', 876, 5],\\n  ['galactic-cyber', 869, 5],\\n  ['omnia', 853, 5],\\n  ['deltaone', 849, 5],\\n  ['syscore', 849, 5],\\n  ['zeus-med', 832, 5],\\n  ['zb-institute', 726, 5],\\n  ['darkweb', 1, 5],\\n  ['univ-energy', 840, 4],\\n  ['unitalife', 813, 4],\\n  ['nova-med', 786, 4],\\n  ['global-pharm', 777, 4],\\n  ['zb-def', 776, 4],\\n  ['snap-fitness', 711, 4],\\n  ['lexo-corp', 689, 4],\\n  ['alpha-ent', 600, 4],\\n  ['aevum-police', 441, 4],\\n  ['millenium-fitness', 525, 3],\\n  ['rho-construction', 510, 3],\\n  ['summit-uni', 466, 3],\\n  ['rothman-uni', 430, 3],\\n  ['catalyst', 409, 3],\\n  ['netlink', 401, 3],\\n  ['I.I.I.I', 340, 3],\\n  ['computek', 320, 3],\\n  ['johnson-ortho', 292, 2],\\n  ['the-hub', 280, 2],\\n  ['crush-fitness', 246, 2],\\n  ['avmnite-02h', 212, 2],\\n  ['omega-net', 205, 2],\\n  ['silver-helix', 150, 2],\\n  ['phantasy', 100, 2],\\n  ['iron-gym', 100, 1],\\n  ['max-hardware', 80, 1],\\n  ['zer0', 75, 1],\\n  ['CSEC', 53, 1],\\n  ['neo-net', 50, 1],\\n  ['harakiri-sushi', 40, 0],\\n  ['hong-fang-tea', 30, 0],\\n  ['nectar-net', 20, 0],\\n  ['joesguns', 10, 0],\\n  ['sigma-cosmetics', 5, 0],\\n  ['n00dles', 1, 0],\\n  ['foodnstuff', 1, 0]]\\n\\n  function select_target(hackLevel, portsOpen, data) {\\n    let highestValue = -1; // Init with a low value\\n    let target = null;\\n    ns.tprint(data.length)\\n\\n    for (let i = 0; i < data.length; i++) {\\n      let serverHackLevel = data[i][1];\\n      let serverPortsOpen = data[i][2];\\n      console.log(serverHackLevel, hackLevel, serverPortsOpen, portsOpen)\\n\\n      if (serverHackLevel <= hackLevel && serverPortsOpen <= portsOpen) {\\n        // use a better formula here this just avoids hacking home and dark-net\\n        let value = serverHackLevel * serverPortsOpen;\\n        console.log(value)\\n\\n        if (value > highestValue) {\\n          highestValue = value;\\n          target = data[i][0];\\n        }\\n      }\\n    }\\n    ns.tprint(target);\\n\\n    return target;\\n  }\\n\\n  let target = select_target(hack_level, ports_open, server_data);\\n\\n  console.log(\\\"work.js\\\", \\\"target: \\\" + target, ns.args)\\n\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n  const justhack = false; //true;\\n  const time_options = {\\n  hour: '2-digit',\\n  minute: '2-digit',\\n  second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    ns.print(formattedTime);\\n    if (justhack) {\\n      await ns.hack(target);\\n    } else if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      await ns.grow(target);\\n    } else {\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"avmnite-02h\"}}]]},\"serversOnNetwork\":[\"phantasy\",\"rothman-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1.002,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":212,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[717,5],\"dataMap\":{},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1690.4100000002475,\"ramUsage\":2.4,\"server\":\"avmnite-02h\",\"scriptKey\":\"work.js*[717,5]\",\"title\":\"work.js 717 5\",\"threads\":13,\"temporary\":false}}]}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-88102.cct\",\"type\":\"Total Ways to Sum\",\"data\":43,\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"48.2.4.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  //const data = ns.args[0]\\n  //TODO pass all the main data? might be slow?\\n  const hack_level = ns.args[0];\\n  const ports_open = ns.args[1];\\n\\n  // Gerenate server data, don't hard code\\n  // or use copy pasta fix thisGPT lol\\n  // as you can see below tho, it works.\\n  // scan-analyze 10\\n  // copy the data and ask for it in the right form, sort in python\\n  // server_data.sort(key=lambda x: (x[2], x[1]), reverse=True)\\n  const server_data = [['solaris', 912, 5],\\n  ['defcomm', 903, 5],\\n  ['taiyang-digital', 888, 5],\\n  ['aerocorp', 887, 5],\\n  ['icarus', 885, 5],\\n  ['infocomm', 876, 5],\\n  ['galactic-cyber', 869, 5],\\n  ['omnia', 853, 5],\\n  ['deltaone', 849, 5],\\n  ['syscore', 849, 5],\\n  ['zeus-med', 832, 5],\\n  ['zb-institute', 726, 5],\\n  ['darkweb', 1, 5],\\n  ['univ-energy', 840, 4],\\n  ['unitalife', 813, 4],\\n  ['nova-med', 786, 4],\\n  ['global-pharm', 777, 4],\\n  ['zb-def', 776, 4],\\n  ['snap-fitness', 711, 4],\\n  ['lexo-corp', 689, 4],\\n  ['alpha-ent', 600, 4],\\n  ['aevum-police', 441, 4],\\n  ['millenium-fitness', 525, 3],\\n  ['rho-construction', 510, 3],\\n  ['summit-uni', 466, 3],\\n  ['rothman-uni', 430, 3],\\n  ['catalyst', 409, 3],\\n  ['netlink', 401, 3],\\n  ['I.I.I.I', 340, 3],\\n  ['computek', 320, 3],\\n  ['johnson-ortho', 292, 2],\\n  ['the-hub', 280, 2],\\n  ['crush-fitness', 246, 2],\\n  ['avmnite-02h', 212, 2],\\n  ['omega-net', 205, 2],\\n  ['silver-helix', 150, 2],\\n  ['phantasy', 100, 2],\\n  ['iron-gym', 100, 1],\\n  ['max-hardware', 80, 1],\\n  ['zer0', 75, 1],\\n  ['CSEC', 53, 1],\\n  ['neo-net', 50, 1],\\n  ['harakiri-sushi', 40, 0],\\n  ['hong-fang-tea', 30, 0],\\n  ['nectar-net', 20, 0],\\n  ['joesguns', 10, 0],\\n  ['sigma-cosmetics', 5, 0],\\n  ['n00dles', 1, 0],\\n  ['foodnstuff', 1, 0]]\\n\\n  function select_target(hackLevel, portsOpen, data) {\\n    let highestValue = -1; // Init with a low value\\n    let target = null;\\n    ns.tprint(data.length)\\n\\n    for (let i = 0; i < data.length; i++) {\\n      let serverHackLevel = data[i][1];\\n      let serverPortsOpen = data[i][2];\\n      console.log(serverHackLevel, hackLevel, serverPortsOpen, portsOpen)\\n\\n      if (serverHackLevel <= hackLevel && serverPortsOpen <= portsOpen) {\\n        // use a better formula here this just avoids hacking home and dark-net\\n        let value = serverHackLevel * serverPortsOpen;\\n        console.log(value)\\n\\n        if (value > highestValue) {\\n          highestValue = value;\\n          target = data[i][0];\\n        }\\n      }\\n    }\\n    ns.tprint(target);\\n\\n    return target;\\n  }\\n\\n  let target = select_target(hack_level, ports_open, server_data);\\n\\n  console.log(\\\"work.js\\\", \\\"target: \\\" + target, ns.args)\\n\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n  const justhack = false; //true;\\n  const time_options = {\\n  hour: '2-digit',\\n  minute: '2-digit',\\n  second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    ns.print(formattedTime);\\n    if (justhack) {\\n      await ns.hack(target);\\n    } else if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      await ns.grow(target);\\n    } else {\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\".\"}}]]},\"serversOnNetwork\":[\"stormtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":543,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[717,5],\"dataMap\":{},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1690.4100000002475,\"ramUsage\":2.4,\"server\":\".\",\"scriptKey\":\"work.js*[717,5]\",\"title\":\"work.js 717 5\",\"threads\":6,\"temporary\":false}}]}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":true,\"ip\":\"69.5.7.1\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  //const data = ns.args[0]\\n  //TODO pass all the main data? might be slow?\\n  const hack_level = ns.args[0];\\n  const ports_open = ns.args[1];\\n\\n  // Gerenate server data, don't hard code\\n  // or use copy pasta fix thisGPT lol\\n  // as you can see below tho, it works.\\n  // scan-analyze 10\\n  // copy the data and ask for it in the right form, sort in python\\n  // server_data.sort(key=lambda x: (x[2], x[1]), reverse=True)\\n  const server_data = [['solaris', 912, 5],\\n  ['defcomm', 903, 5],\\n  ['taiyang-digital', 888, 5],\\n  ['aerocorp', 887, 5],\\n  ['icarus', 885, 5],\\n  ['infocomm', 876, 5],\\n  ['galactic-cyber', 869, 5],\\n  ['omnia', 853, 5],\\n  ['deltaone', 849, 5],\\n  ['syscore', 849, 5],\\n  ['zeus-med', 832, 5],\\n  ['zb-institute', 726, 5],\\n  ['darkweb', 1, 5],\\n  ['univ-energy', 840, 4],\\n  ['unitalife', 813, 4],\\n  ['nova-med', 786, 4],\\n  ['global-pharm', 777, 4],\\n  ['zb-def', 776, 4],\\n  ['snap-fitness', 711, 4],\\n  ['lexo-corp', 689, 4],\\n  ['alpha-ent', 600, 4],\\n  ['aevum-police', 441, 4],\\n  ['millenium-fitness', 525, 3],\\n  ['rho-construction', 510, 3],\\n  ['summit-uni', 466, 3],\\n  ['rothman-uni', 430, 3],\\n  ['catalyst', 409, 3],\\n  ['netlink', 401, 3],\\n  ['I.I.I.I', 340, 3],\\n  ['computek', 320, 3],\\n  ['johnson-ortho', 292, 2],\\n  ['the-hub', 280, 2],\\n  ['crush-fitness', 246, 2],\\n  ['avmnite-02h', 212, 2],\\n  ['omega-net', 205, 2],\\n  ['silver-helix', 150, 2],\\n  ['phantasy', 100, 2],\\n  ['iron-gym', 100, 1],\\n  ['max-hardware', 80, 1],\\n  ['zer0', 75, 1],\\n  ['CSEC', 53, 1],\\n  ['neo-net', 50, 1],\\n  ['harakiri-sushi', 40, 0],\\n  ['hong-fang-tea', 30, 0],\\n  ['nectar-net', 20, 0],\\n  ['joesguns', 10, 0],\\n  ['sigma-cosmetics', 5, 0],\\n  ['n00dles', 1, 0],\\n  ['foodnstuff', 1, 0]]\\n\\n  function select_target(hackLevel, portsOpen, data) {\\n    let highestValue = -1; // Init with a low value\\n    let target = null;\\n    ns.tprint(data.length)\\n\\n    for (let i = 0; i < data.length; i++) {\\n      let serverHackLevel = data[i][1];\\n      let serverPortsOpen = data[i][2];\\n      console.log(serverHackLevel, hackLevel, serverPortsOpen, portsOpen)\\n\\n      if (serverHackLevel <= hackLevel && serverPortsOpen <= portsOpen) {\\n        // use a better formula here this just avoids hacking home and dark-net\\n        let value = serverHackLevel * serverPortsOpen;\\n        console.log(value)\\n\\n        if (value > highestValue) {\\n          highestValue = value;\\n          target = data[i][0];\\n        }\\n      }\\n    }\\n    ns.tprint(target);\\n\\n    return target;\\n  }\\n\\n  let target = select_target(hack_level, ports_open, server_data);\\n\\n  console.log(\\\"work.js\\\", \\\"target: \\\" + target, ns.args)\\n\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n  const justhack = false; //true;\\n  const time_options = {\\n  hour: '2-digit',\\n  minute: '2-digit',\\n  second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    ns.print(formattedTime);\\n    if (justhack) {\\n      await ns.hack(target);\\n    } else if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      await ns.grow(target);\\n    } else {\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"CSEC\"}}]]},\"serversOnNetwork\":[\"hong-fang-tea\",\"silver-helix\",\"phantasy\",\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":53,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[717,5],\"dataMap\":{},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1690.4100000002475,\"ramUsage\":2.4,\"server\":\"CSEC\",\"scriptKey\":\"work.js*[717,5]\",\"title\":\"work.js 717 5\",\"threads\":3,\"temporary\":false}}]}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"The-Cave\",\"httpPortOpen\":true,\"ip\":\"56.8.1.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":925,\"serverGrowth\":1,\"runningScripts\":[]}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"42.6.6.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":1,\"runningScripts\":[]}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"98.2.7.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"darkweb\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"qst0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"qst0\",\"httpPortOpen\":true,\"ip\":\"16.3.3.8\",\"isConnectedTo\":false,\"maxRam\":262144,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  //const data = ns.args[0]\\n  //TODO pass all the main data? might be slow?\\n  const hack_level = ns.args[0];\\n  const ports_open = ns.args[1];\\n\\n  // Gerenate server data, don't hard code\\n  // or use copy pasta fix thisGPT lol\\n  // as you can see below tho, it works.\\n  // scan-analyze 10\\n  // copy the data and ask for it in the right form, sort in python\\n  // server_data.sort(key=lambda x: (x[2], x[1]), reverse=True)\\n  const server_data = [['solaris', 912, 5],\\n  ['defcomm', 903, 5],\\n  ['taiyang-digital', 888, 5],\\n  ['aerocorp', 887, 5],\\n  ['icarus', 885, 5],\\n  ['infocomm', 876, 5],\\n  ['galactic-cyber', 869, 5],\\n  ['omnia', 853, 5],\\n  ['deltaone', 849, 5],\\n  ['syscore', 849, 5],\\n  ['zeus-med', 832, 5],\\n  ['zb-institute', 726, 5],\\n  ['darkweb', 1, 5],\\n  ['univ-energy', 840, 4],\\n  ['unitalife', 813, 4],\\n  ['nova-med', 786, 4],\\n  ['global-pharm', 777, 4],\\n  ['zb-def', 776, 4],\\n  ['snap-fitness', 711, 4],\\n  ['lexo-corp', 689, 4],\\n  ['alpha-ent', 600, 4],\\n  ['aevum-police', 441, 4],\\n  ['millenium-fitness', 525, 3],\\n  ['rho-construction', 510, 3],\\n  ['summit-uni', 466, 3],\\n  ['rothman-uni', 430, 3],\\n  ['catalyst', 409, 3],\\n  ['netlink', 401, 3],\\n  ['I.I.I.I', 340, 3],\\n  ['computek', 320, 3],\\n  ['johnson-ortho', 292, 2],\\n  ['the-hub', 280, 2],\\n  ['crush-fitness', 246, 2],\\n  ['avmnite-02h', 212, 2],\\n  ['omega-net', 205, 2],\\n  ['silver-helix', 150, 2],\\n  ['phantasy', 100, 2],\\n  ['iron-gym', 100, 1],\\n  ['max-hardware', 80, 1],\\n  ['zer0', 75, 1],\\n  ['CSEC', 53, 1],\\n  ['neo-net', 50, 1],\\n  ['harakiri-sushi', 40, 0],\\n  ['hong-fang-tea', 30, 0],\\n  ['nectar-net', 20, 0],\\n  ['joesguns', 10, 0],\\n  ['sigma-cosmetics', 5, 0],\\n  ['n00dles', 1, 0],\\n  ['foodnstuff', 1, 0]]\\n\\n  function select_target(hackLevel, portsOpen, data) {\\n    let highestValue = -1; // Init with a low value\\n    let target = null;\\n    ns.tprint(data.length)\\n\\n    for (let i = 0; i < data.length; i++) {\\n      let serverHackLevel = data[i][1];\\n      let serverPortsOpen = data[i][2];\\n      console.log(serverHackLevel, hackLevel, serverPortsOpen, portsOpen)\\n\\n      if (serverHackLevel <= hackLevel && serverPortsOpen <= portsOpen) {\\n        // use a better formula here this just avoids hacking home and dark-net\\n        let value = serverHackLevel * serverPortsOpen;\\n        console.log(value)\\n\\n        if (value > highestValue) {\\n          highestValue = value;\\n          target = data[i][0];\\n        }\\n      }\\n    }\\n    ns.tprint(target);\\n\\n    return target;\\n  }\\n\\n  let target = select_target(hack_level, ports_open, server_data);\\n\\n  console.log(\\\"work.js\\\", \\\"target: \\\" + target, ns.args)\\n\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n  const justhack = false; //true;\\n  const time_options = {\\n  hour: '2-digit',\\n  minute: '2-digit',\\n  second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    ns.print(formattedTime);\\n    if (justhack) {\\n      await ns.hack(target);\\n    } else if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      await ns.grow(target);\\n    } else {\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"qst0\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[717,5],\"dataMap\":{},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1690.4100000002475,\"ramUsage\":2.4,\"server\":\"qst0\",\"scriptKey\":\"work.js*[717,5]\",\"title\":\"work.js 717 5\",\"threads\":109226,\"temporary\":false}}]}},\"qst1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"qst1\",\"httpPortOpen\":true,\"ip\":\"14.2.6.0\",\"isConnectedTo\":false,\"maxRam\":262144,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  //const data = ns.args[0]\\n  //TODO pass all the main data? might be slow?\\n  const hack_level = ns.args[0];\\n  const ports_open = ns.args[1];\\n\\n  // Gerenate server data, don't hard code\\n  // or use copy pasta fix thisGPT lol\\n  // as you can see below tho, it works.\\n  // scan-analyze 10\\n  // copy the data and ask for it in the right form, sort in python\\n  // server_data.sort(key=lambda x: (x[2], x[1]), reverse=True)\\n  const server_data = [['solaris', 912, 5],\\n  ['defcomm', 903, 5],\\n  ['taiyang-digital', 888, 5],\\n  ['aerocorp', 887, 5],\\n  ['icarus', 885, 5],\\n  ['infocomm', 876, 5],\\n  ['galactic-cyber', 869, 5],\\n  ['omnia', 853, 5],\\n  ['deltaone', 849, 5],\\n  ['syscore', 849, 5],\\n  ['zeus-med', 832, 5],\\n  ['zb-institute', 726, 5],\\n  ['darkweb', 1, 5],\\n  ['univ-energy', 840, 4],\\n  ['unitalife', 813, 4],\\n  ['nova-med', 786, 4],\\n  ['global-pharm', 777, 4],\\n  ['zb-def', 776, 4],\\n  ['snap-fitness', 711, 4],\\n  ['lexo-corp', 689, 4],\\n  ['alpha-ent', 600, 4],\\n  ['aevum-police', 441, 4],\\n  ['millenium-fitness', 525, 3],\\n  ['rho-construction', 510, 3],\\n  ['summit-uni', 466, 3],\\n  ['rothman-uni', 430, 3],\\n  ['catalyst', 409, 3],\\n  ['netlink', 401, 3],\\n  ['I.I.I.I', 340, 3],\\n  ['computek', 320, 3],\\n  ['johnson-ortho', 292, 2],\\n  ['the-hub', 280, 2],\\n  ['crush-fitness', 246, 2],\\n  ['avmnite-02h', 212, 2],\\n  ['omega-net', 205, 2],\\n  ['silver-helix', 150, 2],\\n  ['phantasy', 100, 2],\\n  ['iron-gym', 100, 1],\\n  ['max-hardware', 80, 1],\\n  ['zer0', 75, 1],\\n  ['CSEC', 53, 1],\\n  ['neo-net', 50, 1],\\n  ['harakiri-sushi', 40, 0],\\n  ['hong-fang-tea', 30, 0],\\n  ['nectar-net', 20, 0],\\n  ['joesguns', 10, 0],\\n  ['sigma-cosmetics', 5, 0],\\n  ['n00dles', 1, 0],\\n  ['foodnstuff', 1, 0]]\\n\\n  function select_target(hackLevel, portsOpen, data) {\\n    let highestValue = -1; // Init with a low value\\n    let target = null;\\n    ns.tprint(data.length)\\n\\n    for (let i = 0; i < data.length; i++) {\\n      let serverHackLevel = data[i][1];\\n      let serverPortsOpen = data[i][2];\\n      console.log(serverHackLevel, hackLevel, serverPortsOpen, portsOpen)\\n\\n      if (serverHackLevel <= hackLevel && serverPortsOpen <= portsOpen) {\\n        // use a better formula here this just avoids hacking home and dark-net\\n        let value = serverHackLevel * serverPortsOpen;\\n        console.log(value)\\n\\n        if (value > highestValue) {\\n          highestValue = value;\\n          target = data[i][0];\\n        }\\n      }\\n    }\\n    ns.tprint(target);\\n\\n    return target;\\n  }\\n\\n  let target = select_target(hack_level, ports_open, server_data);\\n\\n  console.log(\\\"work.js\\\", \\\"target: \\\" + target, ns.args)\\n\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n  const justhack = false; //true;\\n  const time_options = {\\n  hour: '2-digit',\\n  minute: '2-digit',\\n  second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    ns.print(formattedTime);\\n    if (justhack) {\\n      await ns.hack(target);\\n    } else if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      await ns.grow(target);\\n    } else {\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"qst1\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[717,5],\"dataMap\":{},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1690.4100000002475,\"ramUsage\":2.4,\"server\":\"qst1\",\"scriptKey\":\"work.js*[717,5]\",\"title\":\"work.js 717 5\",\"threads\":109226,\"temporary\":false}}]}},\"qst2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"qst2\",\"httpPortOpen\":true,\"ip\":\"58.6.2.2\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  //const data = ns.args[0]\\n  //TODO pass all the main data? might be slow?\\n  const hack_level = ns.args[0];\\n  const ports_open = ns.args[1];\\n\\n  // Gerenate server data, don't hard code\\n  // or use copy pasta fix thisGPT lol\\n  // as you can see below tho, it works.\\n  // scan-analyze 10\\n  // copy the data and ask for it in the right form, sort in python\\n  // server_data.sort(key=lambda x: (x[2], x[1]), reverse=True)\\n  const server_data = [['solaris', 912, 5],\\n  ['defcomm', 903, 5],\\n  ['taiyang-digital', 888, 5],\\n  ['aerocorp', 887, 5],\\n  ['icarus', 885, 5],\\n  ['infocomm', 876, 5],\\n  ['galactic-cyber', 869, 5],\\n  ['omnia', 853, 5],\\n  ['deltaone', 849, 5],\\n  ['syscore', 849, 5],\\n  ['zeus-med', 832, 5],\\n  ['zb-institute', 726, 5],\\n  ['darkweb', 1, 5],\\n  ['univ-energy', 840, 4],\\n  ['unitalife', 813, 4],\\n  ['nova-med', 786, 4],\\n  ['global-pharm', 777, 4],\\n  ['zb-def', 776, 4],\\n  ['snap-fitness', 711, 4],\\n  ['lexo-corp', 689, 4],\\n  ['alpha-ent', 600, 4],\\n  ['aevum-police', 441, 4],\\n  ['millenium-fitness', 525, 3],\\n  ['rho-construction', 510, 3],\\n  ['summit-uni', 466, 3],\\n  ['rothman-uni', 430, 3],\\n  ['catalyst', 409, 3],\\n  ['netlink', 401, 3],\\n  ['I.I.I.I', 340, 3],\\n  ['computek', 320, 3],\\n  ['johnson-ortho', 292, 2],\\n  ['the-hub', 280, 2],\\n  ['crush-fitness', 246, 2],\\n  ['avmnite-02h', 212, 2],\\n  ['omega-net', 205, 2],\\n  ['silver-helix', 150, 2],\\n  ['phantasy', 100, 2],\\n  ['iron-gym', 100, 1],\\n  ['max-hardware', 80, 1],\\n  ['zer0', 75, 1],\\n  ['CSEC', 53, 1],\\n  ['neo-net', 50, 1],\\n  ['harakiri-sushi', 40, 0],\\n  ['hong-fang-tea', 30, 0],\\n  ['nectar-net', 20, 0],\\n  ['joesguns', 10, 0],\\n  ['sigma-cosmetics', 5, 0],\\n  ['n00dles', 1, 0],\\n  ['foodnstuff', 1, 0]]\\n\\n  function select_target(hackLevel, portsOpen, data) {\\n    let highestValue = -1; // Init with a low value\\n    let target = null;\\n    ns.tprint(data.length)\\n\\n    for (let i = 0; i < data.length; i++) {\\n      let serverHackLevel = data[i][1];\\n      let serverPortsOpen = data[i][2];\\n      console.log(serverHackLevel, hackLevel, serverPortsOpen, portsOpen)\\n\\n      if (serverHackLevel <= hackLevel && serverPortsOpen <= portsOpen) {\\n        // use a better formula here this just avoids hacking home and dark-net\\n        let value = serverHackLevel * serverPortsOpen;\\n        console.log(value)\\n\\n        if (value > highestValue) {\\n          highestValue = value;\\n          target = data[i][0];\\n        }\\n      }\\n    }\\n    ns.tprint(target);\\n\\n    return target;\\n  }\\n\\n  let target = select_target(hack_level, ports_open, server_data);\\n\\n  console.log(\\\"work.js\\\", \\\"target: \\\" + target, ns.args)\\n\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n  const justhack = false; //true;\\n  const time_options = {\\n  hour: '2-digit',\\n  minute: '2-digit',\\n  second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    ns.print(formattedTime);\\n    if (justhack) {\\n      await ns.hack(target);\\n    } else if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      await ns.grow(target);\\n    } else {\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"qst2\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[717,5],\"dataMap\":{},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1690.4100000002475,\"ramUsage\":2.4,\"server\":\"qst2\",\"scriptKey\":\"work.js*[717,5]\",\"title\":\"work.js 717 5\",\"threads\":27306,\"temporary\":false}}]}},\"qst3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"qst3\",\"httpPortOpen\":true,\"ip\":\"87.7.0.6\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  //const data = ns.args[0]\\n  //TODO pass all the main data? might be slow?\\n  const hack_level = ns.args[0];\\n  const ports_open = ns.args[1];\\n\\n  // Gerenate server data, don't hard code\\n  // or use copy pasta fix thisGPT lol\\n  // as you can see below tho, it works.\\n  // scan-analyze 10\\n  // copy the data and ask for it in the right form, sort in python\\n  // server_data.sort(key=lambda x: (x[2], x[1]), reverse=True)\\n  const server_data = [['solaris', 912, 5],\\n  ['defcomm', 903, 5],\\n  ['taiyang-digital', 888, 5],\\n  ['aerocorp', 887, 5],\\n  ['icarus', 885, 5],\\n  ['infocomm', 876, 5],\\n  ['galactic-cyber', 869, 5],\\n  ['omnia', 853, 5],\\n  ['deltaone', 849, 5],\\n  ['syscore', 849, 5],\\n  ['zeus-med', 832, 5],\\n  ['zb-institute', 726, 5],\\n  ['darkweb', 1, 5],\\n  ['univ-energy', 840, 4],\\n  ['unitalife', 813, 4],\\n  ['nova-med', 786, 4],\\n  ['global-pharm', 777, 4],\\n  ['zb-def', 776, 4],\\n  ['snap-fitness', 711, 4],\\n  ['lexo-corp', 689, 4],\\n  ['alpha-ent', 600, 4],\\n  ['aevum-police', 441, 4],\\n  ['millenium-fitness', 525, 3],\\n  ['rho-construction', 510, 3],\\n  ['summit-uni', 466, 3],\\n  ['rothman-uni', 430, 3],\\n  ['catalyst', 409, 3],\\n  ['netlink', 401, 3],\\n  ['I.I.I.I', 340, 3],\\n  ['computek', 320, 3],\\n  ['johnson-ortho', 292, 2],\\n  ['the-hub', 280, 2],\\n  ['crush-fitness', 246, 2],\\n  ['avmnite-02h', 212, 2],\\n  ['omega-net', 205, 2],\\n  ['silver-helix', 150, 2],\\n  ['phantasy', 100, 2],\\n  ['iron-gym', 100, 1],\\n  ['max-hardware', 80, 1],\\n  ['zer0', 75, 1],\\n  ['CSEC', 53, 1],\\n  ['neo-net', 50, 1],\\n  ['harakiri-sushi', 40, 0],\\n  ['hong-fang-tea', 30, 0],\\n  ['nectar-net', 20, 0],\\n  ['joesguns', 10, 0],\\n  ['sigma-cosmetics', 5, 0],\\n  ['n00dles', 1, 0],\\n  ['foodnstuff', 1, 0]]\\n\\n  function select_target(hackLevel, portsOpen, data) {\\n    let highestValue = -1; // Init with a low value\\n    let target = null;\\n    ns.tprint(data.length)\\n\\n    for (let i = 0; i < data.length; i++) {\\n      let serverHackLevel = data[i][1];\\n      let serverPortsOpen = data[i][2];\\n      console.log(serverHackLevel, hackLevel, serverPortsOpen, portsOpen)\\n\\n      if (serverHackLevel <= hackLevel && serverPortsOpen <= portsOpen) {\\n        // use a better formula here this just avoids hacking home and dark-net\\n        let value = serverHackLevel * serverPortsOpen;\\n        console.log(value)\\n\\n        if (value > highestValue) {\\n          highestValue = value;\\n          target = data[i][0];\\n        }\\n      }\\n    }\\n    ns.tprint(target);\\n\\n    return target;\\n  }\\n\\n  let target = select_target(hack_level, ports_open, server_data);\\n\\n  console.log(\\\"work.js\\\", \\\"target: \\\" + target, ns.args)\\n\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n  const justhack = false; //true;\\n  const time_options = {\\n  hour: '2-digit',\\n  minute: '2-digit',\\n  second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    ns.print(formattedTime);\\n    if (justhack) {\\n      await ns.hack(target);\\n    } else if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      await ns.grow(target);\\n    } else {\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"qst3\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[717,5],\"dataMap\":{},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1690.4100000002475,\"ramUsage\":2.4,\"server\":\"qst3\",\"scriptKey\":\"work.js*[717,5]\",\"title\":\"work.js 717 5\",\"threads\":27306,\"temporary\":false}}]}},\"qst4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"qst4\",\"httpPortOpen\":true,\"ip\":\"24.5.8.5\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  //const data = ns.args[0]\\n  //TODO pass all the main data? might be slow?\\n  const hack_level = ns.args[0];\\n  const ports_open = ns.args[1];\\n\\n  // Gerenate server data, don't hard code\\n  // or use copy pasta fix thisGPT lol\\n  // as you can see below tho, it works.\\n  // scan-analyze 10\\n  // copy the data and ask for it in the right form, sort in python\\n  // server_data.sort(key=lambda x: (x[2], x[1]), reverse=True)\\n  const server_data = [['solaris', 912, 5],\\n  ['defcomm', 903, 5],\\n  ['taiyang-digital', 888, 5],\\n  ['aerocorp', 887, 5],\\n  ['icarus', 885, 5],\\n  ['infocomm', 876, 5],\\n  ['galactic-cyber', 869, 5],\\n  ['omnia', 853, 5],\\n  ['deltaone', 849, 5],\\n  ['syscore', 849, 5],\\n  ['zeus-med', 832, 5],\\n  ['zb-institute', 726, 5],\\n  ['darkweb', 1, 5],\\n  ['univ-energy', 840, 4],\\n  ['unitalife', 813, 4],\\n  ['nova-med', 786, 4],\\n  ['global-pharm', 777, 4],\\n  ['zb-def', 776, 4],\\n  ['snap-fitness', 711, 4],\\n  ['lexo-corp', 689, 4],\\n  ['alpha-ent', 600, 4],\\n  ['aevum-police', 441, 4],\\n  ['millenium-fitness', 525, 3],\\n  ['rho-construction', 510, 3],\\n  ['summit-uni', 466, 3],\\n  ['rothman-uni', 430, 3],\\n  ['catalyst', 409, 3],\\n  ['netlink', 401, 3],\\n  ['I.I.I.I', 340, 3],\\n  ['computek', 320, 3],\\n  ['johnson-ortho', 292, 2],\\n  ['the-hub', 280, 2],\\n  ['crush-fitness', 246, 2],\\n  ['avmnite-02h', 212, 2],\\n  ['omega-net', 205, 2],\\n  ['silver-helix', 150, 2],\\n  ['phantasy', 100, 2],\\n  ['iron-gym', 100, 1],\\n  ['max-hardware', 80, 1],\\n  ['zer0', 75, 1],\\n  ['CSEC', 53, 1],\\n  ['neo-net', 50, 1],\\n  ['harakiri-sushi', 40, 0],\\n  ['hong-fang-tea', 30, 0],\\n  ['nectar-net', 20, 0],\\n  ['joesguns', 10, 0],\\n  ['sigma-cosmetics', 5, 0],\\n  ['n00dles', 1, 0],\\n  ['foodnstuff', 1, 0]]\\n\\n  function select_target(hackLevel, portsOpen, data) {\\n    let highestValue = -1; // Init with a low value\\n    let target = null;\\n    ns.tprint(data.length)\\n\\n    for (let i = 0; i < data.length; i++) {\\n      let serverHackLevel = data[i][1];\\n      let serverPortsOpen = data[i][2];\\n      console.log(serverHackLevel, hackLevel, serverPortsOpen, portsOpen)\\n\\n      if (serverHackLevel <= hackLevel && serverPortsOpen <= portsOpen) {\\n        // use a better formula here this just avoids hacking home and dark-net\\n        let value = serverHackLevel * serverPortsOpen;\\n        console.log(value)\\n\\n        if (value > highestValue) {\\n          highestValue = value;\\n          target = data[i][0];\\n        }\\n      }\\n    }\\n    ns.tprint(target);\\n\\n    return target;\\n  }\\n\\n  let target = select_target(hack_level, ports_open, server_data);\\n\\n  console.log(\\\"work.js\\\", \\\"target: \\\" + target, ns.args)\\n\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n  const justhack = false; //true;\\n  const time_options = {\\n  hour: '2-digit',\\n  minute: '2-digit',\\n  second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    ns.print(formattedTime);\\n    if (justhack) {\\n      await ns.hack(target);\\n    } else if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      await ns.grow(target);\\n    } else {\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"qst4\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[717,5],\"dataMap\":{},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1690.4100000002475,\"ramUsage\":2.4,\"server\":\"qst4\",\"scriptKey\":\"work.js*[717,5]\",\"title\":\"work.js 717 5\",\"threads\":27306,\"temporary\":false}}]}},\"qst5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"qst5\",\"httpPortOpen\":true,\"ip\":\"77.3.8.3\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  //const data = ns.args[0]\\n  //TODO pass all the main data? might be slow?\\n  const hack_level = ns.args[0];\\n  const ports_open = ns.args[1];\\n\\n  // Gerenate server data, don't hard code\\n  // or use copy pasta fix thisGPT lol\\n  // as you can see below tho, it works.\\n  // scan-analyze 10\\n  // copy the data and ask for it in the right form, sort in python\\n  // server_data.sort(key=lambda x: (x[2], x[1]), reverse=True)\\n  const server_data = [['solaris', 912, 5],\\n  ['defcomm', 903, 5],\\n  ['taiyang-digital', 888, 5],\\n  ['aerocorp', 887, 5],\\n  ['icarus', 885, 5],\\n  ['infocomm', 876, 5],\\n  ['galactic-cyber', 869, 5],\\n  ['omnia', 853, 5],\\n  ['deltaone', 849, 5],\\n  ['syscore', 849, 5],\\n  ['zeus-med', 832, 5],\\n  ['zb-institute', 726, 5],\\n  ['darkweb', 1, 5],\\n  ['univ-energy', 840, 4],\\n  ['unitalife', 813, 4],\\n  ['nova-med', 786, 4],\\n  ['global-pharm', 777, 4],\\n  ['zb-def', 776, 4],\\n  ['snap-fitness', 711, 4],\\n  ['lexo-corp', 689, 4],\\n  ['alpha-ent', 600, 4],\\n  ['aevum-police', 441, 4],\\n  ['millenium-fitness', 525, 3],\\n  ['rho-construction', 510, 3],\\n  ['summit-uni', 466, 3],\\n  ['rothman-uni', 430, 3],\\n  ['catalyst', 409, 3],\\n  ['netlink', 401, 3],\\n  ['I.I.I.I', 340, 3],\\n  ['computek', 320, 3],\\n  ['johnson-ortho', 292, 2],\\n  ['the-hub', 280, 2],\\n  ['crush-fitness', 246, 2],\\n  ['avmnite-02h', 212, 2],\\n  ['omega-net', 205, 2],\\n  ['silver-helix', 150, 2],\\n  ['phantasy', 100, 2],\\n  ['iron-gym', 100, 1],\\n  ['max-hardware', 80, 1],\\n  ['zer0', 75, 1],\\n  ['CSEC', 53, 1],\\n  ['neo-net', 50, 1],\\n  ['harakiri-sushi', 40, 0],\\n  ['hong-fang-tea', 30, 0],\\n  ['nectar-net', 20, 0],\\n  ['joesguns', 10, 0],\\n  ['sigma-cosmetics', 5, 0],\\n  ['n00dles', 1, 0],\\n  ['foodnstuff', 1, 0]]\\n\\n  function select_target(hackLevel, portsOpen, data) {\\n    let highestValue = -1; // Init with a low value\\n    let target = null;\\n    ns.tprint(data.length)\\n\\n    for (let i = 0; i < data.length; i++) {\\n      let serverHackLevel = data[i][1];\\n      let serverPortsOpen = data[i][2];\\n      console.log(serverHackLevel, hackLevel, serverPortsOpen, portsOpen)\\n\\n      if (serverHackLevel <= hackLevel && serverPortsOpen <= portsOpen) {\\n        // use a better formula here this just avoids hacking home and dark-net\\n        let value = serverHackLevel * serverPortsOpen;\\n        console.log(value)\\n\\n        if (value > highestValue) {\\n          highestValue = value;\\n          target = data[i][0];\\n        }\\n      }\\n    }\\n    ns.tprint(target);\\n\\n    return target;\\n  }\\n\\n  let target = select_target(hack_level, ports_open, server_data);\\n\\n  console.log(\\\"work.js\\\", \\\"target: \\\" + target, ns.args)\\n\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n  const justhack = false; //true;\\n  const time_options = {\\n  hour: '2-digit',\\n  minute: '2-digit',\\n  second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    ns.print(formattedTime);\\n    if (justhack) {\\n      await ns.hack(target);\\n    } else if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      await ns.grow(target);\\n    } else {\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"qst5\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[717,5],\"dataMap\":{},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1690.4100000002475,\"ramUsage\":2.4,\"server\":\"qst5\",\"scriptKey\":\"work.js*[717,5]\",\"title\":\"work.js 717 5\",\"threads\":13653,\"temporary\":false}}]}},\"qst6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"qst6\",\"httpPortOpen\":true,\"ip\":\"12.9.2.8\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  //const data = ns.args[0]\\n  //TODO pass all the main data? might be slow?\\n  const hack_level = ns.args[0];\\n  const ports_open = ns.args[1];\\n\\n  // Gerenate server data, don't hard code\\n  // or use copy pasta fix thisGPT lol\\n  // as you can see below tho, it works.\\n  // scan-analyze 10\\n  // copy the data and ask for it in the right form, sort in python\\n  // server_data.sort(key=lambda x: (x[2], x[1]), reverse=True)\\n  const server_data = [['solaris', 912, 5],\\n  ['defcomm', 903, 5],\\n  ['taiyang-digital', 888, 5],\\n  ['aerocorp', 887, 5],\\n  ['icarus', 885, 5],\\n  ['infocomm', 876, 5],\\n  ['galactic-cyber', 869, 5],\\n  ['omnia', 853, 5],\\n  ['deltaone', 849, 5],\\n  ['syscore', 849, 5],\\n  ['zeus-med', 832, 5],\\n  ['zb-institute', 726, 5],\\n  ['darkweb', 1, 5],\\n  ['univ-energy', 840, 4],\\n  ['unitalife', 813, 4],\\n  ['nova-med', 786, 4],\\n  ['global-pharm', 777, 4],\\n  ['zb-def', 776, 4],\\n  ['snap-fitness', 711, 4],\\n  ['lexo-corp', 689, 4],\\n  ['alpha-ent', 600, 4],\\n  ['aevum-police', 441, 4],\\n  ['millenium-fitness', 525, 3],\\n  ['rho-construction', 510, 3],\\n  ['summit-uni', 466, 3],\\n  ['rothman-uni', 430, 3],\\n  ['catalyst', 409, 3],\\n  ['netlink', 401, 3],\\n  ['I.I.I.I', 340, 3],\\n  ['computek', 320, 3],\\n  ['johnson-ortho', 292, 2],\\n  ['the-hub', 280, 2],\\n  ['crush-fitness', 246, 2],\\n  ['avmnite-02h', 212, 2],\\n  ['omega-net', 205, 2],\\n  ['silver-helix', 150, 2],\\n  ['phantasy', 100, 2],\\n  ['iron-gym', 100, 1],\\n  ['max-hardware', 80, 1],\\n  ['zer0', 75, 1],\\n  ['CSEC', 53, 1],\\n  ['neo-net', 50, 1],\\n  ['harakiri-sushi', 40, 0],\\n  ['hong-fang-tea', 30, 0],\\n  ['nectar-net', 20, 0],\\n  ['joesguns', 10, 0],\\n  ['sigma-cosmetics', 5, 0],\\n  ['n00dles', 1, 0],\\n  ['foodnstuff', 1, 0]]\\n\\n  function select_target(hackLevel, portsOpen, data) {\\n    let highestValue = -1; // Init with a low value\\n    let target = null;\\n    ns.tprint(data.length)\\n\\n    for (let i = 0; i < data.length; i++) {\\n      let serverHackLevel = data[i][1];\\n      let serverPortsOpen = data[i][2];\\n      console.log(serverHackLevel, hackLevel, serverPortsOpen, portsOpen)\\n\\n      if (serverHackLevel <= hackLevel && serverPortsOpen <= portsOpen) {\\n        // use a better formula here this just avoids hacking home and dark-net\\n        let value = serverHackLevel * serverPortsOpen;\\n        console.log(value)\\n\\n        if (value > highestValue) {\\n          highestValue = value;\\n          target = data[i][0];\\n        }\\n      }\\n    }\\n    ns.tprint(target);\\n\\n    return target;\\n  }\\n\\n  let target = select_target(hack_level, ports_open, server_data);\\n\\n  console.log(\\\"work.js\\\", \\\"target: \\\" + target, ns.args)\\n\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n  const justhack = false; //true;\\n  const time_options = {\\n  hour: '2-digit',\\n  minute: '2-digit',\\n  second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    ns.print(formattedTime);\\n    if (justhack) {\\n      await ns.hack(target);\\n    } else if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      await ns.grow(target);\\n    } else {\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"qst6\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[717,5],\"dataMap\":{},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1690.4100000002475,\"ramUsage\":2.4,\"server\":\"qst6\",\"scriptKey\":\"work.js*[717,5]\",\"title\":\"work.js 717 5\",\"threads\":13653,\"temporary\":false}}]}},\"qst7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"qst7\",\"httpPortOpen\":true,\"ip\":\"46.7.0.3\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  //const data = ns.args[0]\\n  //TODO pass all the main data? might be slow?\\n  const hack_level = ns.args[0];\\n  const ports_open = ns.args[1];\\n\\n  // Gerenate server data, don't hard code\\n  // or use copy pasta fix thisGPT lol\\n  // as you can see below tho, it works.\\n  // scan-analyze 10\\n  // copy the data and ask for it in the right form, sort in python\\n  // server_data.sort(key=lambda x: (x[2], x[1]), reverse=True)\\n  const server_data = [['solaris', 912, 5],\\n  ['defcomm', 903, 5],\\n  ['taiyang-digital', 888, 5],\\n  ['aerocorp', 887, 5],\\n  ['icarus', 885, 5],\\n  ['infocomm', 876, 5],\\n  ['galactic-cyber', 869, 5],\\n  ['omnia', 853, 5],\\n  ['deltaone', 849, 5],\\n  ['syscore', 849, 5],\\n  ['zeus-med', 832, 5],\\n  ['zb-institute', 726, 5],\\n  ['darkweb', 1, 5],\\n  ['univ-energy', 840, 4],\\n  ['unitalife', 813, 4],\\n  ['nova-med', 786, 4],\\n  ['global-pharm', 777, 4],\\n  ['zb-def', 776, 4],\\n  ['snap-fitness', 711, 4],\\n  ['lexo-corp', 689, 4],\\n  ['alpha-ent', 600, 4],\\n  ['aevum-police', 441, 4],\\n  ['millenium-fitness', 525, 3],\\n  ['rho-construction', 510, 3],\\n  ['summit-uni', 466, 3],\\n  ['rothman-uni', 430, 3],\\n  ['catalyst', 409, 3],\\n  ['netlink', 401, 3],\\n  ['I.I.I.I', 340, 3],\\n  ['computek', 320, 3],\\n  ['johnson-ortho', 292, 2],\\n  ['the-hub', 280, 2],\\n  ['crush-fitness', 246, 2],\\n  ['avmnite-02h', 212, 2],\\n  ['omega-net', 205, 2],\\n  ['silver-helix', 150, 2],\\n  ['phantasy', 100, 2],\\n  ['iron-gym', 100, 1],\\n  ['max-hardware', 80, 1],\\n  ['zer0', 75, 1],\\n  ['CSEC', 53, 1],\\n  ['neo-net', 50, 1],\\n  ['harakiri-sushi', 40, 0],\\n  ['hong-fang-tea', 30, 0],\\n  ['nectar-net', 20, 0],\\n  ['joesguns', 10, 0],\\n  ['sigma-cosmetics', 5, 0],\\n  ['n00dles', 1, 0],\\n  ['foodnstuff', 1, 0]]\\n\\n  function select_target(hackLevel, portsOpen, data) {\\n    let highestValue = -1; // Init with a low value\\n    let target = null;\\n    ns.tprint(data.length)\\n\\n    for (let i = 0; i < data.length; i++) {\\n      let serverHackLevel = data[i][1];\\n      let serverPortsOpen = data[i][2];\\n      console.log(serverHackLevel, hackLevel, serverPortsOpen, portsOpen)\\n\\n      if (serverHackLevel <= hackLevel && serverPortsOpen <= portsOpen) {\\n        // use a better formula here this just avoids hacking home and dark-net\\n        let value = serverHackLevel * serverPortsOpen;\\n        console.log(value)\\n\\n        if (value > highestValue) {\\n          highestValue = value;\\n          target = data[i][0];\\n        }\\n      }\\n    }\\n    ns.tprint(target);\\n\\n    return target;\\n  }\\n\\n  let target = select_target(hack_level, ports_open, server_data);\\n\\n  console.log(\\\"work.js\\\", \\\"target: \\\" + target, ns.args)\\n\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n  const justhack = false; //true;\\n  const time_options = {\\n  hour: '2-digit',\\n  minute: '2-digit',\\n  second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    ns.print(formattedTime);\\n    if (justhack) {\\n      await ns.hack(target);\\n    } else if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      await ns.grow(target);\\n    } else {\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"qst7\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[717,5],\"dataMap\":{},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1690.4100000002475,\"ramUsage\":2.4,\"server\":\"qst7\",\"scriptKey\":\"work.js*[717,5]\",\"title\":\"work.js 717 5\",\"threads\":13653,\"temporary\":false}}]}},\"qst8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"qst8\",\"httpPortOpen\":true,\"ip\":\"6.2.4.7\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  //const data = ns.args[0]\\n  //TODO pass all the main data? might be slow?\\n  const hack_level = ns.args[0];\\n  const ports_open = ns.args[1];\\n\\n  // Gerenate server data, don't hard code\\n  // or use copy pasta fix thisGPT lol\\n  // as you can see below tho, it works.\\n  // scan-analyze 10\\n  // copy the data and ask for it in the right form, sort in python\\n  // server_data.sort(key=lambda x: (x[2], x[1]), reverse=True)\\n  const server_data = [['solaris', 912, 5],\\n  ['defcomm', 903, 5],\\n  ['taiyang-digital', 888, 5],\\n  ['aerocorp', 887, 5],\\n  ['icarus', 885, 5],\\n  ['infocomm', 876, 5],\\n  ['galactic-cyber', 869, 5],\\n  ['omnia', 853, 5],\\n  ['deltaone', 849, 5],\\n  ['syscore', 849, 5],\\n  ['zeus-med', 832, 5],\\n  ['zb-institute', 726, 5],\\n  ['darkweb', 1, 5],\\n  ['univ-energy', 840, 4],\\n  ['unitalife', 813, 4],\\n  ['nova-med', 786, 4],\\n  ['global-pharm', 777, 4],\\n  ['zb-def', 776, 4],\\n  ['snap-fitness', 711, 4],\\n  ['lexo-corp', 689, 4],\\n  ['alpha-ent', 600, 4],\\n  ['aevum-police', 441, 4],\\n  ['millenium-fitness', 525, 3],\\n  ['rho-construction', 510, 3],\\n  ['summit-uni', 466, 3],\\n  ['rothman-uni', 430, 3],\\n  ['catalyst', 409, 3],\\n  ['netlink', 401, 3],\\n  ['I.I.I.I', 340, 3],\\n  ['computek', 320, 3],\\n  ['johnson-ortho', 292, 2],\\n  ['the-hub', 280, 2],\\n  ['crush-fitness', 246, 2],\\n  ['avmnite-02h', 212, 2],\\n  ['omega-net', 205, 2],\\n  ['silver-helix', 150, 2],\\n  ['phantasy', 100, 2],\\n  ['iron-gym', 100, 1],\\n  ['max-hardware', 80, 1],\\n  ['zer0', 75, 1],\\n  ['CSEC', 53, 1],\\n  ['neo-net', 50, 1],\\n  ['harakiri-sushi', 40, 0],\\n  ['hong-fang-tea', 30, 0],\\n  ['nectar-net', 20, 0],\\n  ['joesguns', 10, 0],\\n  ['sigma-cosmetics', 5, 0],\\n  ['n00dles', 1, 0],\\n  ['foodnstuff', 1, 0]]\\n\\n  function select_target(hackLevel, portsOpen, data) {\\n    let highestValue = -1; // Init with a low value\\n    let target = null;\\n    ns.tprint(data.length)\\n\\n    for (let i = 0; i < data.length; i++) {\\n      let serverHackLevel = data[i][1];\\n      let serverPortsOpen = data[i][2];\\n      console.log(serverHackLevel, hackLevel, serverPortsOpen, portsOpen)\\n\\n      if (serverHackLevel <= hackLevel && serverPortsOpen <= portsOpen) {\\n        // use a better formula here this just avoids hacking home and dark-net\\n        let value = serverHackLevel * serverPortsOpen;\\n        console.log(value)\\n\\n        if (value > highestValue) {\\n          highestValue = value;\\n          target = data[i][0];\\n        }\\n      }\\n    }\\n    ns.tprint(target);\\n\\n    return target;\\n  }\\n\\n  let target = select_target(hack_level, ports_open, server_data);\\n\\n  console.log(\\\"work.js\\\", \\\"target: \\\" + target, ns.args)\\n\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n  const justhack = false; //true;\\n  const time_options = {\\n  hour: '2-digit',\\n  minute: '2-digit',\\n  second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    ns.print(formattedTime);\\n    if (justhack) {\\n      await ns.hack(target);\\n    } else if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      await ns.grow(target);\\n    } else {\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"qst8\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[717,5],\"dataMap\":{},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1690.4100000002475,\"ramUsage\":2.4,\"server\":\"qst8\",\"scriptKey\":\"work.js*[717,5]\",\"title\":\"work.js 717 5\",\"threads\":13653,\"temporary\":false}}]}},\"qst9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"qst9\",\"httpPortOpen\":true,\"ip\":\"8.0.0.9\",\"isConnectedTo\":false,\"maxRam\":16384,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  //const data = ns.args[0]\\n  //TODO pass all the main data? might be slow?\\n  const hack_level = ns.args[0];\\n  const ports_open = ns.args[1];\\n\\n  // Gerenate server data, don't hard code\\n  // or use copy pasta fix thisGPT lol\\n  // as you can see below tho, it works.\\n  // scan-analyze 10\\n  // copy the data and ask for it in the right form, sort in python\\n  // server_data.sort(key=lambda x: (x[2], x[1]), reverse=True)\\n  const server_data = [['solaris', 912, 5],\\n  ['defcomm', 903, 5],\\n  ['taiyang-digital', 888, 5],\\n  ['aerocorp', 887, 5],\\n  ['icarus', 885, 5],\\n  ['infocomm', 876, 5],\\n  ['galactic-cyber', 869, 5],\\n  ['omnia', 853, 5],\\n  ['deltaone', 849, 5],\\n  ['syscore', 849, 5],\\n  ['zeus-med', 832, 5],\\n  ['zb-institute', 726, 5],\\n  ['darkweb', 1, 5],\\n  ['univ-energy', 840, 4],\\n  ['unitalife', 813, 4],\\n  ['nova-med', 786, 4],\\n  ['global-pharm', 777, 4],\\n  ['zb-def', 776, 4],\\n  ['snap-fitness', 711, 4],\\n  ['lexo-corp', 689, 4],\\n  ['alpha-ent', 600, 4],\\n  ['aevum-police', 441, 4],\\n  ['millenium-fitness', 525, 3],\\n  ['rho-construction', 510, 3],\\n  ['summit-uni', 466, 3],\\n  ['rothman-uni', 430, 3],\\n  ['catalyst', 409, 3],\\n  ['netlink', 401, 3],\\n  ['I.I.I.I', 340, 3],\\n  ['computek', 320, 3],\\n  ['johnson-ortho', 292, 2],\\n  ['the-hub', 280, 2],\\n  ['crush-fitness', 246, 2],\\n  ['avmnite-02h', 212, 2],\\n  ['omega-net', 205, 2],\\n  ['silver-helix', 150, 2],\\n  ['phantasy', 100, 2],\\n  ['iron-gym', 100, 1],\\n  ['max-hardware', 80, 1],\\n  ['zer0', 75, 1],\\n  ['CSEC', 53, 1],\\n  ['neo-net', 50, 1],\\n  ['harakiri-sushi', 40, 0],\\n  ['hong-fang-tea', 30, 0],\\n  ['nectar-net', 20, 0],\\n  ['joesguns', 10, 0],\\n  ['sigma-cosmetics', 5, 0],\\n  ['n00dles', 1, 0],\\n  ['foodnstuff', 1, 0]]\\n\\n  function select_target(hackLevel, portsOpen, data) {\\n    let highestValue = -1; // Init with a low value\\n    let target = null;\\n    ns.tprint(data.length)\\n\\n    for (let i = 0; i < data.length; i++) {\\n      let serverHackLevel = data[i][1];\\n      let serverPortsOpen = data[i][2];\\n      console.log(serverHackLevel, hackLevel, serverPortsOpen, portsOpen)\\n\\n      if (serverHackLevel <= hackLevel && serverPortsOpen <= portsOpen) {\\n        // use a better formula here this just avoids hacking home and dark-net\\n        let value = serverHackLevel * serverPortsOpen;\\n        console.log(value)\\n\\n        if (value > highestValue) {\\n          highestValue = value;\\n          target = data[i][0];\\n        }\\n      }\\n    }\\n    ns.tprint(target);\\n\\n    return target;\\n  }\\n\\n  let target = select_target(hack_level, ports_open, server_data);\\n\\n  console.log(\\\"work.js\\\", \\\"target: \\\" + target, ns.args)\\n\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n  const justhack = false; //true;\\n  const time_options = {\\n  hour: '2-digit',\\n  minute: '2-digit',\\n  second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    ns.print(formattedTime);\\n    if (justhack) {\\n      await ns.hack(target);\\n    } else if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      await ns.grow(target);\\n    } else {\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"qst9\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[717,5],\"dataMap\":{},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1690.4100000002475,\"ramUsage\":2.4,\"server\":\"qst9\",\"scriptKey\":\"work.js*[717,5]\",\"title\":\"work.js 717 5\",\"threads\":6826,\"temporary\":false}}]}},\"qst10\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"qst10\",\"httpPortOpen\":true,\"ip\":\"43.9.6.8\",\"isConnectedTo\":false,\"maxRam\":16384,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  //const data = ns.args[0]\\n  //TODO pass all the main data? might be slow?\\n  const hack_level = ns.args[0];\\n  const ports_open = ns.args[1];\\n\\n  // Gerenate server data, don't hard code\\n  // or use copy pasta fix thisGPT lol\\n  // as you can see below tho, it works.\\n  // scan-analyze 10\\n  // copy the data and ask for it in the right form, sort in python\\n  // server_data.sort(key=lambda x: (x[2], x[1]), reverse=True)\\n  const server_data = [['solaris', 912, 5],\\n  ['defcomm', 903, 5],\\n  ['taiyang-digital', 888, 5],\\n  ['aerocorp', 887, 5],\\n  ['icarus', 885, 5],\\n  ['infocomm', 876, 5],\\n  ['galactic-cyber', 869, 5],\\n  ['omnia', 853, 5],\\n  ['deltaone', 849, 5],\\n  ['syscore', 849, 5],\\n  ['zeus-med', 832, 5],\\n  ['zb-institute', 726, 5],\\n  ['darkweb', 1, 5],\\n  ['univ-energy', 840, 4],\\n  ['unitalife', 813, 4],\\n  ['nova-med', 786, 4],\\n  ['global-pharm', 777, 4],\\n  ['zb-def', 776, 4],\\n  ['snap-fitness', 711, 4],\\n  ['lexo-corp', 689, 4],\\n  ['alpha-ent', 600, 4],\\n  ['aevum-police', 441, 4],\\n  ['millenium-fitness', 525, 3],\\n  ['rho-construction', 510, 3],\\n  ['summit-uni', 466, 3],\\n  ['rothman-uni', 430, 3],\\n  ['catalyst', 409, 3],\\n  ['netlink', 401, 3],\\n  ['I.I.I.I', 340, 3],\\n  ['computek', 320, 3],\\n  ['johnson-ortho', 292, 2],\\n  ['the-hub', 280, 2],\\n  ['crush-fitness', 246, 2],\\n  ['avmnite-02h', 212, 2],\\n  ['omega-net', 205, 2],\\n  ['silver-helix', 150, 2],\\n  ['phantasy', 100, 2],\\n  ['iron-gym', 100, 1],\\n  ['max-hardware', 80, 1],\\n  ['zer0', 75, 1],\\n  ['CSEC', 53, 1],\\n  ['neo-net', 50, 1],\\n  ['harakiri-sushi', 40, 0],\\n  ['hong-fang-tea', 30, 0],\\n  ['nectar-net', 20, 0],\\n  ['joesguns', 10, 0],\\n  ['sigma-cosmetics', 5, 0],\\n  ['n00dles', 1, 0],\\n  ['foodnstuff', 1, 0]]\\n\\n  function select_target(hackLevel, portsOpen, data) {\\n    let highestValue = -1; // Init with a low value\\n    let target = null;\\n    ns.tprint(data.length)\\n\\n    for (let i = 0; i < data.length; i++) {\\n      let serverHackLevel = data[i][1];\\n      let serverPortsOpen = data[i][2];\\n      console.log(serverHackLevel, hackLevel, serverPortsOpen, portsOpen)\\n\\n      if (serverHackLevel <= hackLevel && serverPortsOpen <= portsOpen) {\\n        // use a better formula here this just avoids hacking home and dark-net\\n        let value = serverHackLevel * serverPortsOpen;\\n        console.log(value)\\n\\n        if (value > highestValue) {\\n          highestValue = value;\\n          target = data[i][0];\\n        }\\n      }\\n    }\\n    ns.tprint(target);\\n\\n    return target;\\n  }\\n\\n  let target = select_target(hack_level, ports_open, server_data);\\n\\n  console.log(\\\"work.js\\\", \\\"target: \\\" + target, ns.args)\\n\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n  const justhack = false; //true;\\n  const time_options = {\\n  hour: '2-digit',\\n  minute: '2-digit',\\n  second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    ns.print(formattedTime);\\n    if (justhack) {\\n      await ns.hack(target);\\n    } else if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      await ns.grow(target);\\n    } else {\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"qst10\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[717,5],\"dataMap\":{},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1690.4100000002475,\"ramUsage\":2.4,\"server\":\"qst10\",\"scriptKey\":\"work.js*[717,5]\",\"title\":\"work.js 717 5\",\"threads\":6826,\"temporary\":false}}]}},\"qst11\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"qst11\",\"httpPortOpen\":true,\"ip\":\"2.4.5.0\",\"isConnectedTo\":false,\"maxRam\":16384,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  //const data = ns.args[0]\\n  //TODO pass all the main data? might be slow?\\n  const hack_level = ns.args[0];\\n  const ports_open = ns.args[1];\\n\\n  // Gerenate server data, don't hard code\\n  // or use copy pasta fix thisGPT lol\\n  // as you can see below tho, it works.\\n  // scan-analyze 10\\n  // copy the data and ask for it in the right form, sort in python\\n  // server_data.sort(key=lambda x: (x[2], x[1]), reverse=True)\\n  const server_data = [['solaris', 912, 5],\\n  ['defcomm', 903, 5],\\n  ['taiyang-digital', 888, 5],\\n  ['aerocorp', 887, 5],\\n  ['icarus', 885, 5],\\n  ['infocomm', 876, 5],\\n  ['galactic-cyber', 869, 5],\\n  ['omnia', 853, 5],\\n  ['deltaone', 849, 5],\\n  ['syscore', 849, 5],\\n  ['zeus-med', 832, 5],\\n  ['zb-institute', 726, 5],\\n  ['darkweb', 1, 5],\\n  ['univ-energy', 840, 4],\\n  ['unitalife', 813, 4],\\n  ['nova-med', 786, 4],\\n  ['global-pharm', 777, 4],\\n  ['zb-def', 776, 4],\\n  ['snap-fitness', 711, 4],\\n  ['lexo-corp', 689, 4],\\n  ['alpha-ent', 600, 4],\\n  ['aevum-police', 441, 4],\\n  ['millenium-fitness', 525, 3],\\n  ['rho-construction', 510, 3],\\n  ['summit-uni', 466, 3],\\n  ['rothman-uni', 430, 3],\\n  ['catalyst', 409, 3],\\n  ['netlink', 401, 3],\\n  ['I.I.I.I', 340, 3],\\n  ['computek', 320, 3],\\n  ['johnson-ortho', 292, 2],\\n  ['the-hub', 280, 2],\\n  ['crush-fitness', 246, 2],\\n  ['avmnite-02h', 212, 2],\\n  ['omega-net', 205, 2],\\n  ['silver-helix', 150, 2],\\n  ['phantasy', 100, 2],\\n  ['iron-gym', 100, 1],\\n  ['max-hardware', 80, 1],\\n  ['zer0', 75, 1],\\n  ['CSEC', 53, 1],\\n  ['neo-net', 50, 1],\\n  ['harakiri-sushi', 40, 0],\\n  ['hong-fang-tea', 30, 0],\\n  ['nectar-net', 20, 0],\\n  ['joesguns', 10, 0],\\n  ['sigma-cosmetics', 5, 0],\\n  ['n00dles', 1, 0],\\n  ['foodnstuff', 1, 0]]\\n\\n  function select_target(hackLevel, portsOpen, data) {\\n    let highestValue = -1; // Init with a low value\\n    let target = null;\\n    ns.tprint(data.length)\\n\\n    for (let i = 0; i < data.length; i++) {\\n      let serverHackLevel = data[i][1];\\n      let serverPortsOpen = data[i][2];\\n      console.log(serverHackLevel, hackLevel, serverPortsOpen, portsOpen)\\n\\n      if (serverHackLevel <= hackLevel && serverPortsOpen <= portsOpen) {\\n        // use a better formula here this just avoids hacking home and dark-net\\n        let value = serverHackLevel * serverPortsOpen;\\n        console.log(value)\\n\\n        if (value > highestValue) {\\n          highestValue = value;\\n          target = data[i][0];\\n        }\\n      }\\n    }\\n    ns.tprint(target);\\n\\n    return target;\\n  }\\n\\n  let target = select_target(hack_level, ports_open, server_data);\\n\\n  console.log(\\\"work.js\\\", \\\"target: \\\" + target, ns.args)\\n\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n  const justhack = false; //true;\\n  const time_options = {\\n  hour: '2-digit',\\n  minute: '2-digit',\\n  second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    ns.print(formattedTime);\\n    if (justhack) {\\n      await ns.hack(target);\\n    } else if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      await ns.grow(target);\\n    } else {\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"qst11\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[717,5],\"dataMap\":{},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1690.4100000002475,\"ramUsage\":2.4,\"server\":\"qst11\",\"scriptKey\":\"work.js*[717,5]\",\"title\":\"work.js 717 5\",\"threads\":6826,\"temporary\":false}}]}},\"qst12\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"qst12\",\"httpPortOpen\":true,\"ip\":\"56.1.7.0\",\"isConnectedTo\":false,\"maxRam\":16384,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  //const data = ns.args[0]\\n  //TODO pass all the main data? might be slow?\\n  const hack_level = ns.args[0];\\n  const ports_open = ns.args[1];\\n\\n  // Gerenate server data, don't hard code\\n  // or use copy pasta fix thisGPT lol\\n  // as you can see below tho, it works.\\n  // scan-analyze 10\\n  // copy the data and ask for it in the right form, sort in python\\n  // server_data.sort(key=lambda x: (x[2], x[1]), reverse=True)\\n  const server_data = [['solaris', 912, 5],\\n  ['defcomm', 903, 5],\\n  ['taiyang-digital', 888, 5],\\n  ['aerocorp', 887, 5],\\n  ['icarus', 885, 5],\\n  ['infocomm', 876, 5],\\n  ['galactic-cyber', 869, 5],\\n  ['omnia', 853, 5],\\n  ['deltaone', 849, 5],\\n  ['syscore', 849, 5],\\n  ['zeus-med', 832, 5],\\n  ['zb-institute', 726, 5],\\n  ['darkweb', 1, 5],\\n  ['univ-energy', 840, 4],\\n  ['unitalife', 813, 4],\\n  ['nova-med', 786, 4],\\n  ['global-pharm', 777, 4],\\n  ['zb-def', 776, 4],\\n  ['snap-fitness', 711, 4],\\n  ['lexo-corp', 689, 4],\\n  ['alpha-ent', 600, 4],\\n  ['aevum-police', 441, 4],\\n  ['millenium-fitness', 525, 3],\\n  ['rho-construction', 510, 3],\\n  ['summit-uni', 466, 3],\\n  ['rothman-uni', 430, 3],\\n  ['catalyst', 409, 3],\\n  ['netlink', 401, 3],\\n  ['I.I.I.I', 340, 3],\\n  ['computek', 320, 3],\\n  ['johnson-ortho', 292, 2],\\n  ['the-hub', 280, 2],\\n  ['crush-fitness', 246, 2],\\n  ['avmnite-02h', 212, 2],\\n  ['omega-net', 205, 2],\\n  ['silver-helix', 150, 2],\\n  ['phantasy', 100, 2],\\n  ['iron-gym', 100, 1],\\n  ['max-hardware', 80, 1],\\n  ['zer0', 75, 1],\\n  ['CSEC', 53, 1],\\n  ['neo-net', 50, 1],\\n  ['harakiri-sushi', 40, 0],\\n  ['hong-fang-tea', 30, 0],\\n  ['nectar-net', 20, 0],\\n  ['joesguns', 10, 0],\\n  ['sigma-cosmetics', 5, 0],\\n  ['n00dles', 1, 0],\\n  ['foodnstuff', 1, 0]]\\n\\n  function select_target(hackLevel, portsOpen, data) {\\n    let highestValue = -1; // Init with a low value\\n    let target = null;\\n    ns.tprint(data.length)\\n\\n    for (let i = 0; i < data.length; i++) {\\n      let serverHackLevel = data[i][1];\\n      let serverPortsOpen = data[i][2];\\n      console.log(serverHackLevel, hackLevel, serverPortsOpen, portsOpen)\\n\\n      if (serverHackLevel <= hackLevel && serverPortsOpen <= portsOpen) {\\n        // use a better formula here this just avoids hacking home and dark-net\\n        let value = serverHackLevel * serverPortsOpen;\\n        console.log(value)\\n\\n        if (value > highestValue) {\\n          highestValue = value;\\n          target = data[i][0];\\n        }\\n      }\\n    }\\n    ns.tprint(target);\\n\\n    return target;\\n  }\\n\\n  let target = select_target(hack_level, ports_open, server_data);\\n\\n  console.log(\\\"work.js\\\", \\\"target: \\\" + target, ns.args)\\n\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n  const justhack = false; //true;\\n  const time_options = {\\n  hour: '2-digit',\\n  minute: '2-digit',\\n  second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    ns.print(formattedTime);\\n    if (justhack) {\\n      await ns.hack(target);\\n    } else if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      await ns.grow(target);\\n    } else {\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"qst12\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[717,5],\"dataMap\":{},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1690.4100000002475,\"ramUsage\":2.4,\"server\":\"qst12\",\"scriptKey\":\"work.js*[717,5]\",\"title\":\"work.js 717 5\",\"threads\":6826,\"temporary\":false}}]}},\"qst13\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"qst13\",\"httpPortOpen\":true,\"ip\":\"83.1.8.6\",\"isConnectedTo\":false,\"maxRam\":16384,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  //const data = ns.args[0]\\n  //TODO pass all the main data? might be slow?\\n  const hack_level = ns.args[0];\\n  const ports_open = ns.args[1];\\n\\n  // Gerenate server data, don't hard code\\n  // or use copy pasta fix thisGPT lol\\n  // as you can see below tho, it works.\\n  // scan-analyze 10\\n  // copy the data and ask for it in the right form, sort in python\\n  // server_data.sort(key=lambda x: (x[2], x[1]), reverse=True)\\n  const server_data = [['solaris', 912, 5],\\n  ['defcomm', 903, 5],\\n  ['taiyang-digital', 888, 5],\\n  ['aerocorp', 887, 5],\\n  ['icarus', 885, 5],\\n  ['infocomm', 876, 5],\\n  ['galactic-cyber', 869, 5],\\n  ['omnia', 853, 5],\\n  ['deltaone', 849, 5],\\n  ['syscore', 849, 5],\\n  ['zeus-med', 832, 5],\\n  ['zb-institute', 726, 5],\\n  ['darkweb', 1, 5],\\n  ['univ-energy', 840, 4],\\n  ['unitalife', 813, 4],\\n  ['nova-med', 786, 4],\\n  ['global-pharm', 777, 4],\\n  ['zb-def', 776, 4],\\n  ['snap-fitness', 711, 4],\\n  ['lexo-corp', 689, 4],\\n  ['alpha-ent', 600, 4],\\n  ['aevum-police', 441, 4],\\n  ['millenium-fitness', 525, 3],\\n  ['rho-construction', 510, 3],\\n  ['summit-uni', 466, 3],\\n  ['rothman-uni', 430, 3],\\n  ['catalyst', 409, 3],\\n  ['netlink', 401, 3],\\n  ['I.I.I.I', 340, 3],\\n  ['computek', 320, 3],\\n  ['johnson-ortho', 292, 2],\\n  ['the-hub', 280, 2],\\n  ['crush-fitness', 246, 2],\\n  ['avmnite-02h', 212, 2],\\n  ['omega-net', 205, 2],\\n  ['silver-helix', 150, 2],\\n  ['phantasy', 100, 2],\\n  ['iron-gym', 100, 1],\\n  ['max-hardware', 80, 1],\\n  ['zer0', 75, 1],\\n  ['CSEC', 53, 1],\\n  ['neo-net', 50, 1],\\n  ['harakiri-sushi', 40, 0],\\n  ['hong-fang-tea', 30, 0],\\n  ['nectar-net', 20, 0],\\n  ['joesguns', 10, 0],\\n  ['sigma-cosmetics', 5, 0],\\n  ['n00dles', 1, 0],\\n  ['foodnstuff', 1, 0]]\\n\\n  function select_target(hackLevel, portsOpen, data) {\\n    let highestValue = -1; // Init with a low value\\n    let target = null;\\n    ns.tprint(data.length)\\n\\n    for (let i = 0; i < data.length; i++) {\\n      let serverHackLevel = data[i][1];\\n      let serverPortsOpen = data[i][2];\\n      console.log(serverHackLevel, hackLevel, serverPortsOpen, portsOpen)\\n\\n      if (serverHackLevel <= hackLevel && serverPortsOpen <= portsOpen) {\\n        // use a better formula here this just avoids hacking home and dark-net\\n        let value = serverHackLevel * serverPortsOpen;\\n        console.log(value)\\n\\n        if (value > highestValue) {\\n          highestValue = value;\\n          target = data[i][0];\\n        }\\n      }\\n    }\\n    ns.tprint(target);\\n\\n    return target;\\n  }\\n\\n  let target = select_target(hack_level, ports_open, server_data);\\n\\n  console.log(\\\"work.js\\\", \\\"target: \\\" + target, ns.args)\\n\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n  const justhack = false; //true;\\n  const time_options = {\\n  hour: '2-digit',\\n  minute: '2-digit',\\n  second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    ns.print(formattedTime);\\n    if (justhack) {\\n      await ns.hack(target);\\n    } else if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      await ns.grow(target);\\n    } else {\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"qst13\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[717,5],\"dataMap\":{},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1690.4100000002475,\"ramUsage\":2.4,\"server\":\"qst13\",\"scriptKey\":\"work.js*[717,5]\",\"title\":\"work.js 717 5\",\"threads\":6826,\"temporary\":false}}]}},\"qst14\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"qst14\",\"httpPortOpen\":true,\"ip\":\"50.5.4.4\",\"isConnectedTo\":false,\"maxRam\":16384,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  //const data = ns.args[0]\\n  //TODO pass all the main data? might be slow?\\n  const hack_level = ns.args[0];\\n  const ports_open = ns.args[1];\\n\\n  // Gerenate server data, don't hard code\\n  // or use copy pasta fix thisGPT lol\\n  // as you can see below tho, it works.\\n  // scan-analyze 10\\n  // copy the data and ask for it in the right form, sort in python\\n  // server_data.sort(key=lambda x: (x[2], x[1]), reverse=True)\\n  const server_data = [['solaris', 912, 5],\\n  ['defcomm', 903, 5],\\n  ['taiyang-digital', 888, 5],\\n  ['aerocorp', 887, 5],\\n  ['icarus', 885, 5],\\n  ['infocomm', 876, 5],\\n  ['galactic-cyber', 869, 5],\\n  ['omnia', 853, 5],\\n  ['deltaone', 849, 5],\\n  ['syscore', 849, 5],\\n  ['zeus-med', 832, 5],\\n  ['zb-institute', 726, 5],\\n  ['darkweb', 1, 5],\\n  ['univ-energy', 840, 4],\\n  ['unitalife', 813, 4],\\n  ['nova-med', 786, 4],\\n  ['global-pharm', 777, 4],\\n  ['zb-def', 776, 4],\\n  ['snap-fitness', 711, 4],\\n  ['lexo-corp', 689, 4],\\n  ['alpha-ent', 600, 4],\\n  ['aevum-police', 441, 4],\\n  ['millenium-fitness', 525, 3],\\n  ['rho-construction', 510, 3],\\n  ['summit-uni', 466, 3],\\n  ['rothman-uni', 430, 3],\\n  ['catalyst', 409, 3],\\n  ['netlink', 401, 3],\\n  ['I.I.I.I', 340, 3],\\n  ['computek', 320, 3],\\n  ['johnson-ortho', 292, 2],\\n  ['the-hub', 280, 2],\\n  ['crush-fitness', 246, 2],\\n  ['avmnite-02h', 212, 2],\\n  ['omega-net', 205, 2],\\n  ['silver-helix', 150, 2],\\n  ['phantasy', 100, 2],\\n  ['iron-gym', 100, 1],\\n  ['max-hardware', 80, 1],\\n  ['zer0', 75, 1],\\n  ['CSEC', 53, 1],\\n  ['neo-net', 50, 1],\\n  ['harakiri-sushi', 40, 0],\\n  ['hong-fang-tea', 30, 0],\\n  ['nectar-net', 20, 0],\\n  ['joesguns', 10, 0],\\n  ['sigma-cosmetics', 5, 0],\\n  ['n00dles', 1, 0],\\n  ['foodnstuff', 1, 0]]\\n\\n  function select_target(hackLevel, portsOpen, data) {\\n    let highestValue = -1; // Init with a low value\\n    let target = null;\\n    ns.tprint(data.length)\\n\\n    for (let i = 0; i < data.length; i++) {\\n      let serverHackLevel = data[i][1];\\n      let serverPortsOpen = data[i][2];\\n      console.log(serverHackLevel, hackLevel, serverPortsOpen, portsOpen)\\n\\n      if (serverHackLevel <= hackLevel && serverPortsOpen <= portsOpen) {\\n        // use a better formula here this just avoids hacking home and dark-net\\n        let value = serverHackLevel * serverPortsOpen;\\n        console.log(value)\\n\\n        if (value > highestValue) {\\n          highestValue = value;\\n          target = data[i][0];\\n        }\\n      }\\n    }\\n    ns.tprint(target);\\n\\n    return target;\\n  }\\n\\n  let target = select_target(hack_level, ports_open, server_data);\\n\\n  console.log(\\\"work.js\\\", \\\"target: \\\" + target, ns.args)\\n\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n  const justhack = false; //true;\\n  const time_options = {\\n  hour: '2-digit',\\n  minute: '2-digit',\\n  second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    ns.print(formattedTime);\\n    if (justhack) {\\n      await ns.hack(target);\\n    } else if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      await ns.grow(target);\\n    } else {\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"qst14\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[717,5],\"dataMap\":{},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1690.4100000002475,\"ramUsage\":2.4,\"server\":\"qst14\",\"scriptKey\":\"work.js*[717,5]\",\"title\":\"work.js 717 5\",\"threads\":6826,\"temporary\":false}}]}},\"qst15\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"qst15\",\"httpPortOpen\":true,\"ip\":\"48.1.0.7\",\"isConnectedTo\":false,\"maxRam\":16384,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  //const data = ns.args[0]\\n  //TODO pass all the main data? might be slow?\\n  const hack_level = ns.args[0];\\n  const ports_open = ns.args[1];\\n\\n  // Gerenate server data, don't hard code\\n  // or use copy pasta fix thisGPT lol\\n  // as you can see below tho, it works.\\n  // scan-analyze 10\\n  // copy the data and ask for it in the right form, sort in python\\n  // server_data.sort(key=lambda x: (x[2], x[1]), reverse=True)\\n  const server_data = [['solaris', 912, 5],\\n  ['defcomm', 903, 5],\\n  ['taiyang-digital', 888, 5],\\n  ['aerocorp', 887, 5],\\n  ['icarus', 885, 5],\\n  ['infocomm', 876, 5],\\n  ['galactic-cyber', 869, 5],\\n  ['omnia', 853, 5],\\n  ['deltaone', 849, 5],\\n  ['syscore', 849, 5],\\n  ['zeus-med', 832, 5],\\n  ['zb-institute', 726, 5],\\n  ['darkweb', 1, 5],\\n  ['univ-energy', 840, 4],\\n  ['unitalife', 813, 4],\\n  ['nova-med', 786, 4],\\n  ['global-pharm', 777, 4],\\n  ['zb-def', 776, 4],\\n  ['snap-fitness', 711, 4],\\n  ['lexo-corp', 689, 4],\\n  ['alpha-ent', 600, 4],\\n  ['aevum-police', 441, 4],\\n  ['millenium-fitness', 525, 3],\\n  ['rho-construction', 510, 3],\\n  ['summit-uni', 466, 3],\\n  ['rothman-uni', 430, 3],\\n  ['catalyst', 409, 3],\\n  ['netlink', 401, 3],\\n  ['I.I.I.I', 340, 3],\\n  ['computek', 320, 3],\\n  ['johnson-ortho', 292, 2],\\n  ['the-hub', 280, 2],\\n  ['crush-fitness', 246, 2],\\n  ['avmnite-02h', 212, 2],\\n  ['omega-net', 205, 2],\\n  ['silver-helix', 150, 2],\\n  ['phantasy', 100, 2],\\n  ['iron-gym', 100, 1],\\n  ['max-hardware', 80, 1],\\n  ['zer0', 75, 1],\\n  ['CSEC', 53, 1],\\n  ['neo-net', 50, 1],\\n  ['harakiri-sushi', 40, 0],\\n  ['hong-fang-tea', 30, 0],\\n  ['nectar-net', 20, 0],\\n  ['joesguns', 10, 0],\\n  ['sigma-cosmetics', 5, 0],\\n  ['n00dles', 1, 0],\\n  ['foodnstuff', 1, 0]]\\n\\n  function select_target(hackLevel, portsOpen, data) {\\n    let highestValue = -1; // Init with a low value\\n    let target = null;\\n    ns.tprint(data.length)\\n\\n    for (let i = 0; i < data.length; i++) {\\n      let serverHackLevel = data[i][1];\\n      let serverPortsOpen = data[i][2];\\n      console.log(serverHackLevel, hackLevel, serverPortsOpen, portsOpen)\\n\\n      if (serverHackLevel <= hackLevel && serverPortsOpen <= portsOpen) {\\n        // use a better formula here this just avoids hacking home and dark-net\\n        let value = serverHackLevel * serverPortsOpen;\\n        console.log(value)\\n\\n        if (value > highestValue) {\\n          highestValue = value;\\n          target = data[i][0];\\n        }\\n      }\\n    }\\n    ns.tprint(target);\\n\\n    return target;\\n  }\\n\\n  let target = select_target(hack_level, ports_open, server_data);\\n\\n  console.log(\\\"work.js\\\", \\\"target: \\\" + target, ns.args)\\n\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n  const justhack = false; //true;\\n  const time_options = {\\n  hour: '2-digit',\\n  minute: '2-digit',\\n  second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    ns.print(formattedTime);\\n    if (justhack) {\\n      await ns.hack(target);\\n    } else if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      await ns.grow(target);\\n    } else {\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"qst15\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[717,5],\"dataMap\":{},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1690.4100000002475,\"ramUsage\":2.4,\"server\":\"qst15\",\"scriptKey\":\"work.js*[717,5]\",\"title\":\"work.js 717 5\",\"threads\":6826,\"temporary\":false}}]}},\"qst16\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"qst16\",\"httpPortOpen\":true,\"ip\":\"74.0.8.2\",\"isConnectedTo\":false,\"maxRam\":16384,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  //const data = ns.args[0]\\n  //TODO pass all the main data? might be slow?\\n  const hack_level = ns.args[0];\\n  const ports_open = ns.args[1];\\n\\n  // Gerenate server data, don't hard code\\n  // or use copy pasta fix thisGPT lol\\n  // as you can see below tho, it works.\\n  // scan-analyze 10\\n  // copy the data and ask for it in the right form, sort in python\\n  // server_data.sort(key=lambda x: (x[2], x[1]), reverse=True)\\n  const server_data = [['solaris', 912, 5],\\n  ['defcomm', 903, 5],\\n  ['taiyang-digital', 888, 5],\\n  ['aerocorp', 887, 5],\\n  ['icarus', 885, 5],\\n  ['infocomm', 876, 5],\\n  ['galactic-cyber', 869, 5],\\n  ['omnia', 853, 5],\\n  ['deltaone', 849, 5],\\n  ['syscore', 849, 5],\\n  ['zeus-med', 832, 5],\\n  ['zb-institute', 726, 5],\\n  ['darkweb', 1, 5],\\n  ['univ-energy', 840, 4],\\n  ['unitalife', 813, 4],\\n  ['nova-med', 786, 4],\\n  ['global-pharm', 777, 4],\\n  ['zb-def', 776, 4],\\n  ['snap-fitness', 711, 4],\\n  ['lexo-corp', 689, 4],\\n  ['alpha-ent', 600, 4],\\n  ['aevum-police', 441, 4],\\n  ['millenium-fitness', 525, 3],\\n  ['rho-construction', 510, 3],\\n  ['summit-uni', 466, 3],\\n  ['rothman-uni', 430, 3],\\n  ['catalyst', 409, 3],\\n  ['netlink', 401, 3],\\n  ['I.I.I.I', 340, 3],\\n  ['computek', 320, 3],\\n  ['johnson-ortho', 292, 2],\\n  ['the-hub', 280, 2],\\n  ['crush-fitness', 246, 2],\\n  ['avmnite-02h', 212, 2],\\n  ['omega-net', 205, 2],\\n  ['silver-helix', 150, 2],\\n  ['phantasy', 100, 2],\\n  ['iron-gym', 100, 1],\\n  ['max-hardware', 80, 1],\\n  ['zer0', 75, 1],\\n  ['CSEC', 53, 1],\\n  ['neo-net', 50, 1],\\n  ['harakiri-sushi', 40, 0],\\n  ['hong-fang-tea', 30, 0],\\n  ['nectar-net', 20, 0],\\n  ['joesguns', 10, 0],\\n  ['sigma-cosmetics', 5, 0],\\n  ['n00dles', 1, 0],\\n  ['foodnstuff', 1, 0]]\\n\\n  function select_target(hackLevel, portsOpen, data) {\\n    let highestValue = -1; // Init with a low value\\n    let target = null;\\n    ns.tprint(data.length)\\n\\n    for (let i = 0; i < data.length; i++) {\\n      let serverHackLevel = data[i][1];\\n      let serverPortsOpen = data[i][2];\\n      console.log(serverHackLevel, hackLevel, serverPortsOpen, portsOpen)\\n\\n      if (serverHackLevel <= hackLevel && serverPortsOpen <= portsOpen) {\\n        // use a better formula here this just avoids hacking home and dark-net\\n        let value = serverHackLevel * serverPortsOpen;\\n        console.log(value)\\n\\n        if (value > highestValue) {\\n          highestValue = value;\\n          target = data[i][0];\\n        }\\n      }\\n    }\\n    ns.tprint(target);\\n\\n    return target;\\n  }\\n\\n  let target = select_target(hack_level, ports_open, server_data);\\n\\n  console.log(\\\"work.js\\\", \\\"target: \\\" + target, ns.args)\\n\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n  const justhack = false; //true;\\n  const time_options = {\\n  hour: '2-digit',\\n  minute: '2-digit',\\n  second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    ns.print(formattedTime);\\n    if (justhack) {\\n      await ns.hack(target);\\n    } else if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      await ns.grow(target);\\n    } else {\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"qst16\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[717,5],\"dataMap\":{},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1690.4100000002475,\"ramUsage\":2.4,\"server\":\"qst16\",\"scriptKey\":\"work.js*[717,5]\",\"title\":\"work.js 717 5\",\"threads\":6826,\"temporary\":false}}]}},\"qst17\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"qst17\",\"httpPortOpen\":true,\"ip\":\"48.1.9.0\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  //const data = ns.args[0]\\n  //TODO pass all the main data? might be slow?\\n  const hack_level = ns.args[0];\\n  const ports_open = ns.args[1];\\n\\n  // Gerenate server data, don't hard code\\n  // or use copy pasta fix thisGPT lol\\n  // as you can see below tho, it works.\\n  // scan-analyze 10\\n  // copy the data and ask for it in the right form, sort in python\\n  // server_data.sort(key=lambda x: (x[2], x[1]), reverse=True)\\n  const server_data = [['solaris', 912, 5],\\n  ['defcomm', 903, 5],\\n  ['taiyang-digital', 888, 5],\\n  ['aerocorp', 887, 5],\\n  ['icarus', 885, 5],\\n  ['infocomm', 876, 5],\\n  ['galactic-cyber', 869, 5],\\n  ['omnia', 853, 5],\\n  ['deltaone', 849, 5],\\n  ['syscore', 849, 5],\\n  ['zeus-med', 832, 5],\\n  ['zb-institute', 726, 5],\\n  ['darkweb', 1, 5],\\n  ['univ-energy', 840, 4],\\n  ['unitalife', 813, 4],\\n  ['nova-med', 786, 4],\\n  ['global-pharm', 777, 4],\\n  ['zb-def', 776, 4],\\n  ['snap-fitness', 711, 4],\\n  ['lexo-corp', 689, 4],\\n  ['alpha-ent', 600, 4],\\n  ['aevum-police', 441, 4],\\n  ['millenium-fitness', 525, 3],\\n  ['rho-construction', 510, 3],\\n  ['summit-uni', 466, 3],\\n  ['rothman-uni', 430, 3],\\n  ['catalyst', 409, 3],\\n  ['netlink', 401, 3],\\n  ['I.I.I.I', 340, 3],\\n  ['computek', 320, 3],\\n  ['johnson-ortho', 292, 2],\\n  ['the-hub', 280, 2],\\n  ['crush-fitness', 246, 2],\\n  ['avmnite-02h', 212, 2],\\n  ['omega-net', 205, 2],\\n  ['silver-helix', 150, 2],\\n  ['phantasy', 100, 2],\\n  ['iron-gym', 100, 1],\\n  ['max-hardware', 80, 1],\\n  ['zer0', 75, 1],\\n  ['CSEC', 53, 1],\\n  ['neo-net', 50, 1],\\n  ['harakiri-sushi', 40, 0],\\n  ['hong-fang-tea', 30, 0],\\n  ['nectar-net', 20, 0],\\n  ['joesguns', 10, 0],\\n  ['sigma-cosmetics', 5, 0],\\n  ['n00dles', 1, 0],\\n  ['foodnstuff', 1, 0]]\\n\\n  function select_target(hackLevel, portsOpen, data) {\\n    let highestValue = -1; // Init with a low value\\n    let target = null;\\n    ns.tprint(data.length)\\n\\n    for (let i = 0; i < data.length; i++) {\\n      let serverHackLevel = data[i][1];\\n      let serverPortsOpen = data[i][2];\\n      console.log(serverHackLevel, hackLevel, serverPortsOpen, portsOpen)\\n\\n      if (serverHackLevel <= hackLevel && serverPortsOpen <= portsOpen) {\\n        // use a better formula here this just avoids hacking home and dark-net\\n        let value = serverHackLevel * serverPortsOpen;\\n        console.log(value)\\n\\n        if (value > highestValue) {\\n          highestValue = value;\\n          target = data[i][0];\\n        }\\n      }\\n    }\\n    ns.tprint(target);\\n\\n    return target;\\n  }\\n\\n  let target = select_target(hack_level, ports_open, server_data);\\n\\n  console.log(\\\"work.js\\\", \\\"target: \\\" + target, ns.args)\\n\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n  const justhack = false; //true;\\n  const time_options = {\\n  hour: '2-digit',\\n  minute: '2-digit',\\n  second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    ns.print(formattedTime);\\n    if (justhack) {\\n      await ns.hack(target);\\n    } else if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      await ns.grow(target);\\n    } else {\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"qst17\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[717,5],\"dataMap\":{},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1690.4100000002475,\"ramUsage\":2.4,\"server\":\"qst17\",\"scriptKey\":\"work.js*[717,5]\",\"title\":\"work.js 717 5\",\"threads\":3413,\"temporary\":false}}]}},\"qst18\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"qst18\",\"httpPortOpen\":true,\"ip\":\"63.6.5.9\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  //const data = ns.args[0]\\n  //TODO pass all the main data? might be slow?\\n  const hack_level = ns.args[0];\\n  const ports_open = ns.args[1];\\n\\n  // Gerenate server data, don't hard code\\n  // or use copy pasta fix thisGPT lol\\n  // as you can see below tho, it works.\\n  // scan-analyze 10\\n  // copy the data and ask for it in the right form, sort in python\\n  // server_data.sort(key=lambda x: (x[2], x[1]), reverse=True)\\n  const server_data = [['solaris', 912, 5],\\n  ['defcomm', 903, 5],\\n  ['taiyang-digital', 888, 5],\\n  ['aerocorp', 887, 5],\\n  ['icarus', 885, 5],\\n  ['infocomm', 876, 5],\\n  ['galactic-cyber', 869, 5],\\n  ['omnia', 853, 5],\\n  ['deltaone', 849, 5],\\n  ['syscore', 849, 5],\\n  ['zeus-med', 832, 5],\\n  ['zb-institute', 726, 5],\\n  ['darkweb', 1, 5],\\n  ['univ-energy', 840, 4],\\n  ['unitalife', 813, 4],\\n  ['nova-med', 786, 4],\\n  ['global-pharm', 777, 4],\\n  ['zb-def', 776, 4],\\n  ['snap-fitness', 711, 4],\\n  ['lexo-corp', 689, 4],\\n  ['alpha-ent', 600, 4],\\n  ['aevum-police', 441, 4],\\n  ['millenium-fitness', 525, 3],\\n  ['rho-construction', 510, 3],\\n  ['summit-uni', 466, 3],\\n  ['rothman-uni', 430, 3],\\n  ['catalyst', 409, 3],\\n  ['netlink', 401, 3],\\n  ['I.I.I.I', 340, 3],\\n  ['computek', 320, 3],\\n  ['johnson-ortho', 292, 2],\\n  ['the-hub', 280, 2],\\n  ['crush-fitness', 246, 2],\\n  ['avmnite-02h', 212, 2],\\n  ['omega-net', 205, 2],\\n  ['silver-helix', 150, 2],\\n  ['phantasy', 100, 2],\\n  ['iron-gym', 100, 1],\\n  ['max-hardware', 80, 1],\\n  ['zer0', 75, 1],\\n  ['CSEC', 53, 1],\\n  ['neo-net', 50, 1],\\n  ['harakiri-sushi', 40, 0],\\n  ['hong-fang-tea', 30, 0],\\n  ['nectar-net', 20, 0],\\n  ['joesguns', 10, 0],\\n  ['sigma-cosmetics', 5, 0],\\n  ['n00dles', 1, 0],\\n  ['foodnstuff', 1, 0]]\\n\\n  function select_target(hackLevel, portsOpen, data) {\\n    let highestValue = -1; // Init with a low value\\n    let target = null;\\n    ns.tprint(data.length)\\n\\n    for (let i = 0; i < data.length; i++) {\\n      let serverHackLevel = data[i][1];\\n      let serverPortsOpen = data[i][2];\\n      console.log(serverHackLevel, hackLevel, serverPortsOpen, portsOpen)\\n\\n      if (serverHackLevel <= hackLevel && serverPortsOpen <= portsOpen) {\\n        // use a better formula here this just avoids hacking home and dark-net\\n        let value = serverHackLevel * serverPortsOpen;\\n        console.log(value)\\n\\n        if (value > highestValue) {\\n          highestValue = value;\\n          target = data[i][0];\\n        }\\n      }\\n    }\\n    ns.tprint(target);\\n\\n    return target;\\n  }\\n\\n  let target = select_target(hack_level, ports_open, server_data);\\n\\n  console.log(\\\"work.js\\\", \\\"target: \\\" + target, ns.args)\\n\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n  const justhack = false; //true;\\n  const time_options = {\\n  hour: '2-digit',\\n  minute: '2-digit',\\n  second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    ns.print(formattedTime);\\n    if (justhack) {\\n      await ns.hack(target);\\n    } else if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      await ns.grow(target);\\n    } else {\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"qst18\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[717,5],\"dataMap\":{},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1690.4100000002475,\"ramUsage\":2.4,\"server\":\"qst18\",\"scriptKey\":\"work.js*[717,5]\",\"title\":\"work.js 717 5\",\"threads\":3413,\"temporary\":false}}]}},\"qst19\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"qst19\",\"httpPortOpen\":true,\"ip\":\"38.3.1.5\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  //const data = ns.args[0]\\n  //TODO pass all the main data? might be slow?\\n  const hack_level = ns.args[0];\\n  const ports_open = ns.args[1];\\n\\n  // Gerenate server data, don't hard code\\n  // or use copy pasta fix thisGPT lol\\n  // as you can see below tho, it works.\\n  // scan-analyze 10\\n  // copy the data and ask for it in the right form, sort in python\\n  // server_data.sort(key=lambda x: (x[2], x[1]), reverse=True)\\n  const server_data = [['solaris', 912, 5],\\n  ['defcomm', 903, 5],\\n  ['taiyang-digital', 888, 5],\\n  ['aerocorp', 887, 5],\\n  ['icarus', 885, 5],\\n  ['infocomm', 876, 5],\\n  ['galactic-cyber', 869, 5],\\n  ['omnia', 853, 5],\\n  ['deltaone', 849, 5],\\n  ['syscore', 849, 5],\\n  ['zeus-med', 832, 5],\\n  ['zb-institute', 726, 5],\\n  ['darkweb', 1, 5],\\n  ['univ-energy', 840, 4],\\n  ['unitalife', 813, 4],\\n  ['nova-med', 786, 4],\\n  ['global-pharm', 777, 4],\\n  ['zb-def', 776, 4],\\n  ['snap-fitness', 711, 4],\\n  ['lexo-corp', 689, 4],\\n  ['alpha-ent', 600, 4],\\n  ['aevum-police', 441, 4],\\n  ['millenium-fitness', 525, 3],\\n  ['rho-construction', 510, 3],\\n  ['summit-uni', 466, 3],\\n  ['rothman-uni', 430, 3],\\n  ['catalyst', 409, 3],\\n  ['netlink', 401, 3],\\n  ['I.I.I.I', 340, 3],\\n  ['computek', 320, 3],\\n  ['johnson-ortho', 292, 2],\\n  ['the-hub', 280, 2],\\n  ['crush-fitness', 246, 2],\\n  ['avmnite-02h', 212, 2],\\n  ['omega-net', 205, 2],\\n  ['silver-helix', 150, 2],\\n  ['phantasy', 100, 2],\\n  ['iron-gym', 100, 1],\\n  ['max-hardware', 80, 1],\\n  ['zer0', 75, 1],\\n  ['CSEC', 53, 1],\\n  ['neo-net', 50, 1],\\n  ['harakiri-sushi', 40, 0],\\n  ['hong-fang-tea', 30, 0],\\n  ['nectar-net', 20, 0],\\n  ['joesguns', 10, 0],\\n  ['sigma-cosmetics', 5, 0],\\n  ['n00dles', 1, 0],\\n  ['foodnstuff', 1, 0]]\\n\\n  function select_target(hackLevel, portsOpen, data) {\\n    let highestValue = -1; // Init with a low value\\n    let target = null;\\n    ns.tprint(data.length)\\n\\n    for (let i = 0; i < data.length; i++) {\\n      let serverHackLevel = data[i][1];\\n      let serverPortsOpen = data[i][2];\\n      console.log(serverHackLevel, hackLevel, serverPortsOpen, portsOpen)\\n\\n      if (serverHackLevel <= hackLevel && serverPortsOpen <= portsOpen) {\\n        // use a better formula here this just avoids hacking home and dark-net\\n        let value = serverHackLevel * serverPortsOpen;\\n        console.log(value)\\n\\n        if (value > highestValue) {\\n          highestValue = value;\\n          target = data[i][0];\\n        }\\n      }\\n    }\\n    ns.tprint(target);\\n\\n    return target;\\n  }\\n\\n  let target = select_target(hack_level, ports_open, server_data);\\n\\n  console.log(\\\"work.js\\\", \\\"target: \\\" + target, ns.args)\\n\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n  const justhack = false; //true;\\n  const time_options = {\\n  hour: '2-digit',\\n  minute: '2-digit',\\n  second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    ns.print(formattedTime);\\n    if (justhack) {\\n      await ns.hack(target);\\n    } else if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      await ns.grow(target);\\n    } else {\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"qst19\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[717,5],\"dataMap\":{},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1690.4100000002475,\"ramUsage\":2.4,\"server\":\"qst19\",\"scriptKey\":\"work.js*[717,5]\",\"title\":\"work.js 717 5\",\"threads\":3413,\"temporary\":false}}]}},\"qst20\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"qst20\",\"httpPortOpen\":true,\"ip\":\"61.4.2.9\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  //const data = ns.args[0]\\n  //TODO pass all the main data? might be slow?\\n  const hack_level = ns.args[0];\\n  const ports_open = ns.args[1];\\n\\n  // Gerenate server data, don't hard code\\n  // or use copy pasta fix thisGPT lol\\n  // as you can see below tho, it works.\\n  // scan-analyze 10\\n  // copy the data and ask for it in the right form, sort in python\\n  // server_data.sort(key=lambda x: (x[2], x[1]), reverse=True)\\n  const server_data = [['solaris', 912, 5],\\n  ['defcomm', 903, 5],\\n  ['taiyang-digital', 888, 5],\\n  ['aerocorp', 887, 5],\\n  ['icarus', 885, 5],\\n  ['infocomm', 876, 5],\\n  ['galactic-cyber', 869, 5],\\n  ['omnia', 853, 5],\\n  ['deltaone', 849, 5],\\n  ['syscore', 849, 5],\\n  ['zeus-med', 832, 5],\\n  ['zb-institute', 726, 5],\\n  ['darkweb', 1, 5],\\n  ['univ-energy', 840, 4],\\n  ['unitalife', 813, 4],\\n  ['nova-med', 786, 4],\\n  ['global-pharm', 777, 4],\\n  ['zb-def', 776, 4],\\n  ['snap-fitness', 711, 4],\\n  ['lexo-corp', 689, 4],\\n  ['alpha-ent', 600, 4],\\n  ['aevum-police', 441, 4],\\n  ['millenium-fitness', 525, 3],\\n  ['rho-construction', 510, 3],\\n  ['summit-uni', 466, 3],\\n  ['rothman-uni', 430, 3],\\n  ['catalyst', 409, 3],\\n  ['netlink', 401, 3],\\n  ['I.I.I.I', 340, 3],\\n  ['computek', 320, 3],\\n  ['johnson-ortho', 292, 2],\\n  ['the-hub', 280, 2],\\n  ['crush-fitness', 246, 2],\\n  ['avmnite-02h', 212, 2],\\n  ['omega-net', 205, 2],\\n  ['silver-helix', 150, 2],\\n  ['phantasy', 100, 2],\\n  ['iron-gym', 100, 1],\\n  ['max-hardware', 80, 1],\\n  ['zer0', 75, 1],\\n  ['CSEC', 53, 1],\\n  ['neo-net', 50, 1],\\n  ['harakiri-sushi', 40, 0],\\n  ['hong-fang-tea', 30, 0],\\n  ['nectar-net', 20, 0],\\n  ['joesguns', 10, 0],\\n  ['sigma-cosmetics', 5, 0],\\n  ['n00dles', 1, 0],\\n  ['foodnstuff', 1, 0]]\\n\\n  function select_target(hackLevel, portsOpen, data) {\\n    let highestValue = -1; // Init with a low value\\n    let target = null;\\n    ns.tprint(data.length)\\n\\n    for (let i = 0; i < data.length; i++) {\\n      let serverHackLevel = data[i][1];\\n      let serverPortsOpen = data[i][2];\\n      console.log(serverHackLevel, hackLevel, serverPortsOpen, portsOpen)\\n\\n      if (serverHackLevel <= hackLevel && serverPortsOpen <= portsOpen) {\\n        // use a better formula here this just avoids hacking home and dark-net\\n        let value = serverHackLevel * serverPortsOpen;\\n        console.log(value)\\n\\n        if (value > highestValue) {\\n          highestValue = value;\\n          target = data[i][0];\\n        }\\n      }\\n    }\\n    ns.tprint(target);\\n\\n    return target;\\n  }\\n\\n  let target = select_target(hack_level, ports_open, server_data);\\n\\n  console.log(\\\"work.js\\\", \\\"target: \\\" + target, ns.args)\\n\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n  const justhack = false; //true;\\n  const time_options = {\\n  hour: '2-digit',\\n  minute: '2-digit',\\n  second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    ns.print(formattedTime);\\n    if (justhack) {\\n      await ns.hack(target);\\n    } else if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      await ns.grow(target);\\n    } else {\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"qst20\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[717,5],\"dataMap\":{},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1690.4100000002475,\"ramUsage\":2.4,\"server\":\"qst20\",\"scriptKey\":\"work.js*[717,5]\",\"title\":\"work.js 717 5\",\"threads\":3413,\"temporary\":false}}]}},\"qst21\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"qst21\",\"httpPortOpen\":true,\"ip\":\"46.3.1.8\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  //const data = ns.args[0]\\n  //TODO pass all the main data? might be slow?\\n  const hack_level = ns.args[0];\\n  const ports_open = ns.args[1];\\n\\n  // Gerenate server data, don't hard code\\n  // or use copy pasta fix thisGPT lol\\n  // as you can see below tho, it works.\\n  // scan-analyze 10\\n  // copy the data and ask for it in the right form, sort in python\\n  // server_data.sort(key=lambda x: (x[2], x[1]), reverse=True)\\n  const server_data = [['solaris', 912, 5],\\n  ['defcomm', 903, 5],\\n  ['taiyang-digital', 888, 5],\\n  ['aerocorp', 887, 5],\\n  ['icarus', 885, 5],\\n  ['infocomm', 876, 5],\\n  ['galactic-cyber', 869, 5],\\n  ['omnia', 853, 5],\\n  ['deltaone', 849, 5],\\n  ['syscore', 849, 5],\\n  ['zeus-med', 832, 5],\\n  ['zb-institute', 726, 5],\\n  ['darkweb', 1, 5],\\n  ['univ-energy', 840, 4],\\n  ['unitalife', 813, 4],\\n  ['nova-med', 786, 4],\\n  ['global-pharm', 777, 4],\\n  ['zb-def', 776, 4],\\n  ['snap-fitness', 711, 4],\\n  ['lexo-corp', 689, 4],\\n  ['alpha-ent', 600, 4],\\n  ['aevum-police', 441, 4],\\n  ['millenium-fitness', 525, 3],\\n  ['rho-construction', 510, 3],\\n  ['summit-uni', 466, 3],\\n  ['rothman-uni', 430, 3],\\n  ['catalyst', 409, 3],\\n  ['netlink', 401, 3],\\n  ['I.I.I.I', 340, 3],\\n  ['computek', 320, 3],\\n  ['johnson-ortho', 292, 2],\\n  ['the-hub', 280, 2],\\n  ['crush-fitness', 246, 2],\\n  ['avmnite-02h', 212, 2],\\n  ['omega-net', 205, 2],\\n  ['silver-helix', 150, 2],\\n  ['phantasy', 100, 2],\\n  ['iron-gym', 100, 1],\\n  ['max-hardware', 80, 1],\\n  ['zer0', 75, 1],\\n  ['CSEC', 53, 1],\\n  ['neo-net', 50, 1],\\n  ['harakiri-sushi', 40, 0],\\n  ['hong-fang-tea', 30, 0],\\n  ['nectar-net', 20, 0],\\n  ['joesguns', 10, 0],\\n  ['sigma-cosmetics', 5, 0],\\n  ['n00dles', 1, 0],\\n  ['foodnstuff', 1, 0]]\\n\\n  function select_target(hackLevel, portsOpen, data) {\\n    let highestValue = -1; // Init with a low value\\n    let target = null;\\n    ns.tprint(data.length)\\n\\n    for (let i = 0; i < data.length; i++) {\\n      let serverHackLevel = data[i][1];\\n      let serverPortsOpen = data[i][2];\\n      console.log(serverHackLevel, hackLevel, serverPortsOpen, portsOpen)\\n\\n      if (serverHackLevel <= hackLevel && serverPortsOpen <= portsOpen) {\\n        // use a better formula here this just avoids hacking home and dark-net\\n        let value = serverHackLevel * serverPortsOpen;\\n        console.log(value)\\n\\n        if (value > highestValue) {\\n          highestValue = value;\\n          target = data[i][0];\\n        }\\n      }\\n    }\\n    ns.tprint(target);\\n\\n    return target;\\n  }\\n\\n  let target = select_target(hack_level, ports_open, server_data);\\n\\n  console.log(\\\"work.js\\\", \\\"target: \\\" + target, ns.args)\\n\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n  const justhack = false; //true;\\n  const time_options = {\\n  hour: '2-digit',\\n  minute: '2-digit',\\n  second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    ns.print(formattedTime);\\n    if (justhack) {\\n      await ns.hack(target);\\n    } else if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      await ns.grow(target);\\n    } else {\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"qst21\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[717,5],\"dataMap\":{},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1690.4100000002475,\"ramUsage\":2.4,\"server\":\"qst21\",\"scriptKey\":\"work.js*[717,5]\",\"title\":\"work.js 717 5\",\"threads\":3413,\"temporary\":false}}]}},\"qst22\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"qst22\",\"httpPortOpen\":true,\"ip\":\"92.1.1.9\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  //const data = ns.args[0]\\n  //TODO pass all the main data? might be slow?\\n  const hack_level = ns.args[0];\\n  const ports_open = ns.args[1];\\n\\n  // Gerenate server data, don't hard code\\n  // or use copy pasta fix thisGPT lol\\n  // as you can see below tho, it works.\\n  // scan-analyze 10\\n  // copy the data and ask for it in the right form, sort in python\\n  // server_data.sort(key=lambda x: (x[2], x[1]), reverse=True)\\n  const server_data = [['solaris', 912, 5],\\n  ['defcomm', 903, 5],\\n  ['taiyang-digital', 888, 5],\\n  ['aerocorp', 887, 5],\\n  ['icarus', 885, 5],\\n  ['infocomm', 876, 5],\\n  ['galactic-cyber', 869, 5],\\n  ['omnia', 853, 5],\\n  ['deltaone', 849, 5],\\n  ['syscore', 849, 5],\\n  ['zeus-med', 832, 5],\\n  ['zb-institute', 726, 5],\\n  ['darkweb', 1, 5],\\n  ['univ-energy', 840, 4],\\n  ['unitalife', 813, 4],\\n  ['nova-med', 786, 4],\\n  ['global-pharm', 777, 4],\\n  ['zb-def', 776, 4],\\n  ['snap-fitness', 711, 4],\\n  ['lexo-corp', 689, 4],\\n  ['alpha-ent', 600, 4],\\n  ['aevum-police', 441, 4],\\n  ['millenium-fitness', 525, 3],\\n  ['rho-construction', 510, 3],\\n  ['summit-uni', 466, 3],\\n  ['rothman-uni', 430, 3],\\n  ['catalyst', 409, 3],\\n  ['netlink', 401, 3],\\n  ['I.I.I.I', 340, 3],\\n  ['computek', 320, 3],\\n  ['johnson-ortho', 292, 2],\\n  ['the-hub', 280, 2],\\n  ['crush-fitness', 246, 2],\\n  ['avmnite-02h', 212, 2],\\n  ['omega-net', 205, 2],\\n  ['silver-helix', 150, 2],\\n  ['phantasy', 100, 2],\\n  ['iron-gym', 100, 1],\\n  ['max-hardware', 80, 1],\\n  ['zer0', 75, 1],\\n  ['CSEC', 53, 1],\\n  ['neo-net', 50, 1],\\n  ['harakiri-sushi', 40, 0],\\n  ['hong-fang-tea', 30, 0],\\n  ['nectar-net', 20, 0],\\n  ['joesguns', 10, 0],\\n  ['sigma-cosmetics', 5, 0],\\n  ['n00dles', 1, 0],\\n  ['foodnstuff', 1, 0]]\\n\\n  function select_target(hackLevel, portsOpen, data) {\\n    let highestValue = -1; // Init with a low value\\n    let target = null;\\n    ns.tprint(data.length)\\n\\n    for (let i = 0; i < data.length; i++) {\\n      let serverHackLevel = data[i][1];\\n      let serverPortsOpen = data[i][2];\\n      console.log(serverHackLevel, hackLevel, serverPortsOpen, portsOpen)\\n\\n      if (serverHackLevel <= hackLevel && serverPortsOpen <= portsOpen) {\\n        // use a better formula here this just avoids hacking home and dark-net\\n        let value = serverHackLevel * serverPortsOpen;\\n        console.log(value)\\n\\n        if (value > highestValue) {\\n          highestValue = value;\\n          target = data[i][0];\\n        }\\n      }\\n    }\\n    ns.tprint(target);\\n\\n    return target;\\n  }\\n\\n  let target = select_target(hack_level, ports_open, server_data);\\n\\n  console.log(\\\"work.js\\\", \\\"target: \\\" + target, ns.args)\\n\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n  const justhack = false; //true;\\n  const time_options = {\\n  hour: '2-digit',\\n  minute: '2-digit',\\n  second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    ns.print(formattedTime);\\n    if (justhack) {\\n      await ns.hack(target);\\n    } else if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      await ns.grow(target);\\n    } else {\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"qst22\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[717,5],\"dataMap\":{},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1690.4100000002475,\"ramUsage\":2.4,\"server\":\"qst22\",\"scriptKey\":\"work.js*[717,5]\",\"title\":\"work.js 717 5\",\"threads\":3413,\"temporary\":false}}]}},\"qst23\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"qst23\",\"httpPortOpen\":true,\"ip\":\"95.8.3.8\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  //const data = ns.args[0]\\n  //TODO pass all the main data? might be slow?\\n  const hack_level = ns.args[0];\\n  const ports_open = ns.args[1];\\n\\n  // Gerenate server data, don't hard code\\n  // or use copy pasta fix thisGPT lol\\n  // as you can see below tho, it works.\\n  // scan-analyze 10\\n  // copy the data and ask for it in the right form, sort in python\\n  // server_data.sort(key=lambda x: (x[2], x[1]), reverse=True)\\n  const server_data = [['solaris', 912, 5],\\n  ['defcomm', 903, 5],\\n  ['taiyang-digital', 888, 5],\\n  ['aerocorp', 887, 5],\\n  ['icarus', 885, 5],\\n  ['infocomm', 876, 5],\\n  ['galactic-cyber', 869, 5],\\n  ['omnia', 853, 5],\\n  ['deltaone', 849, 5],\\n  ['syscore', 849, 5],\\n  ['zeus-med', 832, 5],\\n  ['zb-institute', 726, 5],\\n  ['darkweb', 1, 5],\\n  ['univ-energy', 840, 4],\\n  ['unitalife', 813, 4],\\n  ['nova-med', 786, 4],\\n  ['global-pharm', 777, 4],\\n  ['zb-def', 776, 4],\\n  ['snap-fitness', 711, 4],\\n  ['lexo-corp', 689, 4],\\n  ['alpha-ent', 600, 4],\\n  ['aevum-police', 441, 4],\\n  ['millenium-fitness', 525, 3],\\n  ['rho-construction', 510, 3],\\n  ['summit-uni', 466, 3],\\n  ['rothman-uni', 430, 3],\\n  ['catalyst', 409, 3],\\n  ['netlink', 401, 3],\\n  ['I.I.I.I', 340, 3],\\n  ['computek', 320, 3],\\n  ['johnson-ortho', 292, 2],\\n  ['the-hub', 280, 2],\\n  ['crush-fitness', 246, 2],\\n  ['avmnite-02h', 212, 2],\\n  ['omega-net', 205, 2],\\n  ['silver-helix', 150, 2],\\n  ['phantasy', 100, 2],\\n  ['iron-gym', 100, 1],\\n  ['max-hardware', 80, 1],\\n  ['zer0', 75, 1],\\n  ['CSEC', 53, 1],\\n  ['neo-net', 50, 1],\\n  ['harakiri-sushi', 40, 0],\\n  ['hong-fang-tea', 30, 0],\\n  ['nectar-net', 20, 0],\\n  ['joesguns', 10, 0],\\n  ['sigma-cosmetics', 5, 0],\\n  ['n00dles', 1, 0],\\n  ['foodnstuff', 1, 0]]\\n\\n  function select_target(hackLevel, portsOpen, data) {\\n    let highestValue = -1; // Init with a low value\\n    let target = null;\\n    ns.tprint(data.length)\\n\\n    for (let i = 0; i < data.length; i++) {\\n      let serverHackLevel = data[i][1];\\n      let serverPortsOpen = data[i][2];\\n      console.log(serverHackLevel, hackLevel, serverPortsOpen, portsOpen)\\n\\n      if (serverHackLevel <= hackLevel && serverPortsOpen <= portsOpen) {\\n        // use a better formula here this just avoids hacking home and dark-net\\n        let value = serverHackLevel * serverPortsOpen;\\n        console.log(value)\\n\\n        if (value > highestValue) {\\n          highestValue = value;\\n          target = data[i][0];\\n        }\\n      }\\n    }\\n    ns.tprint(target);\\n\\n    return target;\\n  }\\n\\n  let target = select_target(hack_level, ports_open, server_data);\\n\\n  console.log(\\\"work.js\\\", \\\"target: \\\" + target, ns.args)\\n\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n  const justhack = false; //true;\\n  const time_options = {\\n  hour: '2-digit',\\n  minute: '2-digit',\\n  second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    ns.print(formattedTime);\\n    if (justhack) {\\n      await ns.hack(target);\\n    } else if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      await ns.grow(target);\\n    } else {\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"qst23\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[717,5],\"dataMap\":{},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1690.4100000002475,\"ramUsage\":2.4,\"server\":\"qst23\",\"scriptKey\":\"work.js*[717,5]\",\"title\":\"work.js 717 5\",\"threads\":3413,\"temporary\":false}}]}},\"qst24\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"qst24\",\"httpPortOpen\":true,\"ip\":\"87.5.6.1\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  //const data = ns.args[0]\\n  //TODO pass all the main data? might be slow?\\n  const hack_level = ns.args[0];\\n  const ports_open = ns.args[1];\\n\\n  // Gerenate server data, don't hard code\\n  // or use copy pasta fix thisGPT lol\\n  // as you can see below tho, it works.\\n  // scan-analyze 10\\n  // copy the data and ask for it in the right form, sort in python\\n  // server_data.sort(key=lambda x: (x[2], x[1]), reverse=True)\\n  const server_data = [['solaris', 912, 5],\\n  ['defcomm', 903, 5],\\n  ['taiyang-digital', 888, 5],\\n  ['aerocorp', 887, 5],\\n  ['icarus', 885, 5],\\n  ['infocomm', 876, 5],\\n  ['galactic-cyber', 869, 5],\\n  ['omnia', 853, 5],\\n  ['deltaone', 849, 5],\\n  ['syscore', 849, 5],\\n  ['zeus-med', 832, 5],\\n  ['zb-institute', 726, 5],\\n  ['darkweb', 1, 5],\\n  ['univ-energy', 840, 4],\\n  ['unitalife', 813, 4],\\n  ['nova-med', 786, 4],\\n  ['global-pharm', 777, 4],\\n  ['zb-def', 776, 4],\\n  ['snap-fitness', 711, 4],\\n  ['lexo-corp', 689, 4],\\n  ['alpha-ent', 600, 4],\\n  ['aevum-police', 441, 4],\\n  ['millenium-fitness', 525, 3],\\n  ['rho-construction', 510, 3],\\n  ['summit-uni', 466, 3],\\n  ['rothman-uni', 430, 3],\\n  ['catalyst', 409, 3],\\n  ['netlink', 401, 3],\\n  ['I.I.I.I', 340, 3],\\n  ['computek', 320, 3],\\n  ['johnson-ortho', 292, 2],\\n  ['the-hub', 280, 2],\\n  ['crush-fitness', 246, 2],\\n  ['avmnite-02h', 212, 2],\\n  ['omega-net', 205, 2],\\n  ['silver-helix', 150, 2],\\n  ['phantasy', 100, 2],\\n  ['iron-gym', 100, 1],\\n  ['max-hardware', 80, 1],\\n  ['zer0', 75, 1],\\n  ['CSEC', 53, 1],\\n  ['neo-net', 50, 1],\\n  ['harakiri-sushi', 40, 0],\\n  ['hong-fang-tea', 30, 0],\\n  ['nectar-net', 20, 0],\\n  ['joesguns', 10, 0],\\n  ['sigma-cosmetics', 5, 0],\\n  ['n00dles', 1, 0],\\n  ['foodnstuff', 1, 0]]\\n\\n  function select_target(hackLevel, portsOpen, data) {\\n    let highestValue = -1; // Init with a low value\\n    let target = null;\\n    ns.tprint(data.length)\\n\\n    for (let i = 0; i < data.length; i++) {\\n      let serverHackLevel = data[i][1];\\n      let serverPortsOpen = data[i][2];\\n      console.log(serverHackLevel, hackLevel, serverPortsOpen, portsOpen)\\n\\n      if (serverHackLevel <= hackLevel && serverPortsOpen <= portsOpen) {\\n        // use a better formula here this just avoids hacking home and dark-net\\n        let value = serverHackLevel * serverPortsOpen;\\n        console.log(value)\\n\\n        if (value > highestValue) {\\n          highestValue = value;\\n          target = data[i][0];\\n        }\\n      }\\n    }\\n    ns.tprint(target);\\n\\n    return target;\\n  }\\n\\n  let target = select_target(hack_level, ports_open, server_data);\\n\\n  console.log(\\\"work.js\\\", \\\"target: \\\" + target, ns.args)\\n\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n  const justhack = false; //true;\\n  const time_options = {\\n  hour: '2-digit',\\n  minute: '2-digit',\\n  second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    ns.print(formattedTime);\\n    if (justhack) {\\n      await ns.hack(target);\\n    } else if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      await ns.grow(target);\\n    } else {\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"qst24\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[717,5],\"dataMap\":{},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1690.4100000002475,\"ramUsage\":2.4,\"server\":\"qst24\",\"scriptKey\":\"work.js*[717,5]\",\"title\":\"work.js 717 5\",\"threads\":3413,\"temporary\":false}}]}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.452,\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.0045,\"playerReputation\":0}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.003,\"playerReputation\":0}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":9.7742,\"isBanned\":false,\"isMember\":true,\"playerReputation\":6409.7117791135315}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":118.0187,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":56.4162,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":true,\"isMember\":false,\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":true,\"isMember\":false,\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":true,\"isMember\":false,\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":11.6129,\"isBanned\":false,\"isMember\":true,\"playerReputation\":65722.97596139731}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":true,\"isMember\":false,\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":52.586,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Shadows of Anarchy\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}}}","AliasesSave":"{\"s\":\"scan-analyze\",\"a\":\"analyze\",\"b\":\"backdoor\",\"sp\":\"run ServerProfiler.exe\"}","GlobalAliasesSave":"{}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":10,\"AutoexecScript\":\"\",\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"EnableHistorySearch\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxRecentScriptsCapacity\":50,\"MaxLogCapacity\":40,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"RemoteFileApiPort\":0,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":true,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":false,\"ShowMiddleNullTimeUnit\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":-66,\"y\":0,\"opened\":false},\"EditorTheme\":{\"common\":{\"accent\":\"B5CEA8\",\"bg\":\"1E1E1E\",\"fg\":\"D4D4D4\"},\"syntax\":{\"tag\":\"569CD6\",\"entity\":\"569CD6\",\"string\":\"CE9178\",\"regexp\":\"646695\",\"markup\":\"569CD6\",\"keyword\":\"569CD6\",\"comment\":\"6A9955\",\"constant\":\"569CD6\",\"error\":\"F44747\"},\"ui\":{\"line\":\"1E1E1E\",\"panel\":{\"bg\":\"252526\",\"selected\":\"252526\",\"border\":\"1E1E1E\"},\"selection\":{\"bg\":\"ADD6FF26\"}},\"base\":\"vs-dark\",\"inherit\":true},\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":2,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":true,\"MonacoTabSize\":2,\"MonacoDetectIndentation\":false,\"MonacoFontFamily\":\"Lucida Console\",\"MonacoFontSize\":20,\"MonacoFontLigatures\":false,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"MonacoCursorStyle\":\"line\",\"MonacoCursorBlinking\":\"blink\",\"hideTrailingDecimalZeros\":false,\"hideThousandsSeparator\":false,\"useEngineeringNotation\":false,\"disableSuffixes\":false}","VersionSave":"35","AllGangsSave":"","LastExportBonus":"1698661662164","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"fragments\":[],\"isBonusCharging\":false,\"storedCycles\":0}}"}}