{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hp\":{\"current\":12,\"max\":12},\"skills\":{\"hacking\":1502,\"strength\":26,\"defense\":23,\"dexterity\":30,\"agility\":22,\"charisma\":25,\"intelligence\":0},\"exp\":{\"hacking\":93287627557.79382,\"strength\":288.7119640589503,\"defense\":288.7119640589503,\"dexterity\":288.7119640589503,\"agility\":329.3479272182129,\"charisma\":288.7119640589503,\"intelligence\":0},\"mults\":{\"hacking_chance\":1.6179938241437166,\"hacking_speed\":1.6099130842961158,\"hacking_money\":2.7036023876121815,\"hacking_grow\":1.6191174916829445,\"hacking\":2.4694768238925517,\"strength\":1.7875057108179706,\"defense\":1.5543527920156268,\"dexterity\":2.0645690959947562,\"agility\":1.3600586930136735,\"charisma\":1.7097880712171896,\"hacking_exp\":3.2602470831976538,\"strength_exp\":1.6385469015831402,\"defense_exp\":1.6385469015831402,\"dexterity_exp\":1.6385469015831402,\"agility_exp\":1.6385469015831402,\"charisma_exp\":1.6385469015831402,\"company_rep\":2.1628819100897445,\"faction_rep\":1.63854690158314,\"crime_money\":1.2952939933463556,\"crime_success\":1.2952939933463556,\"hacknet_node_money\":1.2952939933463556,\"hacknet_node_purchase_cost\":0.7720255055120939,\"hacknet_node_ram_cost\":0.7720255055120939,\"hacknet_node_core_cost\":0.7720255055120939,\"hacknet_node_level_cost\":0.7720255055120939,\"work_money\":1.4248233926809912,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":26,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"DataJack\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Augmented Targeting II\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core Implant\"},{\"level\":1,\"name\":\"Enhanced Myelin Sheathing\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen IV\"},{\"level\":1,\"name\":\"The Black Hand\"},{\"level\":1,\"name\":\"Neuroreceptor Management Implant\"},{\"level\":1,\"name\":\"Nanofiber Weave\"},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":1,\"name\":\"Nuoptimal Nootropic Injector Implant\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"Speech Enhancement\"}],\"queuedAugmentations\":[{\"level\":1,\"name\":\"Neuregen Gene Modification\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core V2 Upgrade\"},{\"level\":1,\"name\":\"BitRunners Neurolink\"},{\"level\":1,\"name\":\"Artificial Bio-neural Network Implant\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen V\"},{\"level\":1,\"name\":\"Neural Accelerator\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"INFRARET Enhancement\"},{\"level\":1,\"name\":\"Combat Rib I\"},{\"level\":1,\"name\":\"NutriGen Implant\"}],\"city\":\"Sector-12\",\"bitNodeN\":1,\"corporation\":null,\"gang\":null,\"bladeburner\":null,\"currentServer\":\"home\",\"factions\":[\"BitRunners\",\"The Black Hand\",\"NiteSec\",\"Chongqing\",\"Ishima\",\"New Tokyo\",\"Netburners\",\"Tian Di Hui\",\"CyberSec\"],\"factionInvitations\":[],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":11879.541734297241,\"onlineTimeSeconds\":55704.99999975036,\"ram\":64,\"totalMoneyGenerated\":661697648.2603674,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":11879.541734297241,\"onlineTimeSeconds\":55691.19999975056,\"ram\":64,\"totalMoneyGenerated\":661556641.7468784,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":11879.541734297241,\"onlineTimeSeconds\":55666.79999975092,\"ram\":64,\"totalMoneyGenerated\":660554803.4433177,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":11879.541734297241,\"onlineTimeSeconds\":55666.39999975092,\"ram\":64,\"totalMoneyGenerated\":660937325.318988,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":11879.541734297241,\"onlineTimeSeconds\":55665.99999975093,\"ram\":64,\"totalMoneyGenerated\":660682059.443222,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":11879.541734297241,\"onlineTimeSeconds\":55665.79999975093,\"ram\":64,\"totalMoneyGenerated\":660811510.9988519,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":11879.541734297241,\"onlineTimeSeconds\":55665.599999750935,\"ram\":64,\"totalMoneyGenerated\":660622393.3980862,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":11879.541734297241,\"onlineTimeSeconds\":55665.39999975094,\"ram\":64,\"totalMoneyGenerated\":660675874.9018422,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":11879.541734297241,\"onlineTimeSeconds\":55665.19999975094,\"ram\":64,\"totalMoneyGenerated\":660706635.7358723,\"name\":\"hacknet-node-8\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":11879.541734297241,\"onlineTimeSeconds\":55664.999999750944,\"ram\":64,\"totalMoneyGenerated\":659744880.8386579,\"name\":\"hacknet-node-9\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":11879.541734297241,\"onlineTimeSeconds\":55664.999999750944,\"ram\":64,\"totalMoneyGenerated\":659771479.5389717,\"name\":\"hacknet-node-10\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":11879.541734297241,\"onlineTimeSeconds\":55664.79999975095,\"ram\":64,\"totalMoneyGenerated\":659792391.8167139,\"name\":\"hacknet-node-11\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":11879.541734297241,\"onlineTimeSeconds\":55664.59999975095,\"ram\":64,\"totalMoneyGenerated\":659861292.0206109,\"name\":\"hacknet-node-12\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":11879.541734297241,\"onlineTimeSeconds\":55664.39999975095,\"ram\":64,\"totalMoneyGenerated\":659840573.4427965,\"name\":\"hacknet-node-13\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":11879.541734297241,\"onlineTimeSeconds\":55663.99999975096,\"ram\":64,\"totalMoneyGenerated\":659822459.4750373,\"name\":\"hacknet-node-14\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":11879.541734297241,\"onlineTimeSeconds\":55663.79999975096,\"ram\":64,\"totalMoneyGenerated\":659888973.6396925,\"name\":\"hacknet-node-15\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":11879.541734297241,\"onlineTimeSeconds\":55663.599999750964,\"ram\":64,\"totalMoneyGenerated\":659915181.2975013,\"name\":\"hacknet-node-16\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":11879.541734297241,\"onlineTimeSeconds\":55655.79999975108,\"ram\":64,\"totalMoneyGenerated\":659938185.0307646,\"name\":\"hacknet-node-17\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":11879.541734297241,\"onlineTimeSeconds\":55655.59999975108,\"ram\":64,\"totalMoneyGenerated\":660006181.2394223,\"name\":\"hacknet-node-18\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":11879.541734297241,\"onlineTimeSeconds\":55655.399999751084,\"ram\":64,\"totalMoneyGenerated\":659990213.7011253,\"name\":\"hacknet-node-19\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":11879.541734297241,\"onlineTimeSeconds\":55655.399999751084,\"ram\":64,\"totalMoneyGenerated\":659967272.1419736,\"name\":\"hacknet-node-20\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":11879.541734297241,\"onlineTimeSeconds\":55655.19999975109,\"ram\":64,\"totalMoneyGenerated\":660059917.0239745,\"name\":\"hacknet-node-21\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":11879.541734297241,\"onlineTimeSeconds\":55654.99999975109,\"ram\":64,\"totalMoneyGenerated\":660085311.043348,\"name\":\"hacknet-node-22\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":11879.541734297241,\"onlineTimeSeconds\":55654.79999975109,\"ram\":64,\"totalMoneyGenerated\":660105929.5044981,\"name\":\"hacknet-node-23\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":11879.541734297241,\"onlineTimeSeconds\":55654.599999751095,\"ram\":64,\"totalMoneyGenerated\":660036160.660623,\"name\":\"hacknet-node-24\"}}],\"has4SData\":true,\"has4SDataTixApi\":true,\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0,\"Company Favor\":0}}},\"hasTixApiAccess\":true,\"hasWseAccount\":true,\"jobs\":{\"Galactic Cybersystems\":\"Software Consultant\",\"Omnia Cybersystems\":\"Software Engineering Intern\",\"NWO\":\"Software Engineering Intern\"},\"karma\":0,\"numPeopleKilled\":0,\"location\":\"Alpha Enterprises\",\"money\":1970827524872.8706,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-4017.6000000000045,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":8262968105499.172,\"hacknet\":16507071293.738592,\"hacknet_expenses\":-12237534023.819199,\"hospitalization\":-4734000,\"infiltration\":0,\"sleeves\":0,\"stock\":-31879971607.750565,\"total\":1970826524872.8706,\"work\":0,\"servers\":-6023944835384.0625,\"other\":-5315299703.011465,\"augmentations\":-235266273595.11078}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":2,\"class\":-7552969.599999988,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":9187260678557.154,\"hacknet\":16691374007.491259,\"hacknet_expenses\":-12608843969.535343,\"hospitalization\":-4734000,\"infiltration\":0,\"sleeves\":0,\"stock\":-31879971607.750565,\"total\":2020691800893.393,\"work\":171232.34315451948,\"servers\":-6694112996060.114,\"other\":-11245299703.011465,\"augmentations\":-433401024996.3242}},\"playtimeSinceLastAug\":125987200,\"playtimeSinceLastBitnode\":422423200,\"lastAugReset\":1698732592888,\"lastNodeReset\":-1,\"purchasedServers\":[\"qst0\",\"qst1\",\"qst2\",\"qst3\",\"qst4\",\"qst5\",\"qst6\",\"qst7\",\"qst8\",\"qst9\",\"qst10\",\"qst11\",\"qst12\",\"qst13\",\"qst14\",\"qst15\",\"qst16\",\"qst17\",\"qst18\",\"qst19\",\"qst20\",\"qst21\",\"qst22\",\"qst23\",\"qst24\"],\"scriptProdSinceLastAug\":8262673554660.541,\"sleeves\":[],\"sleevesFromCovenant\":0,\"sourceFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"exploits\":[],\"achievements\":[{\"ID\":\"NS2\",\"unlockedOn\":1698436228268},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1698437728271},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1698439954470},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1698440074470},{\"ID\":\"TOR\",\"unlockedOn\":1698441394471},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1698445474475},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1698450814473},{\"ID\":\"NITESEC\",\"unlockedOn\":1698458984259},{\"ID\":\"TRAVEL\",\"unlockedOn\":1698461504266},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1698475673059},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1698477953067},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1698517313063},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1698534473061},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1698534473065},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1698541673062},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1698691760381},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1698692420382},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1698692540383},{\"ID\":\"4S\",\"unlockedOn\":1698811804980},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1698813184987},{\"ID\":\"DISCOUNT\",\"unlockedOn\":1698813724987}],\"terminalCommandHistory\":[\"b\",\"s 10\",\"b\",\"p 1-\",\"p 10\",\"s 10\",\"a\",\"b\",\"ls\",\"l\",\"ls\",\"run contract-372792.cct \",\"ls\",\"a\",\"b\",\"ls\",\"s 10\",\"ls\",\"a\",\"b\",\"run contract-924189-TianDiHui.cct \",\"ls\",\"b\",\"ls\",\"s 10\",\"l\",\"alias l=\\\"ls\\\"\",\"l\",\"ls 10\",\"s 10\",\"a\",\"b\",\"vim eat-noodles.js\",\"ls\",\"vim eat-noodles.js\",\"run eat-noodles.js \",\"scp eat-noodles.js home \",\"ls\",\"home\",\"ls\",\"run eat-noodles.js \",\"vim eat-noodles.js \",\"run eat-noodles.js \",\"vim eat-noodles.js \",\"run eat-noodles.js \",\"vim eat-noodles.js \",\"lx\",\"lz\",\"ls\",\"run main.js \"],\"lastUpdate\":1698858580175,\"lastSave\":1698858532978,\"totalPlaytime\":422423200,\"currentWork\":{\"ctor\":\"FactionWork\",\"data\":{\"type\":\"FACTION\",\"singularity\":false,\"cyclesWorked\":227013,\"factionWorkType\":\"hacking\",\"factionName\":\"BitRunners\"}},\"focus\":false,\"entropy\":0,\"identifier\":\"1f5c81e4d12ce2\"}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":5,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":true,\"ip\":\"59.5.7.3\",\"isConnectedTo\":true,\"maxRam\":65536,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\",\"j4.msg\",\"19dfj3l1nd.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"BruteSSH.exe\",\"fl1ght.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"HTTPWorm.exe\",\"DeepscanV1.exe\",\"AutoLink.exe\",\"SQLInject.exe\",\"DeepscanV2.exe\",\"ServerProfiler.exe\",\"Formulas.exe\"],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"home\"}}],[\"purchase-servers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// purchase-servers.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://github.com/qst0/bitburner/blob/main/work.js work.js\\n// wget https://github.com/qst0/bitburner/blob/main/purchase-servers.js purchase-servers.js\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const ram = 4;\\n    const mem_work = ns.getScriptRam('work.js')\\n    const hostname_prefix = 'qst';\\n    let i = 0;\\n    while (i < ns.getPurchasedServerLimit()) {\\n        if (ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram)) {\\n            let hostname = hostname_prefix + i\\n            ns.purchaseServer(hostname, ram);\\n            ns.scp(\\\"work.js\\\", hostname);\\n            ns.exec(\\\"work.js\\\", hostname, Math.floor(ram/mem_work));\\n            ++i;\\n        }\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"purchase-servers.js\",\"server\":\"home\"}}],[\"upgrade_servers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  const hostname_prefix = 'qst';\\n  while (true) {\\n    let i = 0;\\n    for (let i = 0; i < ns.getPurchasedServerLimit(); i++) {\\n      let hostname = hostname_prefix + i\\n      let money = ns.getServerMoneyAvailable(\\\"home\\\")\\n      let ram = ns.getServerMaxRam(hostname) * 2\\n      let cost = ns.getPurchasedServerCost(ram)\\n      console.log(money, ram, cost)\\n      if (money > cost) {\\n        ns.upgradePurchasedServer(hostname, ram);\\n      }\\n      await ns.sleep(1000);\\n    }\\n  }\\n}\",\"filename\":\"upgrade_servers.js\",\"server\":\"home\"}}],[\"main.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// main.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/main.js main.js\\n\\n/** @param {import(\\\".\\\").NS } ns */\\n\\n//        //  \\n/* CONFIG */\\n//        //\\n\\nconst this_filename = 'core.js'\\nconst work_script_filename = 'work.js'\\nconst hostname_prefix = 'qst';\\nlet upgrade_servers_on = false;\\nlet deploy_on = false;\\nlet server_dict = localStorage.getItem('server_dict');\\n\\nif (!server_dict) {\\n  console.log(\\\"Setting server_dict for the first time\\\")\\n  server_dict = {}\\n  localStorage.setItem('server_dict', JSON.stringify(server_dict));\\n} else {\\n  server_dict = JSON.parse(server_dict);\\n  console.log(\\\"Loaded Server Data from localStorage:\\\", server_dict, Object.keys(server_dict).length)\\n}\\n\\nlet server_dict_len = Object.keys(server_dict).length;\\n// prepare ns update_data vars\\nlet mem_main, mem_work, home_ram, hacking_level, server_limit, money, ports_open;\\n\\n//      //\\n/* MAIN */\\n//      //\\nexport async function main(ns) {\\n  const main_version = 0.3\\n  ns.print(\\\"Main version: \\\"+ main_version)\\n\\n  console.log(\\\"ns:\\\", ns);\\n  ns.tprint('Program START');\\n  //Print the args in the console, if there are any\\n  if (ns.args.length) {\\n    let msg = \\\" \\\"\\n    for (let i = 0; i < ns.args.length; i++) {\\n      msg = msg + \\\" \\\" + ns.args[i]\\n    }\\n    console.log(msg.trim())\\n  }\\n\\n  //.......//\\n  // Flags //\\n  //.......//\\n  // Setup the flags\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"purchase-servers\\\", false],\\n    [\\\"buy\\\", false],\\n    [\\\"deploy\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"This is the main qst script.\\\");\\n    ns.tprint(`Usage: run ${ns.getScriptName()}`);\\n    ns.tprint(\\\"Example:\\\");\\n    ns.tprint(`> run ${ns.getScriptName()}`);\\n    ns.tprint(\\\"Flags: --help            - This message\\\");\\n    ns.tprint(\\\"       --purchase-severs - Purchase the first round of servers\\\");\\n    return;\\n  } else if (args.purchase_servers || args.buy) {\\n    purchase_servers()\\n  } else if (args.deploy) {\\n    deploy_on = true;\\n  }\\n\\n  //            //\\n  /* FUNCTIONS  */\\n  //            //\\n\\n  function save_server_dict() { // to localStorage\\n    localStorage.setItem('server_dict', JSON.stringify(server_dict));\\n    server_dict_len = Object.keys(server_dict).length;\\n    //console.log(server_dict, server_dict_len)\\n  }\\n\\n\\n  function update_data() {\\n    mem_main = ns.getScriptRam(this_filename);\\n    console.log(\\\"mem_main\\\", mem_main)\\n    if (mem_main == 0) {\\n      mem_main = 7.45\\n    }\\n    mem_work = ns.getScriptRam(work_script_filename)\\n    home_ram = ns.getServerMaxRam(\\\"home\\\")\\n    hacking_level = ns.getHackingLevel()\\n    server_limit = ns.getPurchasedServerLimit()\\n    money = ns.getServerMoneyAvailable(\\\"home\\\")\\n    // if we get a new hacking program, we need to know.\\n    // for now, just always recheck on update to confirm\\n    ports_open = 0;\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n      ports_open++;\\n    }\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n      ports_open++;\\n    }\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n      ports_open++;\\n    }\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n      ports_open++;\\n    }\\n    if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n      ports_open++;\\n    }\\n  }\\n\\n  // Discover other servers\\n  function discover_servers(current_server) {\\n    const server_list = ns.scan(current_server);\\n    for (const server of server_list) {\\n      if (!server_dict.hasOwnProperty(server)) {\\n        server_dict[server] = ns.getServer(server);\\n      }\\n    }\\n  }\\n\\n  // USES HARD DATA FROM TOP OF FILE. TODO use SERVER DATA/DICT\\n  function select_target(hackLevel, portsOpen) {\\n    let highestValue = -1; // Init with a low value\\n    let target = null;\\n    Object.getOwnPropertyNames(server_dict).forEach((key) => {\\n      let serverHackLevel = server_dict[key]['requiredHackingSkill'];\\n      let numOpenPortsRequired = server_dict[key]['numOpenPortsRequired'];\\n      if ((serverHackLevel <= (hackLevel/2)) && numOpenPortsRequired <= portsOpen) {\\n        // Hacklevel/2 suggetion read from discord\\n        // use a better formula here? this just avoids hacking home and dark-net\\n        let value = serverHackLevel // * serverPortsOpen;\\n        if (value > highestValue) {\\n          highestValue = value;\\n          target = key;\\n        }\\n      }\\n    });\\n    console.log(\\\"Targeting: \\\", target,\\n     \\\"Hacking Level: \\\", hackLevel,\\n    \\\"Hack Req: \\\", highestValue,\\n    \\\"Difficulty: \\\", server_dict[target]['hackDifficulty'])\\n    return target;\\n  }\\n\\nfunction run_each_server(hostnames) {\\n  let servers_deployed_to = 0\\n  for (const hostname in hostnames) {\\n    let server = ns.getServer(hostname)\\n    discover_servers(hostname)\\n\\n    if (!server.hasAdminRights || server.openPortCount < ports_open) {\\n      if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(hostname)\\n      }\\n      if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n        ns.ftpcrack(hostname)\\n      }\\n      if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n        ns.relaysmtp(hostname)\\n      }\\n      if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n        ns.httpworm(hostname)\\n      }\\n      if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n        ns.sqlinject(hostname)\\n      }\\n\\n      if (server.openPortCount >= server.numOpenPortsRequired) {\\n        ns.nuke(hostname);\\n      }\\n    }\\n\\n    if (deploy_on && server.maxRam > mem_work && server.hostname != 'home') {\\n      ns.scp(work_script_filename, hostname)\\n      ns.killall(hostname)\\n      hacking_level = ns.getHackingLevel()\\n      target = select_target(hacking_level, ports_open)\\n      ns.exec(work_script_filename, hostname, Math.floor(server.maxRam / mem_work),\\n        target, server_dict[target].moneyMax, server_dict[target].minDifficulty)\\n      servers_deployed_to++;\\n    }\\n\\n  }\\n  // Finished roll out, turn it off.\\n  if (deploy_on) {\\n    console.log(\\\"Finished deploying workers to \\\" + servers_deployed_to + \\\" servers!\\\")\\n    deploy_on = false;\\n  }\\n\\n}\\n\\n\\n//..................//\\n// async functions  //\\n//..................//\\n\\nasync function purchase_servers() {\\n  ns.exec('purchase-servers.js', 'home')\\n  ns.tprint(\\\"ERROR: Please `run purchase-servers.js` instead\\\")\\n  /* \\n  const purchase_ram = 4;\\n  let i = 0;\\n  while (i < ns.getPurchasedServerLimit()) {\\n    if (money > ns.getPurchasedServerCost(purchase_ram)) {\\n      let hostname = hostname_prefix + i\\n      ns.purchaseServer(hostname, purchase_ram);\\n      ns.scp(work_script_filename, hostname);\\n      ns.exec(work_script_filename, hostname, Math.floor(purchase_ram / mem_work));\\n      ++i;\\n    }\\n    await ns.sleep(1000);\\n  }\\n  */\\n}\\n\\nasync function upgrade_servers() {\\n  for (let i = 0; i < server_limit; i++) {\\n    let hostname = hostname_prefix + i\\n    let ram = ns.getServerMaxRam(hostname) * 2\\n    let cost = ns.getPurchasedServerCost(ram)\\n    if (money > cost) {\\n      console.log(\\\"Upgrading \\\" + hostname + \\\" to \\\" + ram)\\n      ns.upgradePurchasedServer(hostname, ram);\\n      //spin up another worker\\n      ns.killall(hostname)\\n      let target = select_target(hacking_level, ports_open)\\n      ns.exec(work_script_filename, hostname, Math.floor(ram / mem_work),\\n        target, server_dict[target].moneyMax, server_dict[target].minDifficulty)\\n\\n    } else {\\n      //console.log(\\\"Cannot Upgrade \\\" + hostname + \\\" to \\\" + ram + \\\"\\\\n\\\" +\\n      //\\\"$\\\" + Math.floor(money) + \\\" < Cost $\\\" + cost + \\\"\\\\n\\\" +\\n      //\\\"Short $\\\" + Math.floor(cost - money))\\n    }\\n    await ns.sleep(500);\\n  }\\n}\\n\\n// Home Work\\nupdate_data(); // Make sure we have the most up to date data\\nns.killall('home') // it doesn't stop itself ;-)\\nconsole.log(\\\"homeram\\\", home_ram)\\nconsole.log(\\\"memmain\\\", mem_main)\\nlet home_mem_left = home_ram - mem_main\\nconsole.log(\\\"home_mem_left\\\", home_ram - mem_main)\\nlet target = select_target(hacking_level, ports_open)\\nlet threads = Math.floor(home_mem_left / mem_work)\\nconsole.log(\\\"threads\\\", threads)\\nconsole.log(\\\"target\\\", target)\\nlet moneyMax = 1000000000\\nlet minDifficulty = 100\\nif (server_dict[target]) {\\n  moneyMax = server_dict[target].moneyMax;\\n  minDifficulty = server_dict[target].minDifficulty;\\n}\\nns.exec(\\n  work_script_filename,\\n  \\\"home\\\",\\n  threads,\\n  target,\\n  moneyMax,\\n  minDifficulty\\n)\\n\\n// Functions END\\nlet question = \\\"Would you like to configure?\\\"\\nlet reset_config = await (ns.prompt(question))\\n\\n// Yes or No Prompt Interactive Configuration\\nif (reset_config) {\\n  question = \\\"Reset local storage?\\\"\\n  if (await (ns.prompt(question))) {\\n    console.log(\\\"RESETTING LOCAL STORAGE\\\")\\n    ns.tprint(\\\"RESETING LOCAL STORAGE\\\")\\n    localStorage.clear()\\n  }\\n\\n  question = \\\"Deploy on all servers?\\\"\\n  deploy_on = await (ns.prompt(question))\\n\\n  question = \\\"Upgrade servers?\\\"\\n  upgrade_servers_on = await (ns.prompt(question))\\n\\n  reset_config = false;\\n}\\n\\n// Move these to config?\\nlet searching = true;\\ndiscover_servers('home')\\nlet known_highest_server_count = 96;\\n\\nwhile (searching || upgrade_servers_on) {\\n  update_data();\\n  if (searching) {\\n    run_each_server(server_dict);\\n    save_server_dict();\\n    // TODO is this true? I'm done searching if I find 96 servers\\n    if (server_dict_len >= known_highest_server_count) {\\n      console.log(\\\"search complete\\\", server_dict, server_dict_len)\\n      searching = false;\\n    }\\n  }\\n  if (upgrade_servers_on) {\\n    await upgrade_servers()\\n  }\\n  console.log(\\\"cycle complete\\\")\\n  await ns.sleep(1000)\\n}\\nns.tprint('Program END');\\n}\",\"filename\":\"main.js\",\"server\":\"home\"}}],[\"autocomplete.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// autocomplete.js\\n// Bitburner v2.5.0\\n// wget https://github.com/qst0/bitburner/blob/main/autocomplete.js autocomplete.js\\n\\n// Autocomplete in vscode using :\\n\\n/** @param {import(\\\".\\\").NS } ns */\\n\\n// https://github.com/bitburner-official/bitburner-src/blob/stable/src/ScriptEditor/NetscriptDefinitions.d.ts\\n// save this file as 'index.d.ts'\\n// in the directory where you edit your scripts. \\n\\n\\nexport async function main(ns) {\\n  ns.tprint(\\\"INFO No need to run this script, it's an example.\\\")\\n  ns.tprint(\\\"ERROR Did you make sure to follow the instructions?\\\")\\n  ns.tprint(\\\"SUCCESS you now have autocomplete for all `ns.` commands.\\\")\\n  const hackingLevel = ns.getHackingLevel();\\n}\",\"filename\":\"autocomplete.js\",\"server\":\"home\"}}],[\"delete-servers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// delete-servers.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://github.com/qst0/bitburner/blob/main/delete-servers.js delete-servers.js\\n\\n// Coding Autocomplete\\n// /** @param {NS} ns */ // in-game editor\\n/** @param {import(\\\".\\\").NS } ns */ // vscode\\n\\n// delete servers\\nexport async function main(ns) {\\n    let servers = ns.getPurchasedServers();\\n    console.log(\\\"Servers:\\\", servers)\\n    for (let i = 0; i<servers.length; i++) {\\n      ns.killall(servers[i])\\n      ns.deleteServer(servers[i])\\n    }\\n    console.log(\\\"Deleted all purchased servers\\\", servers)\\n}\",\"filename\":\"delete-servers.js\",\"server\":\"home\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// hack.hs\\n// Bitburner v2.5.0\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/hack.js hack.js\\n\\n/** @param {import(\\\".\\\").NS } ns */\\n\\n//Just hack all the servers I've copied into here.\\n//hack them down to $0 and move on.\\n\\nconst HARD_DATA = ['solaris', 'defcomm', 'taiyang-digital', 'aerocorp', 'icarus', 'infocomm', 'galactic-cyber', 'omnia', 'deltaone', 'syscore', 'zeus-med', 'zb-institute', 'darkweb', 'univ-energy', 'unitalife', 'nova-med', 'global-pharm', 'zb-def', 'snap-fitness', 'lexo-corp', 'alpha-ent', 'aevum-police', 'millenium-fitness', 'rho-construction', 'summit-uni', 'rothman-uni', 'catalyst', 'netlink', 'I.I.I.I', 'computek', 'johnson-ortho', 'the-hub', 'crush-fitness', 'avmnite-02h', 'omega-net', 'silver-helix', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'CSEC', 'neo-net', 'harakiri-sushi', 'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'n00dles', 'foodnstuff']\\n\\nexport async function main(ns) {\\n    async function hack_everything(hostnames){\\n        for (let i = hostnames.length-1; i >= 0; i--) {\\n            let target = hostnames[String(i)];\\n            let targetMoney = ns.getServerMoneyAvailable(target)\\n            while (targetMoney > 0) {\\n                let money = await ns.hack(target)\\n                console.log(target + \\\" hacked for \\\" + money + \\\" of \\\" + targetMoney);\\n                targetMoney = ns.getServerMoneyAvailable(target)\\n                console.log(\\\"target money remaining:\\\", targetMoney)\\n            }\\n        }\\n    }\\n    await hack_everything(HARD_DATA);\\n}\",\"filename\":\"hack.js\",\"server\":\"home\"}}],[\"test.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.alterReality()\\n}\",\"filename\":\"test.js\",\"server\":\"home\"}}],[\"eat-noodles.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function eatNoodles() {\\n  const d = eval('document');\\n  d.querySelectorAll('.SnackbarContainer-root')[0].style.display = 'none';\\n  \\n  const buttons = d.querySelectorAll('button');\\n  let eatNoodlesButton;\\n  for (const button of buttons) {\\n    if (button.textContent === 'Eat noodles') {\\n      eatNoodlesButton = button;\\n      break;\\n    }\\n  }\\n  if (eatNoodlesButton === null) return;\\n  eatNoodlesButton.click();\\n}\\n\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.tail();\\n  while (true) {\\n    eatNoodles();\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"eat-noodles.js\",\"server\":\"home\"}}]]},\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\",\"qst0\",\"qst1\",\"qst2\",\"qst3\",\"qst4\",\"qst5\",\"qst6\",\"qst7\",\"qst8\",\"qst9\",\"qst10\",\"qst11\",\"qst12\",\"qst13\",\"qst14\",\"qst15\",\"qst16\",\"qst17\",\"qst18\",\"qst19\",\"qst20\",\"qst21\",\"qst22\",\"qst23\",\"qst24\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"main.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":34110.410000064614,\"ramUsage\":7.45,\"server\":\"home\",\"scriptKey\":\"main.js*[]\",\"title\":\"main.js \",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",19493376175,24],\"dataMap\":{\"lexo-corp\":[214427137925,595700,744625,774410]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":155957829.07607415,\"onlineMoneyMade\":214427137925,\"onlineRunningTime\":34110.410000064614,\"ramUsage\":2.2,\"server\":\"home\",\"scriptKey\":\"work.js*[\\\"lexo-corp\\\",19493376175,24]\",\"title\":\"work.js lexo-corp 19493376175 24\",\"threads\":29785,\"temporary\":false}}]}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-404.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[161,[1,3,7,9,10,11,12,13]],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"ecorp\",\"httpPortOpen\":true,\"ip\":\"72.7.7.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":50683558850,\"moneyMax\":1267088971250,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1117,\"serverGrowth\":99,\"runningScripts\":[]}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"megacorp\",\"httpPortOpen\":true,\"ip\":\"50.3.9.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":52617884910,\"moneyMax\":1315447122750,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1254,\"serverGrowth\":99,\"runningScripts\":[]}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"b-and-a\",\"httpPortOpen\":true,\"ip\":\"37.3.6.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\".\",\"fulcrumassets\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":20057107682,\"moneyMax\":501427692050,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1133,\"serverGrowth\":73,\"runningScripts\":[]}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"89.8.9.2\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"blade\"}}]]},\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":79.712,\"minDifficulty\":29,\"moneyAvailable\":566553484325,\"moneyMax\":566553484325,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1008,\"serverGrowth\":83,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",19493376175,24],\"dataMap\":{\"lexo-corp\":[0,1508,3016,3132]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":534408.943062385,\"onlineMoneyMade\":0,\"onlineRunningTime\":34095.61000006483,\"ramUsage\":2.2,\"server\":\"blade\",\"scriptKey\":\"work.js*[\\\"lexo-corp\\\",19493376175,24]\",\"title\":\"work.js lexo-corp 19493376175 24\",\"threads\":116,\"temporary\":false}}]}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nwo\",\"httpPortOpen\":true,\"ip\":\"84.8.5.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"4sigma\",\"ecorp\",\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":99,\"hackDifficulty\":33.40999999999999,\"minDifficulty\":33,\"moneyAvailable\":578051275025,\"moneyMax\":578051275025,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1232,\"serverGrowth\":91,\"runningScripts\":[]}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"clarkinc\",\"httpPortOpen\":true,\"ip\":\"22.2.5.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"kuai-gong\",\"megacorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":15412282467,\"moneyMax\":385307061675,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1176,\"serverGrowth\":56,\"runningScripts\":[]}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-647792.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[7,12],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"29.1.5.6\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"omnitek\"}}]]},\"serversOnNetwork\":[\"helios\",\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":91,\"minDifficulty\":30,\"moneyAvailable\":17813973763,\"moneyMax\":445349344075,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":919,\"serverGrowth\":96,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",19493376175,24],\"dataMap\":{\"lexo-corp\":[0,1624,2784,3364]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":536763.167481162,\"onlineMoneyMade\":0,\"onlineRunningTime\":34095.61000006483,\"ramUsage\":2.2,\"server\":\"omnitek\",\"scriptKey\":\"work.js*[\\\"lexo-corp\\\",19493376175,24]\",\"title\":\"work.js lexo-corp 19493376175 24\",\"threads\":116,\"temporary\":false}}]}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-924189-TianDiHui.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[4],[9,2],[8,1,6],[3,4,3,2]],\"reward\":{\"type\":0,\"name\":\"Tian Di Hui\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"4sigma\",\"httpPortOpen\":true,\"ip\":\"76.1.3.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"stormtech\",\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":22410358869,\"moneyMax\":560258971725,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":941,\"serverGrowth\":92,\"runningScripts\":[]}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-372792.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[7,[[1,5],[4,6],[0,6],[3,4],[0,3],[3,5],[1,4],[0,4]]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"kuai-gong\",\"httpPortOpen\":true,\"ip\":\"37.3.8.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"vitalife\",\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":24502589191,\"moneyMax\":612564729775,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1240,\"serverGrowth\":96,\"runningScripts\":[]}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":true,\"ip\":\"8.7.9.7\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"fulcrumtech\"}}]]},\"serversOnNetwork\":[\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":1480124075,\"moneyMax\":37003101875,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1146,\"serverGrowth\":97,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",19493376175,24],\"dataMap\":{\"lexo-corp\":[19493376175,16740,21390,27900]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4416606.18977807,\"onlineMoneyMade\":19493376175,\"onlineRunningTime\":34095.61000006483,\"ramUsage\":2.2,\"server\":\"fulcrumtech\",\"scriptKey\":\"work.js*[\\\"lexo-corp\\\",19493376175,24]\",\"title\":\"work.js lexo-corp 19493376175 24\",\"threads\":930,\"temporary\":false}}]}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-800935.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[9,16],[4,12],[19,20],[7,17],[25,26],[12,21],[14,22],[25,29],[14,24],[9,12],[19,28],[25,30],[14,21],[1,8],[17,26],[18,22],[8,17],[7,14],[13,15],[13,21]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-946377-GalacticCybersystems.cct\",\"type\":\"Encryption I: Caesar Cipher\",\"data\":[\"FRAME DEBUG TABLE INBOX ARRAY\",14],\"reward\":{\"type\":2,\"name\":\"Galactic Cybersystems\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":true,\"ip\":\"83.3.9.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1154,\"serverGrowth\":1,\"runningScripts\":[]}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-506892.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[33,43,49,47,37,26,20,25,41],[39,22,36,21,48,17,1,35,18],[8,29,30,26,1,50,8,45,40],[36,35,15,27,33,11,22,45,17],[24,41,43,29,37,30,42,2,14],[5,26,33,17,17,20,10,25,8],[3,9,24,31,36,48,47,43,19]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-738330-NWO.cct\",\"type\":\"Total Ways to Sum\",\"data\":15,\"reward\":{\"type\":2,\"name\":\"NWO\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"stormtech\",\"httpPortOpen\":true,\"ip\":\"38.8.0.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"eat-noodles.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function eatNoodles() {\\n  const d = eval('document');\\n  d.querySelectorAll('.SnackbarContainer-root')[0].style.display = 'none';\\n  \\n  const buttons = d.querySelectorAll('button');\\n  let eatNoodlesButton;\\n  for (const button of buttons) {\\n    if (button.textContent === 'Eat noodles') {\\n      eatNoodlesButton = button;\\n      break;\\n    }\\n  }\\n  if (eatNoodlesButton === null) return;\\n  eatNoodlesButton.click();\\n  //setTimeout(eatNoodles, 500);\\n}\\n//eatNoodles();\\n\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.tail();\\n  while (true) {\\n    eatNoodles();\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"eat-noodles.js\",\"server\":\"stormtech\"}}]]},\"serversOnNetwork\":[\"applied-energetics\",\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":1096830035,\"moneyMax\":27420750875,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1067,\"serverGrowth\":70,\"runningScripts\":[]}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"68.9.0.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":94,\"hackDifficulty\":94,\"minDifficulty\":31,\"moneyAvailable\":855021342,\"moneyMax\":21375533550,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":987,\"serverGrowth\":48,\"runningScripts\":[]}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-231270.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[73,[1,2,5,8,9,10,11,13,14,17]],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-58073.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[46,32,30,47,1,27,43,18,17,32,47],[26,4,45,15,33,4,9,38,11,7,28],[28,9,26,3,4,34,31,31,14,31,46],[4,10,21,7,16,29,2,41,9,39,17],[8,28,18,44,10,48,8,21,42,50,13],[13,6,31,6,6,3,39,17,47,8,47],[27,5,13,5,48,28,34,38,39,17,11],[26,48,43,10,13,38,12,12,8,45,46],[34,13,32,47,21,31,5,40,44,25,22],[16,50,23,43,48,24,7,31,6,26,38]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"86.5.2.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zeus-med\",\"microdyne\",\"applied-energetics\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":683365951,\"moneyMax\":17084148775,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":875,\"serverGrowth\":62,\"runningScripts\":[]}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"0.0.0.4\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"helios\"}}]]},\"serversOnNetwork\":[\"run4theh111z\",\"omnitek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":597692182,\"moneyMax\":14942304550,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":816,\"serverGrowth\":80,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",19493376175,24],\"dataMap\":{\"lexo-corp\":[3999346466.130908,1972,2900,3132]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":543825.840737493,\"onlineMoneyMade\":3999346466.130908,\"onlineRunningTime\":34095.61000006483,\"ramUsage\":2.2,\"server\":\"helios\",\"scriptKey\":\"work.js*[\\\"lexo-corp\\\",19493376175,24]\",\"title\":\"work.js lexo-corp 19493376175 24\",\"threads\":116,\"temporary\":false}}]}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"65.4.9.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"vitalife\"}}]]},\"serversOnNetwork\":[\"microdyne\",\"kuai-gong\",\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":746048815,\"moneyMax\":18651220375,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":883,\"serverGrowth\":68,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",19493376175,24],\"dataMap\":{\"lexo-corp\":[0,696,1450,1624]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":269558.6959499695,\"onlineMoneyMade\":0,\"onlineRunningTime\":34095.61000006483,\"ramUsage\":2.2,\"server\":\"vitalife\",\"scriptKey\":\"work.js*[\\\"lexo-corp\\\",19493376175,24]\",\"title\":\"work.js lexo-corp 19493376175 24\",\"threads\":58,\"temporary\":false}}]}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"70.2.4.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":905556931,\"moneyMax\":22638923275,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":885,\"serverGrowth\":91,\"runningScripts\":[]}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-123843.cct\",\"type\":\"Array Jumping Game II\",\"data\":[4,2,0,4,5,4,4,3,2,0,3,1,4,2,3,1,5,5,1,2],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"44.0.1.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"univ-energy\"}}]]},\"serversOnNetwork\":[\"omnia\",\"taiyang-digital\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":29,\"minDifficulty\":29,\"moneyAvailable\":1146192568,\"moneyMax\":28654814200,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":817,\"serverGrowth\":88,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",19493376175,24],\"dataMap\":{\"lexo-corp\":[2.8651319424056703,377,667,841]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":133602.23576559624,\"onlineMoneyMade\":2.8651319424056703,\"onlineRunningTime\":34095.61000006483,\"ramUsage\":2.2,\"server\":\"univ-energy\",\"scriptKey\":\"work.js*[\\\"lexo-corp\\\",19493376175,24]\",\"title\":\"work.js lexo-corp 19493376175 24\",\"threads\":29,\"temporary\":false}}]}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"22.5.6.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"titan-labs\"}}]]},\"serversOnNetwork\":[\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":24,\"minDifficulty\":24,\"moneyAvailable\":782.9921664310397,\"moneyMax\":20203988225,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":851,\"serverGrowth\":64,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",19493376175,24],\"dataMap\":{\"lexo-corp\":[0,638,1334,1682]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":264850.2471124155,\"onlineMoneyMade\":0,\"onlineRunningTime\":34095.61000006483,\"ramUsage\":2.2,\"server\":\"titan-labs\",\"scriptKey\":\"work.js*[\\\"lexo-corp\\\",19493376175,24]\",\"title\":\"work.js lexo-corp 19493376175 24\",\"threads\":58,\"temporary\":false}}]}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-86418.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[8],[5,6],[6,8,7],[2,6,3,6],[4,9,4,9,1],[8,3,2,1,6,6],[5,9,4,1,6,1,5],[2,8,2,1,5,8,7,8],[2,7,6,2,5,7,6,4,3],[9,5,3,2,3,3,2,7,9,2],[9,5,5,1,3,4,4,8,7,2,8],[6,9,7,3,8,7,7,4,5,1,1,2]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-442287.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"00100010001100001010101000011101\",\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-14737-OmniaCybersystems.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[191,148,56,133,138,26,198,94,189,141,29,193,184,2,26,113,23,44,195,14,148,126,198,117,157,134,199,113,50,14,127,68,57,45,38,133,196,112,56,90,108,41,181,138],\"reward\":{\"type\":2,\"name\":\"Omnia Cybersystems\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"22.9.7.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"microdyne\"}}]]},\"serversOnNetwork\":[\"infocomm\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":650874151,\"moneyMax\":16271853775,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":825,\"serverGrowth\":72,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",19493376175,24],\"dataMap\":{\"lexo-corp\":[0,406,783,783]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":136545.0162890675,\"onlineMoneyMade\":0,\"onlineRunningTime\":34095.61000006483,\"ramUsage\":2.2,\"server\":\"microdyne\",\"scriptKey\":\"work.js*[\\\"lexo-corp\\\",19493376175,24]\",\"title\":\"work.js lexo-corp 19493376175 24\",\"threads\":29,\"temporary\":false}}]}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"56.8.7.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"univ-energy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":814504308,\"moneyMax\":20362607700,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":857,\"serverGrowth\":74,\"runningScripts\":[]}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"75.6.5.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":821796068,\"moneyMax\":20544901700,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":837,\"serverGrowth\":82,\"runningScripts\":[]}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"8.1.0.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":1024246821,\"moneyMax\":25606170525,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":904,\"serverGrowth\":59,\"runningScripts\":[]}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"22.5.5.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"omnia\"}}]]},\"serversOnNetwork\":[\"global-pharm\",\"icarus\",\"univ-energy\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":932140002,\"moneyMax\":23303500050,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":943,\"serverGrowth\":64,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",19493376175,24],\"dataMap\":{\"lexo-corp\":[0,406,609,870]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":130070.89913743074,\"onlineMoneyMade\":0,\"onlineRunningTime\":34095.61000006483,\"ramUsage\":2.2,\"server\":\"omnia\",\"scriptKey\":\"work.js*[\\\"lexo-corp\\\",19493376175,24]\",\"title\":\"work.js lexo-corp 19493376175 24\",\"threads\":29,\"temporary\":false}}]}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-682738.cct\",\"type\":\"Encryption II: Vigenère Cipher\",\"data\":[\"LOGICTRASHLINUXPRINTCACHE\",\"COMPUTER\"],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"20.0.8.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":1092455103,\"moneyMax\":27311377575,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":778,\"serverGrowth\":70,\"runningScripts\":[]}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"48.0.3.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"infocomm\",\"stormtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":914891906,\"moneyMax\":22872297650,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":847,\"serverGrowth\":73,\"runningScripts\":[]}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"86.5.0.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"solaris\"}}]]},\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":818328461,\"moneyMax\":20458211525,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":849,\"serverGrowth\":72,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",19493376175,24],\"dataMap\":{\"lexo-corp\":[0,154,336,406]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":64213.5005259526,\"onlineMoneyMade\":0,\"onlineRunningTime\":34095.61000006483,\"ramUsage\":2.2,\"server\":\"solaris\",\"scriptKey\":\"work.js*[\\\"lexo-corp\\\",19493376175,24]\",\"title\":\"work.js lexo-corp 19493376175 24\",\"threads\":14,\"temporary\":false}}]}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-123275.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,1,0,0,0,0,0,0,1,0],[0,1,0,0,0,1,1,0,0,0,0],[0,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-61372.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[8],[4,4],[1,6,7],[8,9,9,5],[8,1,9,7,1],[8,2,6,3,9,6],[9,5,3,1,1,5,5],[5,4,3,5,7,4,4,4],[9,1,4,5,7,4,8,4,3]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"72.4.2.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"global-pharm\",\"defcomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":1645409469,\"moneyMax\":41135236725,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":817,\"serverGrowth\":58,\"runningScripts\":[]}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"95.7.1.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"global-pharm\"}}]]},\"serversOnNetwork\":[\"alpha-ent\",\"omnia\",\"deltaone\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":1581875595,\"moneyMax\":39546889875,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":797,\"serverGrowth\":88,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",19493376175,24],\"dataMap\":{\"lexo-corp\":[0,210,364,392]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":66202.41425905733,\"onlineMoneyMade\":0,\"onlineRunningTime\":34095.61000006483,\"ramUsage\":2.2,\"server\":\"global-pharm\",\"scriptKey\":\"work.js*[\\\"lexo-corp\\\",19493376175,24]\",\"title\":\"work.js lexo-corp 19493376175 24\",\"threads\":14,\"temporary\":false}}]}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"20.8.4.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zeus-med\",\"titan-labs\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":1163214582,\"moneyMax\":29080364550,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":814,\"serverGrowth\":74,\"runningScripts\":[]}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"6.1.7.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnia\",\"infocomm\",\"zb-def\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":1318362676,\"moneyMax\":32959066900,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":812,\"serverGrowth\":73,\"runningScripts\":[]}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-581782.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[27,38],[6,31],[19,32],[15,27],[38,37]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"49.2.6.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"unitalife\"}}]]},\"serversOnNetwork\":[\"global-pharm\",\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":1018491906,\"moneyMax\":25462297650,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":806,\"serverGrowth\":77,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",19493376175,24],\"dataMap\":{\"lexo-corp\":[0,98,168,196]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":32106.7502629763,\"onlineMoneyMade\":0,\"onlineRunningTime\":34095.61000006483,\"ramUsage\":2.2,\"server\":\"unitalife\",\"scriptKey\":\"work.js*[\\\"lexo-corp\\\",19493376175,24]\",\"title\":\"work.js lexo-corp 19493376175 24\",\"threads\":7,\"temporary\":false}}]}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-661716.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[43,174,135,197,78,154,157,21,108,125,102,196,123,14,83,147,59,137,62,145,113,146,89,12,163,70,16,132,186,98,25,142,78,80,55,137,29,113,115,40,182,44,150,48,19,36,94,149,14],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-256483-NWO.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[174,[2,3,4,6,7,9,10,11,15,16]],\"reward\":{\"type\":2,\"name\":\"NWO\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"92.7.2.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"lexo-corp\"}}]]},\"serversOnNetwork\":[\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":24.432,\"minDifficulty\":24,\"moneyAvailable\":0,\"moneyMax\":19493376175,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":689,\"serverGrowth\":64,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",19493376175,24],\"dataMap\":{\"lexo-corp\":[0,63,161,203]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":31538.48919637495,\"onlineMoneyMade\":0,\"onlineRunningTime\":34095.61000006483,\"ramUsage\":2.2,\"server\":\"lexo-corp\",\"scriptKey\":\"work.js*[\\\"lexo-corp\\\",19493376175,24]\",\"title\":\"work.js lexo-corp 19493376175 24\",\"threads\":7,\"temporary\":false}}]}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":true,\"ip\":\"77.2.2.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"rho-construction\"}}]]},\"serversOnNetwork\":[\"zb-institute\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":41,\"hackDifficulty\":41,\"minDifficulty\":14,\"moneyAvailable\":556681583,\"moneyMax\":13917039575,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":500,\"serverGrowth\":46,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",19493376175,24],\"dataMap\":{\"lexo-corp\":[0,377,696,841]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":133013.679660902,\"onlineMoneyMade\":0,\"onlineRunningTime\":34095.61000006483,\"ramUsage\":2.2,\"server\":\"rho-construction\",\"scriptKey\":\"work.js*[\\\"lexo-corp\\\",19493376175,24]\",\"title\":\"work.js lexo-corp 19493376175 24\",\"threads\":29,\"temporary\":false}}]}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-678154-NWO.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"5034466085\",15],\"reward\":{\"type\":2,\"name\":\"NWO\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"86.9.3.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"alpha-ent\"}}]]},\"serversOnNetwork\":[\"summit-uni\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":58,\"hackDifficulty\":19.362,\"minDifficulty\":19,\"moneyAvailable\":0,\"moneyMax\":16754010600,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":565,\"serverGrowth\":50,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",19493376175,24],\"dataMap\":{\"lexo-corp\":[0,168,350,392]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":64213.5005259526,\"onlineMoneyMade\":0,\"onlineRunningTime\":34095.61000006483,\"ramUsage\":2.2,\"server\":\"alpha-ent\",\"scriptKey\":\"work.js*[\\\"lexo-corp\\\",19493376175,24]\",\"title\":\"work.js lexo-corp 19493376175 24\",\"threads\":14,\"temporary\":false}}]}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"1.8.2.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"aevum-police\"}}]]},\"serversOnNetwork\":[\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":259142227,\"moneyMax\":6478555675,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":420,\"serverGrowth\":33,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",19493376175,24],\"dataMap\":{\"lexo-corp\":[2.721385505286411,319,667,841]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":132425.12355620775,\"onlineMoneyMade\":2.721385505286411,\"onlineRunningTime\":34095.61000006483,\"ramUsage\":2.2,\"server\":\"aevum-police\",\"scriptKey\":\"work.js*[\\\"lexo-corp\\\",19493376175,24]\",\"title\":\"work.js lexo-corp 19493376175 24\",\"threads\":29,\"temporary\":false}}]}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":true,\"ip\":\"64.5.2.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"rothman-uni\"}}]]},\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":48,\"hackDifficulty\":48,\"minDifficulty\":16,\"moneyAvailable\":234810348,\"moneyMax\":5870258700,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":399,\"serverGrowth\":42,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",19493376175,24],\"dataMap\":{\"lexo-corp\":[0,464,696,783]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":131836.5674515135,\"onlineMoneyMade\":0,\"onlineRunningTime\":34095.61000006483,\"ramUsage\":2.2,\"server\":\"rothman-uni\",\"scriptKey\":\"work.js*[\\\"lexo-corp\\\",19493376175,24]\",\"title\":\"work.js lexo-corp 19493376175 24\",\"threads\":29,\"temporary\":false}}]}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-697574.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"kkkkkkkk1111111111RRRpehTT11UUUUUUUU5uuuuuuuuuuuuuueeeeeeJJ4nnnnnnnnnEEyyyyyyyyyYYYqqQQQQQQQQQQ5pp\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"69.6.2.3\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"zb-institute\"}}]]},\"serversOnNetwork\":[\"the-hub\",\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":926271895,\"moneyMax\":23156797375,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":748,\"serverGrowth\":75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",19493376175,24],\"dataMap\":{\"lexo-corp\":[5236962336.23909,870,1508,1624]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":275444.25699691207,\"onlineMoneyMade\":5236962336.23909,\"onlineRunningTime\":34095.61000006483,\"ramUsage\":2.2,\"server\":\"zb-institute\",\"scriptKey\":\"work.js*[\\\"lexo-corp\\\",19493376175,24]\",\"title\":\"work.js lexo-corp 19493376175 24\",\"threads\":58,\"temporary\":false}}]}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-63437.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"1000100000000000100000000000000110000010010000100000000010011101\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-359733.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"425515677\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":true,\"ip\":\"25.3.3.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"summit-uni\"}}]]},\"serversOnNetwork\":[\"avmnite-02h\",\"alpha-ent\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":256166346,\"moneyMax\":6404158650,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":451,\"serverGrowth\":44,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",19493376175,24],\"dataMap\":{\"lexo-corp\":[0,105,161,203]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":31822.619729675625,\"onlineMoneyMade\":0,\"onlineRunningTime\":34095.61000006483,\"ramUsage\":2.2,\"server\":\"summit-uni\",\"scriptKey\":\"work.js*[\\\"lexo-corp\\\",19493376175,24]\",\"title\":\"work.js lexo-corp 19493376175 24\",\"threads\":7,\"temporary\":false}}]}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"40.2.0.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"netlink\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":428660491,\"moneyMax\":10716512275,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":609,\"serverGrowth\":65,\"runningScripts\":[]}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":true,\"ip\":\"67.6.6.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"catalyst\"}}]]},\"serversOnNetwork\":[\"netlink\",\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":439731657,\"moneyMax\":10993291425,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":411,\"serverGrowth\":53,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",19493376175,24],\"dataMap\":{\"lexo-corp\":[0,168,322,420]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":64497.631059253275,\"onlineMoneyMade\":0,\"onlineRunningTime\":34095.61000006483,\"ramUsage\":2.2,\"server\":\"catalyst\",\"scriptKey\":\"work.js*[\\\"lexo-corp\\\",19493376175,24]\",\"title\":\"work.js lexo-corp 19493376175 24\",\"threads\":14,\"temporary\":false}}]}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":true,\"ip\":\"39.6.4.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"the-hub\"}}]]},\"serversOnNetwork\":[\"neo-net\",\"zb-institute\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":35,\"hackDifficulty\":35.46,\"minDifficulty\":12,\"moneyAvailable\":0,\"moneyMax\":4001097475,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":303,\"serverGrowth\":50,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",19493376175,24],\"dataMap\":{\"lexo-corp\":[0.8460427485588244,196,350,392]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":65634.15319245598,\"onlineMoneyMade\":0.8460427485588244,\"onlineRunningTime\":34095.61000006483,\"ramUsage\":2.2,\"server\":\"the-hub\",\"scriptKey\":\"work.js*[\\\"lexo-corp\\\",19493376175,24]\",\"title\":\"work.js lexo-corp 19493376175 24\",\"threads\":14,\"temporary\":false}}]}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-67260.cct\",\"type\":\"Array Jumping Game II\",\"data\":[6,4,3,6,5,2,2,1,2],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"computek\",\"httpPortOpen\":true,\"ip\":\"31.5.0.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":56.836,\"minDifficulty\":19,\"moneyAvailable\":0,\"moneyMax\":5705999125,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":390,\"serverGrowth\":60,\"runningScripts\":[]}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-116571.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[186,163,46,63,18,6,114,185,83,62,168,159,27,76,110,130,159,111,105,28,106,190,157,68,97,95,69,109,99,16,199,173,25,126,144,141,26,60,91,191,58,133],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":true,\"ip\":\"3.0.4.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"netlink\"}}]]},\"serversOnNetwork\":[\"neo-net\",\"syscore\",\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":391,\"serverGrowth\":67,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",19493376175,24],\"dataMap\":{\"lexo-corp\":[0,182,364,378]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":64213.5005259526,\"onlineMoneyMade\":0,\"onlineRunningTime\":34095.61000006483,\"ramUsage\":2.2,\"server\":\"netlink\",\"scriptKey\":\"work.js*[\\\"lexo-corp\\\",19493376175,24]\",\"title\":\"work.js lexo-corp 19493376175 24\",\"threads\":14,\"temporary\":false}}]}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":true,\"ip\":\"1.7.6.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":44,\"hackDifficulty\":44.508,\"minDifficulty\":15,\"moneyAvailable\":0,\"moneyMax\":1862604425,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":282,\"serverGrowth\":57,\"runningScripts\":[]}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-93203-BitRunners.cct\",\"type\":\"Total Ways to Sum\",\"data\":11,\"reward\":{\"type\":0,\"name\":\"BitRunners\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":true,\"ip\":\"25.3.3.6\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"n00dles\"}}]]},\"serversOnNetwork\":[\"home\",\"zer0\",\"max-hardware\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":7.674000000000002,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":3000,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",19493376175,24],\"dataMap\":{\"lexo-corp\":[0,14,24,27]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4525.793494717904,\"onlineMoneyMade\":0,\"onlineRunningTime\":34095.61000006483,\"ramUsage\":2.2,\"server\":\"n00dles\",\"scriptKey\":\"work.js*[\\\"lexo-corp\\\",19493376175,24]\",\"title\":\"work.js lexo-corp 19493376175 24\",\"threads\":1,\"temporary\":false}}]}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-472957-NWO.cct\",\"type\":\"Total Ways to Sum\",\"data\":76,\"reward\":{\"type\":2,\"name\":\"NWO\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":true,\"ip\":\"74.7.4.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"foodnstuff\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":15.728000000000002,\"minDifficulty\":3,\"moneyAvailable\":0,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",19493376175,24],\"dataMap\":{\"lexo-corp\":[0,105,175,182]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":31538.48919637495,\"onlineMoneyMade\":0,\"onlineRunningTime\":34095.61000006483,\"ramUsage\":2.2,\"server\":\"foodnstuff\",\"scriptKey\":\"work.js*[\\\"lexo-corp\\\",19493376175,24]\",\"title\":\"work.js lexo-corp 19493376175 24\",\"threads\":7,\"temporary\":false}}]}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-156363.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"70ucsIjEK0uXEK0uX6d75t5t5tU1yw6elNrelNrelNrelNrelNm5R5GOfn44444uF44\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":true,\"ip\":\"54.5.0.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"sigma-cosmetics\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":20.352000000000004,\"minDifficulty\":3,\"moneyAvailable\":0,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":5,\"serverGrowth\":10,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",19493376175,24],\"dataMap\":{\"lexo-corp\":[0,91,175,182]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":31538.48919637495,\"onlineMoneyMade\":0,\"onlineRunningTime\":34095.61000006483,\"ramUsage\":2.2,\"server\":\"sigma-cosmetics\",\"scriptKey\":\"work.js*[\\\"lexo-corp\\\",19493376175,24]\",\"title\":\"work.js lexo-corp 19493376175 24\",\"threads\":7,\"temporary\":false}}]}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-941314.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[22,30],[22,31],[8,9],[13,23],[20,25],[17,27],[23,25],[21,27],[22,32],[20,21],[11,17]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-476302-GalacticCybersystems.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[10,38,41,36,12,29,25,10,38,20,11,30,7,30,23],[23,1,13,29,27,26,29,49,32,49,16,38,40,1,48]],\"reward\":{\"type\":2,\"name\":\"Galactic Cybersystems\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":true,\"ip\":\"41.8.8.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"joesguns\"}}]]},\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":19.804000000000006,\"minDifficulty\":5,\"moneyAvailable\":0,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":10,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",19493376175,24],\"dataMap\":{\"lexo-corp\":[0,77,168,189]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":31396.423929724613,\"onlineMoneyMade\":0,\"onlineRunningTime\":34095.61000006483,\"ramUsage\":2.2,\"server\":\"joesguns\",\"scriptKey\":\"work.js*[\\\"lexo-corp\\\",19493376175,24]\",\"title\":\"work.js lexo-corp 19493376175 24\",\"threads\":7,\"temporary\":false}}]}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-300507.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[120,170,200,141,129,110,64,37,193,21,31,83,143,8,3],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":true,\"ip\":\"60.7.3.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"zer0\"}}]]},\"serversOnNetwork\":[\"n00dles\",\"silver-helix\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25.266,\"minDifficulty\":8,\"moneyAvailable\":0,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":75,\"serverGrowth\":40,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",19493376175,24],\"dataMap\":{\"lexo-corp\":[0,210,378,364]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":64781.76159255395,\"onlineMoneyMade\":0,\"onlineRunningTime\":34095.61000006483,\"ramUsage\":2.2,\"server\":\"zer0\",\"scriptKey\":\"work.js*[\\\"lexo-corp\\\",19493376175,24]\",\"title\":\"work.js lexo-corp 19493376175 24\",\"threads\":14,\"temporary\":false}}]}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":true,\"ip\":\"91.3.2.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"nectar-net\"}}]]},\"serversOnNetwork\":[\"hong-fang-tea\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20.23,\"minDifficulty\":7,\"moneyAvailable\":0,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":20,\"serverGrowth\":25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",19493376175,24],\"dataMap\":{\"lexo-corp\":[0,112,182,182]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":32106.7502629763,\"onlineMoneyMade\":0,\"onlineRunningTime\":34095.61000006483,\"ramUsage\":2.2,\"server\":\"nectar-net\",\"scriptKey\":\"work.js*[\\\"lexo-corp\\\",19493376175,24]\",\"title\":\"work.js lexo-corp 19493376175 24\",\"threads\":7,\"temporary\":false}}]}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":true,\"ip\":\"2.8.2.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"neo-net\"}}]]},\"serversOnNetwork\":[\"CSEC\",\"the-hub\",\"computek\",\"netlink\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":8.21,\"minDifficulty\":8,\"moneyAvailable\":0,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":50,\"serverGrowth\":25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",19493376175,24],\"dataMap\":{\"lexo-corp\":[0,140,350,392]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":63929.369992651926,\"onlineMoneyMade\":0,\"onlineRunningTime\":34095.61000006483,\"ramUsage\":2.2,\"server\":\"neo-net\",\"scriptKey\":\"work.js*[\\\"lexo-corp\\\",19493376175,24]\",\"title\":\"work.js lexo-corp 19493376175 24\",\"threads\":14,\"temporary\":false}}]}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":true,\"ip\":\"19.6.9.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"silver-helix\"}}]]},\"serversOnNetwork\":[\"zer0\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30.32,\"minDifficulty\":10,\"moneyAvailable\":0,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":150,\"serverGrowth\":30,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",19493376175,24],\"dataMap\":{\"lexo-corp\":[0,261,696,841]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":132425.12355620775,\"onlineMoneyMade\":0,\"onlineRunningTime\":34095.61000006483,\"ramUsage\":2.2,\"server\":\"silver-helix\",\"scriptKey\":\"work.js*[\\\"lexo-corp\\\",19493376175,24]\",\"title\":\"work.js lexo-corp 19493376175 24\",\"threads\":29,\"temporary\":false}}]}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":true,\"ip\":\"23.4.5.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"hong-fang-tea\"}}]]},\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15.218,\"minDifficulty\":5,\"moneyAvailable\":0,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":30,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",19493376175,24],\"dataMap\":{\"lexo-corp\":[0,105,168,189]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":31396.423929724613,\"onlineMoneyMade\":0,\"onlineRunningTime\":34095.61000006483,\"ramUsage\":2.2,\"server\":\"hong-fang-tea\",\"scriptKey\":\"work.js*[\\\"lexo-corp\\\",19493376175,24]\",\"title\":\"work.js lexo-corp 19493376175 24\",\"threads\":7,\"temporary\":false}}]}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":true,\"ip\":\"58.3.3.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"harakiri-sushi\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15.222,\"minDifficulty\":5,\"moneyAvailable\":0,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":40,\"serverGrowth\":40,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",19493376175,24],\"dataMap\":{\"lexo-corp\":[0,98,161,189]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":30970.2281297736,\"onlineMoneyMade\":0,\"onlineRunningTime\":34095.61000006483,\"ramUsage\":2.2,\"server\":\"harakiri-sushi\",\"scriptKey\":\"work.js*[\\\"lexo-corp\\\",19493376175,24]\",\"title\":\"work.js lexo-corp 19493376175 24\",\"threads\":7,\"temporary\":false}}]}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":true,\"ip\":\"26.4.8.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"phantasy\"}}]]},\"serversOnNetwork\":[\"CSEC\",\"johnson-ortho\",\"crush-fitness\",\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20.258,\"minDifficulty\":7,\"moneyAvailable\":0,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":100,\"serverGrowth\":35,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",19493376175,24],\"dataMap\":{\"lexo-corp\":[0,140,350,406]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":64781.76159255395,\"onlineMoneyMade\":0,\"onlineRunningTime\":34095.61000006483,\"ramUsage\":2.2,\"server\":\"phantasy\",\"scriptKey\":\"work.js*[\\\"lexo-corp\\\",19493376175,24]\",\"title\":\"work.js lexo-corp 19493376175 24\",\"threads\":14,\"temporary\":false}}]}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":true,\"ip\":\"17.8.4.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"max-hardware\"}}]]},\"serversOnNetwork\":[\"n00dles\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15.236,\"minDifficulty\":5,\"moneyAvailable\":0,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":80,\"serverGrowth\":30,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",19493376175,24],\"dataMap\":{\"lexo-corp\":[0,210,336,364]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":62224.58679284788,\"onlineMoneyMade\":0,\"onlineRunningTime\":34095.61000006483,\"ramUsage\":2.2,\"server\":\"max-hardware\",\"scriptKey\":\"work.js*[\\\"lexo-corp\\\",19493376175,24]\",\"title\":\"work.js lexo-corp 19493376175 24\",\"threads\":14,\"temporary\":false}}]}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-273622.cct\",\"type\":\"Encryption II: Vigenère Cipher\",\"data\":[\"MEDIAENTERSHELLPASTEQUEUE\",\"FIRMWARE\"],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":true,\"ip\":\"25.2.8.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"omega-net\"}}]]},\"serversOnNetwork\":[\"CSEC\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":26,\"hackDifficulty\":26.334,\"minDifficulty\":9,\"moneyAvailable\":0,\"moneyMax\":1535358850,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":208,\"serverGrowth\":37,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",19493376175,24],\"dataMap\":{\"lexo-corp\":[0,154,364,392]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":65065.892125854625,\"onlineMoneyMade\":0,\"onlineRunningTime\":34095.61000006483,\"ramUsage\":2.2,\"server\":\"omega-net\",\"scriptKey\":\"work.js*[\\\"lexo-corp\\\",19493376175,24]\",\"title\":\"work.js lexo-corp 19493376175 24\",\"threads\":14,\"temporary\":false}}]}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":true,\"ip\":\"54.5.2.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":42,\"hackDifficulty\":42.466,\"minDifficulty\":14,\"moneyAvailable\":0,\"moneyMax\":1491073825,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":256,\"serverGrowth\":31,\"runningScripts\":[]}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-249945.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,1,0,0,0,0,0,0,0,1],[0,0,0,0,1,0,0,1,0,1],[0,0,0,0,1,1,0,0,0,0],[1,0,0,0,1,0,1,0,0,0],[1,0,1,0,1,1,0,0,0,1],[0,0,0,1,0,0,1,0,1,0],[0,0,0,1,0,0,0,0,0,0],[1,0,1,1,0,1,0,1,0,0],[1,0,1,1,1,0,0,1,0,0]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-74946-NewTokyo.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[59,[1,3,4,5,6,7,8,9,11,12,13]],\"reward\":{\"type\":0,\"name\":\"New Tokyo\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-204837.cct\",\"type\":\"Array Jumping Game\",\"data\":[6,0,3,0,0,9,4,3,8,5,3,9,10,7,7,4,6,2,2,7,1,0,4,10],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":true,\"ip\":\"51.6.2.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"iron-gym\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30.294,\"minDifficulty\":10,\"moneyAvailable\":0,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":100,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",19493376175,24],\"dataMap\":{\"lexo-corp\":[0,238,364,350]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":63645.23945935125,\"onlineMoneyMade\":0,\"onlineRunningTime\":34095.61000006483,\"ramUsage\":2.2,\"server\":\"iron-gym\",\"scriptKey\":\"work.js*[\\\"lexo-corp\\\",19493376175,24]\",\"title\":\"work.js lexo-corp 19493376175 24\",\"threads\":14,\"temporary\":false}}]}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":true,\"ip\":\"38.4.9.8\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"millenium-fitness\"}}]]},\"serversOnNetwork\":[\"summit-uni\",\"galactic-cyber\",\"aerocorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":52,\"hackDifficulty\":52,\"minDifficulty\":17,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":498,\"serverGrowth\":44,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",19493376175,24],\"dataMap\":{\"lexo-corp\":[0,1740,2668,3364]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":529700.494224831,\"onlineMoneyMade\":0,\"onlineRunningTime\":34095.61000006483,\"ramUsage\":2.2,\"server\":\"millenium-fitness\",\"scriptKey\":\"work.js*[\\\"lexo-corp\\\",19493376175,24]\",\"title\":\"work.js lexo-corp 19493376175 24\",\"threads\":116,\"temporary\":false}}]}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-159977.cct\",\"type\":\"Array Jumping Game II\",\"data\":[0,2,0,2,6,4,1,3,1,3,1,3,2,2,3,3,4,0,2,5,2,4,6,3],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-21951-NiteSec.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[12,175,177,3,46,42,159,180,78,166,120,24,94,71,17,156,146,156,147,127,109,52,73,14,135,1,110,137,55,26,108,157,92,56,132,64,95,70,161,19,136,8,197,185,143,197],\"reward\":{\"type\":0,\"name\":\"NiteSec\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-149746.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,1,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,0,0,0],[1,0,1,0,0,1,0,0,0,0],[1,0,1,0,0,1,1,1,0,0],[0,0,0,1,0,1,0,0,1,0],[1,0,0,0,0,1,1,1,0,0],[0,1,0,0,1,1,0,1,0,1],[0,1,0,1,0,0,1,0,0,0],[0,0,1,0,0,0,0,1,1,0],[0,0,0,0,0,0,0,0,0,0],[0,0,1,1,0,0,0,0,0,0],[0,0,0,0,1,1,0,0,0,0]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":true,\"ip\":\"67.1.9.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"powerhouse-fitness\"}}]]},\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1089,\"serverGrowth\":55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",19493376175,24],\"dataMap\":{\"lexo-corp\":[0,224,336,406]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":64781.76159255395,\"onlineMoneyMade\":0,\"onlineRunningTime\":34095.61000006483,\"ramUsage\":2.2,\"server\":\"powerhouse-fitness\",\"scriptKey\":\"work.js*[\\\"lexo-corp\\\",19493376175,24]\",\"title\":\"work.js lexo-corp 19493376175 24\",\"threads\":14,\"temporary\":false}}]}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"93.0.4.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":46,\"hackDifficulty\":15,\"minDifficulty\":15,\"moneyAvailable\":11250000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":779,\"serverGrowth\":42,\"runningScripts\":[]}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"94.3.8.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"run4theh111z\"}}]]},\"serversOnNetwork\":[\"infocomm\",\"fulcrumtech\",\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":519,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",19493376175,24],\"dataMap\":{\"lexo-corp\":[0,210,350,378]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":64213.5005259526,\"onlineMoneyMade\":0,\"onlineRunningTime\":34095.61000006483,\"ramUsage\":2.2,\"server\":\"run4theh111z\",\"scriptKey\":\"work.js*[\\\"lexo-corp\\\",19493376175,24]\",\"title\":\"work.js lexo-corp 19493376175 24\",\"threads\":14,\"temporary\":false}}]}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-437124.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[10,3],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-578297.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0,0],[0,0,1,1,0,0,0,0,1,0,1],[1,0,0,1,0,1,0,0,0,0,0],[0,1,0,0,0,1,0,0,1,1,1],[0,0,0,1,1,1,1,1,0,0,1],[0,0,0,0,0,1,0,0,1,0,0],[0,0,1,0,0,0,0,0,0,0,0],[1,0,0,0,1,0,0,0,0,1,0]],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-818045.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0],[1,0,0,1,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,1],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0]],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":true,\"ip\":\"72.1.3.2\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"I.I.I.I\"}}]]},\"serversOnNetwork\":[\"the-hub\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":364,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",19493376175,24],\"dataMap\":{\"lexo-corp\":[0,1392,2784,3364]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":534408.943062385,\"onlineMoneyMade\":0,\"onlineRunningTime\":34095.61000006483,\"ramUsage\":2.2,\"server\":\"I.I.I.I\",\"scriptKey\":\"work.js*[\\\"lexo-corp\\\",19493376175,24]\",\"title\":\"work.js lexo-corp 19493376175 24\",\"threads\":116,\"temporary\":false}}]}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-562970.cct\",\"type\":\"Array Jumping Game\",\"data\":[0,1,0,4,0,0,8,1,6,0,4,6,8,9,0,0,5,10,7,9,0,2],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-623570.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(a)())))((())a\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":true,\"ip\":\"37.4.1.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"avmnite-02h\"}}]]},\"serversOnNetwork\":[\"phantasy\",\"rothman-uni\",\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":204,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",19493376175,24],\"dataMap\":{\"lexo-corp\":[0,196,336,392]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":64213.5005259526,\"onlineMoneyMade\":0,\"onlineRunningTime\":34095.61000006483,\"ramUsage\":2.2,\"server\":\"avmnite-02h\",\"scriptKey\":\"work.js*[\\\"lexo-corp\\\",19493376175,24]\",\"title\":\"work.js lexo-corp 19493376175 24\",\"threads\":14,\"temporary\":false}}]}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-718170-NiteSec.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[2],[7,9],[1,1,3],[6,7,9,4],[7,6,3,5,8],[8,8,6,2,2,8],[6,6,3,3,8,5,3],[2,6,8,9,7,7,3,2],[4,9,5,7,1,1,8,6,6],[1,9,7,4,4,8,9,3,2,4]],\"reward\":{\"type\":0,\"name\":\"NiteSec\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-961678.cct\",\"type\":\"Compression II: LZ Decompression\",\"data\":\"97B6cxBbMb07YEWTJdB8836mm839U5l6y3ZNz167b6y3lwo771g69\",\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"30.1.6.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\".\"}}]]},\"serversOnNetwork\":[\"vitalife\",\"b-and-a\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":534,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",19493376175,24],\"dataMap\":{\"lexo-corp\":[0.4365038387417953,98,175,189]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":32675.01132957765,\"onlineMoneyMade\":0.4365038387417953,\"onlineRunningTime\":34095.61000006483,\"ramUsage\":2.2,\"server\":\".\",\"scriptKey\":\"work.js*[\\\"lexo-corp\\\",19493376175,24]\",\"title\":\"work.js lexo-corp 19493376175 24\",\"threads\":7,\"temporary\":false}}]}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":true,\"ip\":\"55.3.4.6\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"CSEC\"}}]]},\"serversOnNetwork\":[\"joesguns\",\"neo-net\",\"phantasy\",\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":52,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",19493376175,24],\"dataMap\":{\"lexo-corp\":[0,45,75,78]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":13516.495369874998,\"onlineMoneyMade\":0,\"onlineRunningTime\":34095.61000006483,\"ramUsage\":2.2,\"server\":\"CSEC\",\"scriptKey\":\"work.js*[\\\"lexo-corp\\\",19493376175,24]\",\"title\":\"work.js lexo-corp 19493376175 24\",\"threads\":3,\"temporary\":false}}]}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-82881-CyberSec.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,1,0,1,0,1,1],[1,0,0,1,1,0,1,1],[1,0,0,1,0,1,0,0],[0,1,0,0,1,0,0,0],[0,0,1,1,1,0,0,1],[0,0,1,0,0,0,1,0],[0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]],\"reward\":{\"type\":0,\"name\":\"CyberSec\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"The-Cave\",\"httpPortOpen\":true,\"ip\":\"48.3.4.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":925,\"serverGrowth\":1,\"runningScripts\":[]}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"11.9.4.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":1,\"runningScripts\":[]}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"2.9.2.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"darkweb\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"qst0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"qst0\",\"httpPortOpen\":true,\"ip\":\"96.0.9.5\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"qst0\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",19493376175,24],\"dataMap\":{\"lexo-corp\":[0,7149375,10962375,13345500]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2137760079.3578572,\"onlineMoneyMade\":0,\"onlineRunningTime\":34095.61000006483,\"ramUsage\":2.2,\"server\":\"qst0\",\"scriptKey\":\"work.js*[\\\"lexo-corp\\\",19493376175,24]\",\"title\":\"work.js lexo-corp 19493376175 24\",\"threads\":476625,\"temporary\":false}}]}},\"qst1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"qst1\",\"httpPortOpen\":true,\"ip\":\"96.7.1.1\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"qst1\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",19493376175,24],\"dataMap\":{\"lexo-corp\":[0,6672750,11439000,13345500]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2176452569.4819813,\"onlineMoneyMade\":0,\"onlineRunningTime\":34095.61000006483,\"ramUsage\":2.2,\"server\":\"qst1\",\"scriptKey\":\"work.js*[\\\"lexo-corp\\\",19493376175,24]\",\"title\":\"work.js lexo-corp 19493376175 24\",\"threads\":476625,\"temporary\":false}}]}},\"qst2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"qst2\",\"httpPortOpen\":true,\"ip\":\"92.2.4.1\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"qst2\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",19493376175,24],\"dataMap\":{\"lexo-corp\":[53.88268714251496,7626000,11439000,12868875]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2166779446.95095,\"onlineMoneyMade\":53.88268714251496,\"onlineRunningTime\":34095.61000006483,\"ramUsage\":2.2,\"server\":\"qst2\",\"scriptKey\":\"work.js*[\\\"lexo-corp\\\",19493376175,24]\",\"title\":\"work.js lexo-corp 19493376175 24\",\"threads\":476625,\"temporary\":false}}]}},\"qst3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"qst3\",\"httpPortOpen\":true,\"ip\":\"73.4.6.2\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"qst3\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",19493376175,24],\"dataMap\":{\"lexo-corp\":[38986752350,7149375,11439000,12868875]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2215145059.6061053,\"onlineMoneyMade\":38986752350,\"onlineRunningTime\":34095.61000006483,\"ramUsage\":2.2,\"server\":\"qst3\",\"scriptKey\":\"work.js*[\\\"lexo-corp\\\",19493376175,24]\",\"title\":\"work.js lexo-corp 19493376175 24\",\"threads\":476625,\"temporary\":false}}]}},\"qst4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"qst4\",\"httpPortOpen\":true,\"ip\":\"60.8.1.7\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"qst4\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",19493376175,24],\"dataMap\":{\"lexo-corp\":[0,6672750,12392250,12392250]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2176452569.4819813,\"onlineMoneyMade\":0,\"onlineRunningTime\":34095.61000006483,\"ramUsage\":2.2,\"server\":\"qst4\",\"scriptKey\":\"work.js*[\\\"lexo-corp\\\",19493376175,24]\",\"title\":\"work.js lexo-corp 19493376175 24\",\"threads\":476625,\"temporary\":false}}]}},\"qst5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"qst5\",\"httpPortOpen\":true,\"ip\":\"58.1.8.6\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"qst5\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",19493376175,24],\"dataMap\":{\"lexo-corp\":[0,6196125,12392250,12868875]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2186125692.013012,\"onlineMoneyMade\":0,\"onlineRunningTime\":34095.61000006483,\"ramUsage\":2.2,\"server\":\"qst5\",\"scriptKey\":\"work.js*[\\\"lexo-corp\\\",19493376175,24]\",\"title\":\"work.js lexo-corp 19493376175 24\",\"threads\":476625,\"temporary\":false}}]}},\"qst6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"qst6\",\"httpPortOpen\":true,\"ip\":\"63.8.9.5\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"qst6\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",19493376175,24],\"dataMap\":{\"lexo-corp\":[97466880875,8579250,11439000,12392250]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2282856917.3233223,\"onlineMoneyMade\":97466880875,\"onlineRunningTime\":34095.61000006483,\"ramUsage\":2.2,\"server\":\"qst6\",\"scriptKey\":\"work.js*[\\\"lexo-corp\\\",19493376175,24]\",\"title\":\"work.js lexo-corp 19493376175 24\",\"threads\":476625,\"temporary\":false}}]}},\"qst7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"qst7\",\"httpPortOpen\":true,\"ip\":\"55.5.5.1\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"qst7\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",19493376175,24],\"dataMap\":{\"lexo-corp\":[19493376250.630226,7626000,11915625,12868875]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2234491304.6681676,\"onlineMoneyMade\":19493376250.630226,\"onlineRunningTime\":34095.61000006483,\"ramUsage\":2.2,\"server\":\"qst7\",\"scriptKey\":\"work.js*[\\\"lexo-corp\\\",19493376175,24]\",\"title\":\"work.js lexo-corp 19493376175 24\",\"threads\":476625,\"temporary\":false}}]}},\"qst8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"qst8\",\"httpPortOpen\":true,\"ip\":\"44.2.3.2\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"qst8\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",19493376175,24],\"dataMap\":{\"lexo-corp\":[33749790013.76091,7626000,10962375,13345500]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2195798814.5440435,\"onlineMoneyMade\":33749790013.76091,\"onlineRunningTime\":34095.61000006483,\"ramUsage\":2.2,\"server\":\"qst8\",\"scriptKey\":\"work.js*[\\\"lexo-corp\\\",19493376175,24]\",\"title\":\"work.js lexo-corp 19493376175 24\",\"threads\":476625,\"temporary\":false}}]}},\"qst9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"qst9\",\"httpPortOpen\":true,\"ip\":\"38.5.0.6\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"qst9\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",19493376175,24],\"dataMap\":{\"lexo-corp\":[19493376175,8102625,11915625,11915625]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2157106324.4199195,\"onlineMoneyMade\":19493376175,\"onlineRunningTime\":34095.61000006483,\"ramUsage\":2.2,\"server\":\"qst9\",\"scriptKey\":\"work.js*[\\\"lexo-corp\\\",19493376175,24]\",\"title\":\"work.js lexo-corp 19493376175 24\",\"threads\":476625,\"temporary\":false}}]}},\"qst10\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"qst10\",\"httpPortOpen\":true,\"ip\":\"51.8.4.4\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"qst10\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",19493376175,24],\"dataMap\":{\"lexo-corp\":[34987405883.869095,9055875,11915625,11915625]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2186125692.0130124,\"onlineMoneyMade\":34987405883.869095,\"onlineRunningTime\":34095.61000006483,\"ramUsage\":2.2,\"server\":\"qst10\",\"scriptKey\":\"work.js*[\\\"lexo-corp\\\",19493376175,24]\",\"title\":\"work.js lexo-corp 19493376175 24\",\"threads\":476625,\"temporary\":false}}]}},\"qst11\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"qst11\",\"httpPortOpen\":true,\"ip\":\"41.5.3.9\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"qst11\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",19493376175,24],\"dataMap\":{\"lexo-corp\":[0,6672750,12392250,12868875]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2215145059.606106,\"onlineMoneyMade\":0,\"onlineRunningTime\":34095.61000006483,\"ramUsage\":2.2,\"server\":\"qst11\",\"scriptKey\":\"work.js*[\\\"lexo-corp\\\",19493376175,24]\",\"title\":\"work.js lexo-corp 19493376175 24\",\"threads\":476625,\"temporary\":false}}]}},\"qst12\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"qst12\",\"httpPortOpen\":true,\"ip\":\"82.6.5.8\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"qst12\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",19493376175,24],\"dataMap\":{\"lexo-corp\":[19493376175,8102625,10962375,12868875]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2157106324.4199195,\"onlineMoneyMade\":19493376175,\"onlineRunningTime\":34095.61000006483,\"ramUsage\":2.2,\"server\":\"qst12\",\"scriptKey\":\"work.js*[\\\"lexo-corp\\\",19493376175,24]\",\"title\":\"work.js lexo-corp 19493376175 24\",\"threads\":476625,\"temporary\":false}}]}},\"qst13\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"qst13\",\"httpPortOpen\":true,\"ip\":\"70.1.1.0\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"qst13\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",19493376175,24],\"dataMap\":{\"lexo-corp\":[19493376175,6672750,11439000,13345500]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2186125692.0130124,\"onlineMoneyMade\":19493376175,\"onlineRunningTime\":34095.61000006483,\"ramUsage\":2.2,\"server\":\"qst13\",\"scriptKey\":\"work.js*[\\\"lexo-corp\\\",19493376175,24]\",\"title\":\"work.js lexo-corp 19493376175 24\",\"threads\":476625,\"temporary\":false}}]}},\"qst14\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"qst14\",\"httpPortOpen\":true,\"ip\":\"61.0.7.0\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"qst14\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",19493376175,24],\"dataMap\":{\"lexo-corp\":[0,8102625,11915625,12392250]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2166779446.9509506,\"onlineMoneyMade\":0,\"onlineRunningTime\":34095.61000006483,\"ramUsage\":2.2,\"server\":\"qst14\",\"scriptKey\":\"work.js*[\\\"lexo-corp\\\",19493376175,24]\",\"title\":\"work.js lexo-corp 19493376175 24\",\"threads\":476625,\"temporary\":false}}]}},\"qst15\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"qst15\",\"httpPortOpen\":true,\"ip\":\"92.2.5.9\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"qst15\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",19493376175,24],\"dataMap\":{\"lexo-corp\":[0,7626000,10962375,12868875]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2099067589.2337332,\"onlineMoneyMade\":0,\"onlineRunningTime\":34095.61000006483,\"ramUsage\":2.2,\"server\":\"qst15\",\"scriptKey\":\"work.js*[\\\"lexo-corp\\\",19493376175,24]\",\"title\":\"work.js lexo-corp 19493376175 24\",\"threads\":476625,\"temporary\":false}}]}},\"qst16\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"qst16\",\"httpPortOpen\":true,\"ip\":\"59.7.0.8\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"qst16\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",19493376175,24],\"dataMap\":{\"lexo-corp\":[116960257050,6196125,11439000,12392250]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2282856917.323322,\"onlineMoneyMade\":116960257050,\"onlineRunningTime\":34095.61000006483,\"ramUsage\":2.2,\"server\":\"qst16\",\"scriptKey\":\"work.js*[\\\"lexo-corp\\\",19493376175,24]\",\"title\":\"work.js lexo-corp 19493376175 24\",\"threads\":476625,\"temporary\":false}}]}},\"qst17\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"qst17\",\"httpPortOpen\":true,\"ip\":\"43.3.9.1\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"qst17\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",19493376175,24],\"dataMap\":{\"lexo-corp\":[38986752350,6672750,11915625,12868875]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2205471937.075074,\"onlineMoneyMade\":38986752350,\"onlineRunningTime\":34095.61000006483,\"ramUsage\":2.2,\"server\":\"qst17\",\"scriptKey\":\"work.js*[\\\"lexo-corp\\\",19493376175,24]\",\"title\":\"work.js lexo-corp 19493376175 24\",\"threads\":476625,\"temporary\":false}}]}},\"qst18\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"qst18\",\"httpPortOpen\":true,\"ip\":\"91.4.6.0\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"qst18\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",19493376175,24],\"dataMap\":{\"lexo-corp\":[19493376175,5719500,10962375,13822125]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2176452569.4819813,\"onlineMoneyMade\":19493376175,\"onlineRunningTime\":34095.61000006483,\"ramUsage\":2.2,\"server\":\"qst18\",\"scriptKey\":\"work.js*[\\\"lexo-corp\\\",19493376175,24]\",\"title\":\"work.js lexo-corp 19493376175 24\",\"threads\":476625,\"temporary\":false}}]}},\"qst19\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"qst19\",\"httpPortOpen\":true,\"ip\":\"40.8.3.1\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"qst19\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",19493376175,24],\"dataMap\":{\"lexo-corp\":[77973504700,6196125,11915625,13345500]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2311876284.916415,\"onlineMoneyMade\":77973504700,\"onlineRunningTime\":34095.61000006483,\"ramUsage\":2.2,\"server\":\"qst19\",\"scriptKey\":\"work.js*[\\\"lexo-corp\\\",19493376175,24]\",\"title\":\"work.js lexo-corp 19493376175 24\",\"threads\":476625,\"temporary\":false}}]}},\"qst20\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"qst20\",\"httpPortOpen\":true,\"ip\":\"92.5.4.8\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"qst20\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",19493376175,24],\"dataMap\":{\"lexo-corp\":[19493376175,6672750,11915625,13345500]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2224818182.1371365,\"onlineMoneyMade\":19493376175,\"onlineRunningTime\":34095.61000006483,\"ramUsage\":2.2,\"server\":\"qst20\",\"scriptKey\":\"work.js*[\\\"lexo-corp\\\",19493376175,24]\",\"title\":\"work.js lexo-corp 19493376175 24\",\"threads\":476625,\"temporary\":false}}]}},\"qst21\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"qst21\",\"httpPortOpen\":true,\"ip\":\"23.5.8.3\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"qst21\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",19493376175,24],\"dataMap\":{\"lexo-corp\":[0,5242875,10962375,14298750]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2215145059.606106,\"onlineMoneyMade\":0,\"onlineRunningTime\":34095.61000006483,\"ramUsage\":2.2,\"server\":\"qst21\",\"scriptKey\":\"work.js*[\\\"lexo-corp\\\",19493376175,24]\",\"title\":\"work.js lexo-corp 19493376175 24\",\"threads\":476625,\"temporary\":false}}]}},\"qst22\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"qst22\",\"httpPortOpen\":true,\"ip\":\"58.3.8.9\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"qst22\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",19493376175,24],\"dataMap\":{\"lexo-corp\":[58480128525,7149375,11915625,12392250]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2253837549.7302294,\"onlineMoneyMade\":58480128525,\"onlineRunningTime\":34095.61000006483,\"ramUsage\":2.2,\"server\":\"qst22\",\"scriptKey\":\"work.js*[\\\"lexo-corp\\\",19493376175,24]\",\"title\":\"work.js lexo-corp 19493376175 24\",\"threads\":476625,\"temporary\":false}}]}},\"qst23\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"qst23\",\"httpPortOpen\":true,\"ip\":\"37.6.4.0\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"qst23\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",19493376175,24],\"dataMap\":{\"lexo-corp\":[19493376175,7149375,10962375,12868875]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2147433201.8888884,\"onlineMoneyMade\":19493376175,\"onlineRunningTime\":34095.61000006483,\"ramUsage\":2.2,\"server\":\"qst23\",\"scriptKey\":\"work.js*[\\\"lexo-corp\\\",19493376175,24]\",\"title\":\"work.js lexo-corp 19493376175 24\",\"threads\":476625,\"temporary\":false}}]}},\"qst24\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"qst24\",\"httpPortOpen\":true,\"ip\":\"44.9.8.8\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"qst24\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",19493376175,24],\"dataMap\":{\"lexo-corp\":[0,6672750,11439000,13345500]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2157106324.4199195,\"onlineMoneyMade\":0,\"onlineRunningTime\":34095.61000006483,\"ramUsage\":2.2,\"server\":\"qst24\",\"scriptKey\":\"work.js*[\\\"lexo-corp\\\",19493376175,24]\",\"title\":\"work.js lexo-corp 19493376175 24\",\"threads\":476625,\"temporary\":false}}]}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.452,\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.5897,\"playerReputation\":0}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.0048,\"playerReputation\":0}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.003,\"playerReputation\":0}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.0013,\"playerReputation\":0}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":3.5042,\"isBanned\":false,\"isMember\":true,\"playerReputation\":1152953.8328108108}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":111.4695,\"isBanned\":false,\"isMember\":true,\"playerReputation\":386087.56446536246}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":119.0187,\"isBanned\":false,\"isMember\":true,\"playerReputation\":399881.12356731005}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":56.4162,\"isBanned\":true,\"isMember\":false,\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":1,\"isBanned\":false,\"isMember\":true,\"playerReputation\":59690.04335587153}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":1,\"isBanned\":false,\"isMember\":true,\"playerReputation\":20113.132718559085}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":1,\"isBanned\":false,\"isMember\":true,\"playerReputation\":20588.909192613723}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":71.5005,\"isBanned\":true,\"isMember\":false,\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0.6804,\"isBanned\":true,\"isMember\":false,\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":1.792,\"isBanned\":false,\"isMember\":true,\"playerReputation\":13144.004696124239}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":73.4111,\"isBanned\":false,\"isMember\":true,\"playerReputation\":263402.1627979189}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":54.3588,\"isBanned\":false,\"isMember\":true,\"playerReputation\":180752.93248239695}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Shadows of Anarchy\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}}}","AliasesSave":"{\"s\":\"scan-analyze\",\"a\":\"analyze\",\"b\":\"backdoor\",\"sp\":\"run ServerProfiler.exe\",\"c\":\"connect\",\"ht\":\"killall; run work.js target 0 0 --hack -t 3723\",\"t\":\"target\",\"rh\":\"killall; run hack.js -t 4551 ; tail hack.js\",\"m\":\"killall; run main.js\",\"l\":\"ls\"}","GlobalAliasesSave":"{\"target\":\"computek\"}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":60914.20984356748,\"lastPrice\":61030.384911459376,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.43,\"b\":false,\"otlkMag\":19.060924126380932,\"otlkMagForecast\":31.643326187401165,\"cap\":31612039,\"spreadPerc\":0.4,\"shareTxForMovement\":82718,\"shareTxUntilMovement\":82718,\"totalShares\":104500000,\"maxShares\":20900000}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":61945.05262821005,\"lastPrice\":61818.92647360371,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.46,\"b\":true,\"otlkMag\":18.98587365218836,\"otlkMagForecast\":67.90512682231461,\"cap\":643407799,\"spreadPerc\":0.5,\"shareTxForMovement\":34704,\"shareTxUntilMovement\":34704,\"totalShares\":73000000,\"maxShares\":14600000}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":17395.67118530177,\"lastPrice\":17334.931144887927,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.79,\"b\":true,\"otlkMag\":13.614626305924826,\"otlkMagForecast\":64.24163601464112,\"cap\":60464361,\"spreadPerc\":0.4,\"shareTxForMovement\":46796,\"shareTxUntilMovement\":46796,\"totalShares\":115300000,\"maxShares\":23100000}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":17956.606107591455,\"lastPrice\":17897.86275114003,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.74,\"b\":false,\"otlkMag\":10.001402774440448,\"otlkMagForecast\":39.868587733036655,\"cap\":96787992,\"spreadPerc\":0.2,\"shareTxForMovement\":42350,\"shareTxUntilMovement\":42350,\"totalShares\":65900000,\"maxShares\":13200000}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":30061.13221444108,\"lastPrice\":29972.065109862808,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.67,\"b\":true,\"otlkMag\":9.807210970850331,\"otlkMagForecast\":60.02249867857849,\"cap\":348142350,\"spreadPerc\":0.5,\"shareTxForMovement\":73083,\"shareTxUntilMovement\":73083,\"totalShares\":49500000,\"maxShares\":9900000}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":27327.93890239529,\"lastPrice\":27200.059211160096,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.06,\"b\":false,\"otlkMag\":15.34652070565209,\"otlkMagForecast\":32.54550494560129,\"cap\":950822296,\"spreadPerc\":0.5,\"shareTxForMovement\":62098,\"shareTxUntilMovement\":62098,\"totalShares\":31700000,\"maxShares\":6300000}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":31013.83479023511,\"lastPrice\":30897.350854911958,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.85,\"b\":true,\"otlkMag\":13.493987768101501,\"otlkMagForecast\":62.91430580684015,\"cap\":397180311,\"spreadPerc\":0.7,\"shareTxForMovement\":72337,\"shareTxUntilMovement\":72337,\"totalShares\":74100000,\"maxShares\":14800000}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":26034.639109939544,\"lastPrice\":25894.52122260625,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.22,\"b\":true,\"otlkMag\":20.58147677345803,\"otlkMagForecast\":70.20249308995096,\"cap\":362559419,\"spreadPerc\":0.6,\"shareTxForMovement\":30744,\"shareTxUntilMovement\":30744,\"totalShares\":65100000,\"maxShares\":13000000}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":39738.078638819105,\"lastPrice\":39585.329286011314,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.87,\"b\":true,\"otlkMag\":6.679891095976763,\"otlkMagForecast\":55.44752810938137,\"cap\":451763824,\"spreadPerc\":0.5,\"shareTxForMovement\":97088,\"shareTxUntilMovement\":97088,\"totalShares\":53000000,\"maxShares\":10600000}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":20711.486487474005,\"lastPrice\":20771.19695762586,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.65,\"b\":false,\"otlkMag\":10.630995291382114,\"otlkMagForecast\":38.373440229854026,\"cap\":238397075,\"spreadPerc\":0.3,\"shareTxForMovement\":98206,\"shareTxUntilMovement\":98206,\"totalShares\":92200000,\"maxShares\":18400000}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":8177.134398865194,\"lastPrice\":8156.1527695692885,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.58,\"b\":true,\"otlkMag\":8.857868739179084,\"otlkMagForecast\":58.53636679001926,\"cap\":37876909,\"spreadPerc\":0.3,\"shareTxForMovement\":68235,\"shareTxUntilMovement\":68235,\"totalShares\":58900000,\"maxShares\":11800000}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":4774.439631982278,\"lastPrice\":4789.898266551747,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.73,\"b\":true,\"otlkMag\":7.66820949442657,\"otlkMagForecast\":56.395749444192724,\"cap\":272122218,\"spreadPerc\":0.9,\"shareTxForMovement\":104062,\"shareTxUntilMovement\":104062,\"totalShares\":80600000,\"maxShares\":16100000}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":23317.342776171598,\"lastPrice\":23383.531635297037,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.64,\"b\":true,\"otlkMag\":6.483251686331564,\"otlkMagForecast\":55.41788606299762,\"cap\":417683796,\"spreadPerc\":0.5,\"shareTxForMovement\":67390,\"shareTxUntilMovement\":67390,\"totalShares\":37800000,\"maxShares\":7600000}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":27381.548499209388,\"lastPrice\":27449.558361629897,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.56,\"b\":false,\"otlkMag\":7.388804180116865,\"otlkMagForecast\":40.74566228713424,\"cap\":400549014,\"spreadPerc\":0.3,\"shareTxForMovement\":54848,\"shareTxUntilMovement\":54848,\"totalShares\":36300000,\"maxShares\":7300000}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":16204.724032883114,\"lastPrice\":16250.004203344595,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.63,\"b\":false,\"otlkMag\":6.937446037510326,\"otlkMagForecast\":42.5786348283988,\"cap\":30895360,\"spreadPerc\":0.4,\"shareTxForMovement\":88230,\"shareTxUntilMovement\":88230,\"totalShares\":40100000,\"maxShares\":8000000}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":7006.225111596667,\"lastPrice\":7026.734555595891,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.66,\"b\":false,\"otlkMag\":5.927076531150736,\"otlkMagForecast\":42.78222105384041,\"cap\":33700720,\"spreadPerc\":0.9,\"shareTxForMovement\":58397,\"shareTxUntilMovement\":58397,\"totalShares\":68600000,\"maxShares\":13700000}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":24071.386016716202,\"lastPrice\":24148.256472860026,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.72,\"b\":false,\"otlkMag\":9.84436722374675,\"otlkMagForecast\":41.156326859656815,\"cap\":157239114,\"spreadPerc\":1,\"shareTxForMovement\":103525,\"shareTxUntilMovement\":103525,\"totalShares\":36200000,\"maxShares\":7200000}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":29013.434381774267,\"lastPrice\":28933.86901577542,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.62,\"b\":false,\"otlkMag\":12.706774681668447,\"otlkMagForecast\":38.04033423380777,\"cap\":443367272,\"spreadPerc\":0.9,\"shareTxForMovement\":62996,\"shareTxUntilMovement\":62996,\"totalShares\":29400000,\"maxShares\":5900000}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":17867.860737947914,\"lastPrice\":17924.92062657612,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.72,\"b\":false,\"otlkMag\":6.938497501993934,\"otlkMagForecast\":45.513414155721,\"cap\":447565739,\"spreadPerc\":0.4,\"shareTxForMovement\":63985,\"shareTxUntilMovement\":63985,\"totalShares\":29100000,\"maxShares\":5800000}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":3338.3724943911566,\"lastPrice\":3301.3270392896793,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.53,\"b\":true,\"otlkMag\":2.7839421412111967,\"otlkMagForecast\":49.910762841551104,\"cap\":153719381,\"spreadPerc\":0.5,\"shareTxForMovement\":34673,\"shareTxUntilMovement\":34673,\"totalShares\":61100000,\"maxShares\":12200000}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":8074.049613454944,\"lastPrice\":8027.762114927068,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.3,\"b\":false,\"otlkMag\":9.166721176718564,\"otlkMagForecast\":41.388886351869566,\"cap\":131730659,\"spreadPerc\":1.1,\"shareTxForMovement\":37665,\"shareTxUntilMovement\":37665,\"totalShares\":39400000,\"maxShares\":7900000}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":9727.7371665279,\"lastPrice\":9756.644797028008,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.67,\"b\":false,\"otlkMag\":1.7379749135463372,\"otlkMagForecast\":49.50413335040748,\"cap\":129018522,\"spreadPerc\":0.4,\"shareTxForMovement\":85727,\"shareTxUntilMovement\":85727,\"totalShares\":34200000,\"maxShares\":6800000}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":3405.7079136504053,\"lastPrice\":3433.0487526602333,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.81,\"b\":false,\"otlkMag\":13.40488307585761,\"otlkMagForecast\":38.634929366118634,\"cap\":54476579,\"spreadPerc\":1.4,\"shareTxForMovement\":87072,\"shareTxUntilMovement\":87072,\"totalShares\":46800000,\"maxShares\":9400000}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":484.3735612323997,\"lastPrice\":487.93983256213585,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.66,\"b\":false,\"otlkMag\":9.639312778219681,\"otlkMagForecast\":40.82084528885716,\"cap\":66840949,\"spreadPerc\":0.8,\"shareTxForMovement\":27016,\"shareTxUntilMovement\":27016,\"totalShares\":56400000,\"maxShares\":11300000}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":2042.1016510521854,\"lastPrice\":2033.5332311077423,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.95,\"b\":false,\"otlkMag\":6.021623639686607,\"otlkMagForecast\":47.327978614709146,\"cap\":83754222,\"spreadPerc\":0.4,\"shareTxForMovement\":105074,\"shareTxUntilMovement\":105074,\"totalShares\":48600000,\"maxShares\":9700000}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":46521.26279184668,\"lastPrice\":47222.80899127888,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":3.4,\"b\":false,\"otlkMag\":8.703647062646334,\"otlkMagForecast\":42.10123298476422,\"cap\":98159061,\"spreadPerc\":1.5,\"shareTxForMovement\":53619,\"shareTxUntilMovement\":53619,\"totalShares\":14200000,\"maxShares\":2800000}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":9345.249940566162,\"lastPrice\":9383.797752723589,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.93,\"b\":false,\"otlkMag\":7.398062910120533,\"otlkMagForecast\":43.72916988232358,\"cap\":70256370,\"spreadPerc\":1.1,\"shareTxForMovement\":70086,\"shareTxUntilMovement\":70086,\"totalShares\":18600000,\"maxShares\":3700000}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":1994.6657860661321,\"lastPrice\":1987.788917374499,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.78,\"b\":true,\"otlkMag\":3.828240753098649,\"otlkMagForecast\":52.462024222596405,\"cap\":13485254,\"spreadPerc\":0.8,\"shareTxForMovement\":168404,\"shareTxUntilMovement\":168404,\"totalShares\":28700000,\"maxShares\":5700000}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":1126.7750448924037,\"lastPrice\":1137.3200195300735,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.11,\"b\":true,\"otlkMag\":16.287466526028687,\"otlkMagForecast\":66.53432364757879,\"cap\":46935353,\"spreadPerc\":0.8,\"shareTxForMovement\":50501,\"shareTxUntilMovement\":50501,\"totalShares\":13800000,\"maxShares\":2800000}},\"Joe's Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joe's Guns\",\"symbol\":\"JGN\",\"price\":1012.8822603963033,\"lastPrice\":1002.9621779123612,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.23,\"b\":false,\"otlkMag\":8.488957142369623,\"otlkMagForecast\":42.91004773562328,\"cap\":14164807,\"spreadPerc\":1,\"shareTxForMovement\":28731,\"shareTxUntilMovement\":28731,\"totalShares\":43100000,\"maxShares\":8600000}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":5410.365804544557,\"lastPrice\":5374.845383242159,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.49,\"b\":true,\"otlkMag\":15.468349433084201,\"otlkMagForecast\":66.82257749234857,\"cap\":2651308,\"spreadPerc\":0.7,\"shareTxForMovement\":53402,\"shareTxUntilMovement\":53402,\"totalShares\":95000000,\"maxShares\":19000000}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":10919.145108566297,\"lastPrice\":10881.980928988813,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.77,\"b\":true,\"otlkMag\":6.541795955916763,\"otlkMagForecast\":58.676510696297996,\"cap\":355782688,\"spreadPerc\":0.9,\"shareTxForMovement\":144885,\"shareTxUntilMovement\":144885,\"totalShares\":12200000,\"maxShares\":2400000}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":18539.372361162063,\"lastPrice\":18595.28755107437,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.68,\"b\":false,\"otlkMag\":10.427592932302684,\"otlkMagForecast\":36.69213918580542,\"cap\":369365653,\"spreadPerc\":0.9,\"shareTxForMovement\":145640,\"shareTxUntilMovement\":126640,\"totalShares\":25100000,\"maxShares\":5000000}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":9,\"lastUpdate\":1698858578377,\"ticksUntilCycle\":63}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":10,\"AutoexecScript\":\"\",\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"EnableHistorySearch\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxRecentScriptsCapacity\":50,\"MaxLogCapacity\":40,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"RemoteFileApiPort\":0,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":true,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":false,\"ShowMiddleNullTimeUnit\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":-3,\"y\":4,\"opened\":false},\"EditorTheme\":{\"common\":{\"accent\":\"B5CEA8\",\"bg\":\"1E1E1E\",\"fg\":\"D4D4D4\"},\"syntax\":{\"tag\":\"569CD6\",\"entity\":\"569CD6\",\"string\":\"CE9178\",\"regexp\":\"646695\",\"markup\":\"569CD6\",\"keyword\":\"569CD6\",\"comment\":\"6A9955\",\"constant\":\"569CD6\",\"error\":\"F44747\"},\"ui\":{\"line\":\"1E1E1E\",\"panel\":{\"bg\":\"252526\",\"selected\":\"252526\",\"border\":\"1E1E1E\"},\"selection\":{\"bg\":\"ADD6FF26\"}},\"base\":\"vs-dark\",\"inherit\":true},\"OwnedAugmentationsOrder\":0,\"PurchaseAugmentationsOrder\":2,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":true,\"MonacoTabSize\":2,\"MonacoDetectIndentation\":false,\"MonacoFontFamily\":\"Lucida Console\",\"MonacoFontSize\":20,\"MonacoFontLigatures\":false,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"MonacoCursorStyle\":\"line\",\"MonacoCursorBlinking\":\"blink\",\"hideTrailingDecimalZeros\":false,\"hideThousandsSeparator\":false,\"useEngineeringNotation\":false,\"disableSuffixes\":false}","VersionSave":"35","AllGangsSave":"","LastExportBonus":"1698776369929","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"fragments\":[],\"isBonusCharging\":false,\"storedCycles\":0}}"}}