{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hp\":{\"current\":40,\"max\":40},\"skills\":{\"hacking\":3269,\"strength\":347,\"defense\":301,\"dexterity\":400,\"agility\":240,\"charisma\":291,\"intelligence\":0},\"exp\":{\"hacking\":303203516938.29553,\"strength\":108965.09058515998,\"defense\":108965.09058515998,\"dexterity\":108965.09058515998,\"agility\":108965.09058515998,\"charisma\":90946.91212104658,\"intelligence\":0},\"mults\":{\"hacking_chance\":1.9254153190536512,\"hacking_speed\":1.88357896561024,\"hacking_money\":6.246559082308186,\"hacking_grow\":2.9193219473915657,\"hacking\":5.061114814473702,\"strength\":2.025842613092753,\"defense\":1.761602272254568,\"dexterity\":2.3398482181221305,\"agility\":1.4012745347479518,\"charisma\":1.761602272254568,\"hacking_exp\":7.463130856702174,\"strength_exp\":2.025842613092753,\"defense_exp\":2.025842613092753,\"dexterity_exp\":2.025842613092753,\"agility_exp\":2.025842613092753,\"charisma_exp\":1.6882021775772942,\"company_rep\":2.2284268744020284,\"faction_rep\":1.6882021775772942,\"crime_money\":1.4680018935454733,\"crime_success\":1.6681839699380376,\"hacknet_node_money\":3.3658530915447304,\"hacknet_node_purchase_cost\":0.5732281434376315,\"hacknet_node_ram_cost\":0.7493178345589955,\"hacknet_node_core_cost\":0.7493178345589955,\"hacknet_node_level_cost\":0.6369201593751461,\"work_money\":1.4680018935454733,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":29,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"DataJack\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Augmented Targeting II\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core Implant\"},{\"level\":1,\"name\":\"Enhanced Myelin Sheathing\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen IV\"},{\"level\":1,\"name\":\"The Black Hand\"},{\"level\":1,\"name\":\"Neuroreceptor Management Implant\"},{\"level\":1,\"name\":\"Nanofiber Weave\"},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":1,\"name\":\"Nuoptimal Nootropic Injector Implant\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"Speech Enhancement\"},{\"level\":1,\"name\":\"Neuregen Gene Modification\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core V2 Upgrade\"},{\"level\":1,\"name\":\"BitRunners Neurolink\"},{\"level\":1,\"name\":\"Artificial Bio-neural Network Implant\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen V\"},{\"level\":1,\"name\":\"Neural Accelerator\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"INFRARET Enhancement\"},{\"level\":1,\"name\":\"Combat Rib I\"},{\"level\":1,\"name\":\"NutriGen Implant\"}],\"queuedAugmentations\":[{\"level\":1,\"name\":\"Combat Rib II\"},{\"level\":1,\"name\":\"The Red Pill\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core V3 Upgrade\"},{\"level\":1,\"name\":\"Embedded Netburner Module Direct Memory Access Upgrade\"},{\"level\":1,\"name\":\"NEMEAN Subdermal Weave\"},{\"level\":1,\"name\":\"Synthetic Heart\"},{\"level\":1,\"name\":\"Embedded Netburner Module Analyze Engine\"},{\"level\":1,\"name\":\"Synfibril Muscle\"},{\"level\":30,\"name\":\"NeuroFlux Governor\"},{\"level\":31,\"name\":\"NeuroFlux Governor\"},{\"level\":32,\"name\":\"NeuroFlux Governor\"},{\"level\":33,\"name\":\"NeuroFlux Governor\"},{\"level\":34,\"name\":\"NeuroFlux Governor\"},{\"level\":35,\"name\":\"NeuroFlux Governor\"},{\"level\":36,\"name\":\"NeuroFlux Governor\"},{\"level\":37,\"name\":\"NeuroFlux Governor\"},{\"level\":38,\"name\":\"NeuroFlux Governor\"},{\"level\":39,\"name\":\"NeuroFlux Governor\"},{\"level\":40,\"name\":\"NeuroFlux Governor\"},{\"level\":41,\"name\":\"NeuroFlux Governor\"}],\"city\":\"Sector-12\",\"bitNodeN\":1,\"corporation\":null,\"gang\":null,\"bladeburner\":null,\"currentServer\":\"home\",\"factions\":[\"Daedalus\",\"BitRunners\",\"The Black Hand\",\"Volhaven\",\"Netburners\",\"Tian Di Hui\",\"Shadows of Anarchy\"],\"factionInvitations\":[],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":178,\"moneyGainRatePerSecond\":1143.3754590009291,\"onlineTimeSeconds\":303247.000000389,\"ram\":8,\"totalMoneyGenerated\":346718201.0407385,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":1,\"moneyGainRatePerSecond\":5.048779637317096,\"onlineTimeSeconds\":303178.4000003888,\"ram\":1,\"totalMoneyGenerated\":1530680.9323926745,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":1,\"moneyGainRatePerSecond\":5.048779637317096,\"onlineTimeSeconds\":303176.4000003888,\"ram\":1,\"totalMoneyGenerated\":1530670.8348333994,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":1,\"moneyGainRatePerSecond\":5.048779637317096,\"onlineTimeSeconds\":303175.40000038873,\"ram\":1,\"totalMoneyGenerated\":1530665.786053762,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":1,\"moneyGainRatePerSecond\":5.048779637317096,\"onlineTimeSeconds\":303175.00000038877,\"ram\":1,\"totalMoneyGenerated\":1530663.766541907,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":1,\"moneyGainRatePerSecond\":5.048779637317096,\"onlineTimeSeconds\":303174.60000038875,\"ram\":1,\"totalMoneyGenerated\":1530661.7470300521,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":1,\"moneyGainRatePerSecond\":5.048779637317096,\"onlineTimeSeconds\":303174.60000038875,\"ram\":1,\"totalMoneyGenerated\":1530661.7470300521,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":1,\"moneyGainRatePerSecond\":5.048779637317096,\"onlineTimeSeconds\":303174.40000038873,\"ram\":1,\"totalMoneyGenerated\":1530660.7372741245,\"name\":\"hacknet-node-7\"}}],\"has4SData\":true,\"has4SDataTixApi\":true,\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0,\"Company Favor\":0}}},\"hasTixApiAccess\":true,\"hasWseAccount\":true,\"jobs\":{\"Noodle Bar\":\"Waiter\",\"FoodNStuff\":\"Employee\"},\"karma\":0,\"numPeopleKilled\":0,\"location\":\"Alpha Enterprises\",\"money\":5856587503835.8955,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":128406070586699,\"hacknet\":357432866.5859694,\"hacknet_expenses\":-8879910.052515687,\"hospitalization\":-5700000,\"infiltration\":481483.1819191038,\"sleeves\":0,\"stock\":0,\"total\":5856586503835.8955,\"work\":90977.94935059064,\"servers\":-69919338136591.23,\"other\":-307599997.64256656,\"augmentations\":-52630181770909.68}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":2,\"class\":-7552969.599999988,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":137593331265256.16,\"hacknet\":17059260871.41269,\"hacknet_expenses\":-12617723879.587856,\"hospitalization\":-10434000,\"infiltration\":481483.1819191038,\"sleeves\":0,\"stock\":-31879971607.750565,\"total\":6456840900207.2705,\"work\":262210.2925051129,\"servers\":-76613451132651.34,\"other\":-11552899700.654032,\"augmentations\":-54484030654377.49}},\"playtimeSinceLastAug\":304207000,\"playtimeSinceLastBitnode\":726665400,\"lastAugReset\":1698858615488,\"lastNodeReset\":-1,\"purchasedServers\":[\"qst0\",\"qst1\",\"qst2\",\"qst3\",\"qst4\",\"qst5\",\"qst6\",\"qst7\",\"qst8\",\"qst9\",\"qst10\",\"qst11\",\"qst12\",\"qst13\",\"qst14\",\"qst15\",\"qst16\",\"qst17\",\"qst18\",\"qst19\",\"qst20\",\"qst21\",\"qst22\",\"qst23\",\"qst24\"],\"scriptProdSinceLastAug\":128406070584896,\"sleeves\":[],\"sleevesFromCovenant\":0,\"sourceFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"exploits\":[],\"achievements\":[{\"ID\":\"NS2\",\"unlockedOn\":1698436228268},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1698437728271},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1698439954470},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1698440074470},{\"ID\":\"TOR\",\"unlockedOn\":1698441394471},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1698445474475},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1698450814473},{\"ID\":\"NITESEC\",\"unlockedOn\":1698458984259},{\"ID\":\"TRAVEL\",\"unlockedOn\":1698461504266},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1698475673059},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1698477953067},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1698517313063},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1698534473061},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1698534473065},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1698541673062},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1698691760381},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1698692420382},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1698692540383},{\"ID\":\"4S\",\"unlockedOn\":1698811804980},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1698813184987},{\"ID\":\"DISCOUNT\",\"unlockedOn\":1698813724987},{\"ID\":\"DONATION\",\"unlockedOn\":1698858664977},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1698913452002}],\"terminalCommandHistory\":[\"s 5\",\"s 3\",\"run main.js \",\"run purchase-servers.js \",\"run delete-servers.js \",\"vim purchase-servers.js \",\"run purchase-servers.js \",\"run main.js \",\"kill main.js \",\"killall\",\"rh\",\"buy -l\",\"buy HTTPWorm.exe \",\"buy SQLInject.exe \",\"buy DeepscanV2.exe \",\"buy -l\",\"s 10\",\"b\",\"s 10\",\"b\",\"sa\",\"a\",\"b\",\"run NUKE.exe \",\"run HTTPWorm.exe \",\"run SQLInject.exe \",\"run relaySMTP.exe \",\"run BruteSSH.exe \",\"b\",\"run NUKE.exe \",\"ba\",\"b\",\"s 10\",\"ls\",\"b\",\"home\",\"run main.js \",\"killalll\",\"killall\",\"m\",\"run fl1ght.exe \",\"m\",\"run main.js \",\"killall\",\"run main\",\"m\",\"run fl1ght.exe \",\"ls\",\"m\",\"ls\"],\"lastUpdate\":1699162822375,\"lastSave\":1699162788975,\"totalPlaytime\":726665400,\"currentWork\":{\"ctor\":\"FactionWork\",\"data\":{\"type\":\"FACTION\",\"singularity\":false,\"cyclesWorked\":1217740,\"factionWorkType\":\"hacking\",\"factionName\":\"Daedalus\"}},\"focus\":false,\"entropy\":0,\"identifier\":\"1f5c81e4d12ce2\"}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":6,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":true,\"ip\":\"59.5.7.3\",\"isConnectedTo\":true,\"maxRam\":524288,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\",\"j4.msg\",\"19dfj3l1nd.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"BruteSSH.exe\",\"fl1ght.exe\",\"AutoLink.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\",\"DeepscanV2.exe\"],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"home\"}}],[\"purchase-servers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// purchase-servers.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://github.com/qst0/bitburner/blob/main/work.js work.js\\n// wget https://github.com/qst0/bitburner/blob/main/purchase-servers.js purchase-servers.js\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const ram = 4;\\n    const mem_work = ns.getScriptRam('work.js')\\n    const hostname_prefix = 'qst';\\n    let i = 0;\\n    while (i < ns.getPurchasedServerLimit()) {\\n        if (ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram)) {\\n            let hostname = hostname_prefix + i\\n            ns.purchaseServer(hostname, ram);\\n            ns.scp(\\\"work.js\\\", hostname);\\n            ns.exec(\\\"work.js\\\", hostname, Math.floor(ram/mem_work));\\n            ++i;\\n        }\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"purchase-servers.js\",\"server\":\"home\"}}],[\"upgrade_servers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  const hostname_prefix = 'qst';\\n  while (true) {\\n    let i = 0;\\n    for (let i = 0; i < ns.getPurchasedServerLimit(); i++) {\\n      let hostname = hostname_prefix + i\\n      let money = ns.getServerMoneyAvailable(\\\"home\\\")\\n      let ram = ns.getServerMaxRam(hostname) * 2\\n      let cost = ns.getPurchasedServerCost(ram)\\n      console.log(money, ram, cost)\\n      if (money > cost) {\\n        ns.upgradePurchasedServer(hostname, ram);\\n      }\\n      await ns.sleep(1000);\\n    }\\n  }\\n}\",\"filename\":\"upgrade_servers.js\",\"server\":\"home\"}}],[\"main.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// main.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/main.js main.js\\n\\n/** @param {import(\\\".\\\").NS } ns */\\n\\n//        //  \\n/* CONFIG */\\n//        //\\n\\nconst this_filename = 'core.js'\\nconst work_script_filename = 'work.js'\\nconst hostname_prefix = 'qst';\\nlet upgrade_servers_on = false;\\nlet deploy_on = false;\\nlet server_dict = localStorage.getItem('server_dict');\\n\\nif (!server_dict) {\\n  console.log(\\\"Setting server_dict for the first time\\\")\\n  server_dict = {}\\n  localStorage.setItem('server_dict', JSON.stringify(server_dict));\\n} else {\\n  server_dict = JSON.parse(server_dict);\\n  console.log(\\\"Loaded Server Data from localStorage:\\\", server_dict, Object.keys(server_dict).length)\\n}\\n\\nlet server_dict_len = Object.keys(server_dict).length;\\n// prepare ns update_data vars\\nlet mem_main, mem_work, home_ram, hacking_level, server_limit, money, ports_open;\\n\\n//      //\\n/* MAIN */\\n//      //\\nexport async function main(ns) {\\n  const main_version = 0.3\\n  ns.print(\\\"Main version: \\\"+ main_version)\\n\\n  console.log(\\\"ns:\\\", ns);\\n  ns.tprint('Program START');\\n  //Print the args in the console, if there are any\\n  if (ns.args.length) {\\n    let msg = \\\" \\\"\\n    for (let i = 0; i < ns.args.length; i++) {\\n      msg = msg + \\\" \\\" + ns.args[i]\\n    }\\n    console.log(msg.trim())\\n  }\\n\\n  //.......//\\n  // Flags //\\n  //.......//\\n  // Setup the flags\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"purchase-servers\\\", false],\\n    [\\\"buy\\\", false],\\n    [\\\"deploy\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"This is the main qst script.\\\");\\n    ns.tprint(`Usage: run ${ns.getScriptName()}`);\\n    ns.tprint(\\\"Example:\\\");\\n    ns.tprint(`> run ${ns.getScriptName()}`);\\n    ns.tprint(\\\"Flags: --help            - This message\\\");\\n    ns.tprint(\\\"       --purchase-severs - Purchase the first round of servers\\\");\\n    return;\\n  } else if (args.purchase_servers || args.buy) {\\n    purchase_servers()\\n  } else if (args.deploy) {\\n    deploy_on = true;\\n  }\\n\\n  //            //\\n  /* FUNCTIONS  */\\n  //            //\\n\\n  function save_server_dict() { // to localStorage\\n    localStorage.setItem('server_dict', JSON.stringify(server_dict));\\n    server_dict_len = Object.keys(server_dict).length;\\n    //console.log(server_dict, server_dict_len)\\n  }\\n\\n\\n  function update_data() {\\n    mem_main = ns.getScriptRam(this_filename);\\n    console.log(\\\"mem_main\\\", mem_main)\\n    if (mem_main == 0) {\\n      mem_main = 7.45\\n    }\\n    mem_work = ns.getScriptRam(work_script_filename)\\n    home_ram = ns.getServerMaxRam(\\\"home\\\")\\n    hacking_level = ns.getHackingLevel()\\n    server_limit = ns.getPurchasedServerLimit()\\n    money = ns.getServerMoneyAvailable(\\\"home\\\")\\n    // if we get a new hacking program, we need to know.\\n    // for now, just always recheck on update to confirm\\n    ports_open = 0;\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n      ports_open++;\\n    }\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n      ports_open++;\\n    }\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n      ports_open++;\\n    }\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n      ports_open++;\\n    }\\n    if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n      ports_open++;\\n    }\\n  }\\n\\n  // Discover other servers\\n  function discover_servers(current_server) {\\n    const server_list = ns.scan(current_server);\\n    for (const server of server_list) {\\n      if (!server_dict.hasOwnProperty(server)) {\\n        server_dict[server] = ns.getServer(server);\\n      }\\n    }\\n  }\\n\\n  // USES HARD DATA FROM TOP OF FILE. TODO use SERVER DATA/DICT\\n  function select_target(hackLevel, portsOpen) {\\n    let highestValue = -1; // Init with a low value\\n    let target = null;\\n    Object.getOwnPropertyNames(server_dict).forEach((key) => {\\n      let serverHackLevel = server_dict[key]['requiredHackingSkill'];\\n      let numOpenPortsRequired = server_dict[key]['numOpenPortsRequired'];\\n      if ((serverHackLevel <= (hackLevel/2)) && numOpenPortsRequired <= portsOpen) {\\n        // Hacklevel/2 suggetion read from discord\\n        // use a better formula here? this just avoids hacking home and dark-net\\n        let value = serverHackLevel // * serverPortsOpen;\\n        if (value > highestValue) {\\n          highestValue = value;\\n          target = key;\\n        }\\n      }\\n    });\\n    console.log(\\\"Targeting: \\\", target,\\n     \\\"Hacking Level: \\\", hackLevel,\\n    \\\"Hack Req: \\\", highestValue,\\n    \\\"Difficulty: \\\", server_dict[target]['hackDifficulty'])\\n    return target;\\n  }\\n\\nfunction run_each_server(hostnames) {\\n  let servers_deployed_to = 0\\n  for (const hostname in hostnames) {\\n    let server = ns.getServer(hostname)\\n    discover_servers(hostname)\\n\\n    if (!server.hasAdminRights || server.openPortCount < ports_open) {\\n      if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(hostname)\\n      }\\n      if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n        ns.ftpcrack(hostname)\\n      }\\n      if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n        ns.relaysmtp(hostname)\\n      }\\n      if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n        ns.httpworm(hostname)\\n      }\\n      if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n        ns.sqlinject(hostname)\\n      }\\n\\n      if (server.openPortCount >= server.numOpenPortsRequired) {\\n        ns.nuke(hostname);\\n      }\\n    }\\n\\n    if (deploy_on && server.maxRam > mem_work && server.hostname != 'home') {\\n      ns.scp(work_script_filename, hostname)\\n      ns.killall(hostname)\\n      hacking_level = ns.getHackingLevel()\\n      target = select_target(hacking_level, ports_open)\\n      ns.exec(work_script_filename, hostname, Math.floor(server.maxRam / mem_work),\\n        target, server_dict[target].moneyMax, server_dict[target].minDifficulty)\\n      servers_deployed_to++;\\n    }\\n\\n  }\\n  // Finished roll out, turn it off.\\n  if (deploy_on) {\\n    console.log(\\\"Finished deploying workers to \\\" + servers_deployed_to + \\\" servers!\\\")\\n    deploy_on = false;\\n  }\\n\\n}\\n\\n\\n//..................//\\n// async functions  //\\n//..................//\\n\\nasync function purchase_servers() {\\n  ns.exec('purchase-servers.js', 'home')\\n  ns.tprint(\\\"ERROR: Please `run purchase-servers.js` instead\\\")\\n  /* \\n  const purchase_ram = 4;\\n  let i = 0;\\n  while (i < ns.getPurchasedServerLimit()) {\\n    if (money > ns.getPurchasedServerCost(purchase_ram)) {\\n      let hostname = hostname_prefix + i\\n      ns.purchaseServer(hostname, purchase_ram);\\n      ns.scp(work_script_filename, hostname);\\n      ns.exec(work_script_filename, hostname, Math.floor(purchase_ram / mem_work));\\n      ++i;\\n    }\\n    await ns.sleep(1000);\\n  }\\n  */\\n}\\n\\nasync function upgrade_servers() {\\n  for (let i = 0; i < server_limit; i++) {\\n    let hostname = hostname_prefix + i\\n    let ram = ns.getServerMaxRam(hostname) * 2\\n    let cost = ns.getPurchasedServerCost(ram)\\n    if (money > cost) {\\n      console.log(\\\"Upgrading \\\" + hostname + \\\" to \\\" + ram)\\n      ns.upgradePurchasedServer(hostname, ram);\\n      //spin up another worker\\n      ns.killall(hostname)\\n      let target = select_target(hacking_level, ports_open)\\n      ns.exec(work_script_filename, hostname, Math.floor(ram / mem_work),\\n        target, server_dict[target].moneyMax, server_dict[target].minDifficulty)\\n\\n    } else {\\n      //console.log(\\\"Cannot Upgrade \\\" + hostname + \\\" to \\\" + ram + \\\"\\\\n\\\" +\\n      //\\\"$\\\" + Math.floor(money) + \\\" < Cost $\\\" + cost + \\\"\\\\n\\\" +\\n      //\\\"Short $\\\" + Math.floor(cost - money))\\n    }\\n    await ns.sleep(500);\\n  }\\n}\\n\\n// Home Work\\nupdate_data(); // Make sure we have the most up to date data\\nns.killall('home') // it doesn't stop itself ;-)\\nconsole.log(\\\"homeram\\\", home_ram)\\nconsole.log(\\\"memmain\\\", mem_main)\\nlet home_mem_left = home_ram - mem_main\\nconsole.log(\\\"home_mem_left\\\", home_ram - mem_main)\\nlet target = select_target(hacking_level, ports_open)\\nlet threads = Math.floor(home_mem_left / mem_work)\\nconsole.log(\\\"threads\\\", threads)\\nconsole.log(\\\"target\\\", target)\\nlet moneyMax = 1000000000\\nlet minDifficulty = 100\\nif (server_dict[target]) {\\n  moneyMax = server_dict[target].moneyMax;\\n  minDifficulty = server_dict[target].minDifficulty;\\n}\\nns.exec(\\n  work_script_filename,\\n  \\\"home\\\",\\n  threads,\\n  target,\\n  moneyMax,\\n  minDifficulty\\n)\\n\\n// Functions END\\nlet question = \\\"Would you like to configure?\\\"\\nlet reset_config = await (ns.prompt(question))\\n\\n// Yes or No Prompt Interactive Configuration\\nif (reset_config) {\\n  question = \\\"Reset local storage?\\\"\\n  if (await (ns.prompt(question))) {\\n    console.log(\\\"RESETTING LOCAL STORAGE\\\")\\n    ns.tprint(\\\"RESETING LOCAL STORAGE\\\")\\n    localStorage.clear()\\n  }\\n\\n  question = \\\"Deploy on all servers?\\\"\\n  deploy_on = await (ns.prompt(question))\\n\\n  question = \\\"Upgrade servers?\\\"\\n  upgrade_servers_on = await (ns.prompt(question))\\n\\n  reset_config = false;\\n}\\n\\n// Move these to config?\\nlet searching = true;\\ndiscover_servers('home')\\nlet known_highest_server_count = 96;\\n\\nwhile (searching || upgrade_servers_on) {\\n  update_data();\\n  if (searching) {\\n    run_each_server(server_dict);\\n    save_server_dict();\\n    // TODO is this true? I'm done searching if I find 96 servers\\n    if (server_dict_len >= known_highest_server_count) {\\n      console.log(\\\"search complete\\\", server_dict, server_dict_len)\\n      searching = false;\\n    }\\n  }\\n  if (upgrade_servers_on) {\\n    await upgrade_servers()\\n  }\\n  console.log(\\\"cycle complete\\\")\\n  await ns.sleep(1000)\\n}\\nns.tprint('Program END');\\n}\",\"filename\":\"main.js\",\"server\":\"home\"}}],[\"autocomplete.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// autocomplete.js\\n// Bitburner v2.5.0\\n// wget https://github.com/qst0/bitburner/blob/main/autocomplete.js autocomplete.js\\n\\n// Autocomplete in vscode using :\\n\\n/** @param {import(\\\".\\\").NS } ns */\\n\\n// https://github.com/bitburner-official/bitburner-src/blob/stable/src/ScriptEditor/NetscriptDefinitions.d.ts\\n// save this file as 'index.d.ts'\\n// in the directory where you edit your scripts. \\n\\n\\nexport async function main(ns) {\\n  ns.tprint(\\\"INFO No need to run this script, it's an example.\\\")\\n  ns.tprint(\\\"ERROR Did you make sure to follow the instructions?\\\")\\n  ns.tprint(\\\"SUCCESS you now have autocomplete for all `ns.` commands.\\\")\\n  const hackingLevel = ns.getHackingLevel();\\n}\",\"filename\":\"autocomplete.js\",\"server\":\"home\"}}],[\"delete-servers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// delete-servers.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://github.com/qst0/bitburner/blob/main/delete-servers.js delete-servers.js\\n\\n// Coding Autocomplete\\n// /** @param {NS} ns */ // in-game editor\\n/** @param {import(\\\".\\\").NS } ns */ // vscode\\n\\n// delete servers\\nexport async function main(ns) {\\n    let servers = ns.getPurchasedServers();\\n    console.log(\\\"Servers:\\\", servers)\\n    for (let i = 0; i<servers.length; i++) {\\n      ns.killall(servers[i])\\n      ns.deleteServer(servers[i])\\n    }\\n    console.log(\\\"Deleted all purchased servers\\\", servers)\\n}\",\"filename\":\"delete-servers.js\",\"server\":\"home\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// hack.hs\\n// Bitburner v2.5.0\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/hack.js hack.js\\n\\n/** @param {import(\\\".\\\").NS } ns */\\n\\n//Just hack all the servers I've copied into here.\\n//hack them down to $0 and move on.\\n\\nconst HARD_DATA = ['solaris', 'defcomm', 'taiyang-digital', 'aerocorp', 'icarus', 'infocomm', 'galactic-cyber', 'omnia', 'deltaone', 'syscore', 'zeus-med', 'zb-institute', 'darkweb', 'univ-energy', 'unitalife', 'nova-med', 'global-pharm', 'zb-def', 'snap-fitness', 'lexo-corp', 'alpha-ent', 'aevum-police', 'millenium-fitness', 'rho-construction', 'summit-uni', 'rothman-uni', 'catalyst', 'netlink', 'I.I.I.I', 'computek', 'johnson-ortho', 'the-hub', 'crush-fitness', 'avmnite-02h', 'omega-net', 'silver-helix', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'CSEC', 'neo-net', 'harakiri-sushi', 'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'n00dles', 'foodnstuff']\\n\\nexport async function main(ns) {\\n    async function hack_everything(hostnames){\\n        for (let i = hostnames.length-1; i >= 0; i--) {\\n            let target = hostnames[String(i)];\\n            let targetMoney = ns.getServerMoneyAvailable(target)\\n            while (targetMoney > 0) {\\n                let money = await ns.hack(target)\\n                console.log(target + \\\" hacked for \\\" + money + \\\" of \\\" + targetMoney);\\n                targetMoney = ns.getServerMoneyAvailable(target)\\n                console.log(\\\"target money remaining:\\\", targetMoney)\\n            }\\n        }\\n    }\\n    await hack_everything(HARD_DATA);\\n}\",\"filename\":\"hack.js\",\"server\":\"home\"}}],[\"test.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.alterReality()\\n}\",\"filename\":\"test.js\",\"server\":\"home\"}}],[\"eat-noodles.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function eatNoodles() {\\n  const d = eval('document');\\n  d.querySelectorAll('.SnackbarContainer-root')[0].style.display = 'none';\\n  \\n  const buttons = d.querySelectorAll('button');\\n  let eatNoodlesButton;\\n  for (const button of buttons) {\\n    if (button.textContent === 'Eat noodles') {\\n      eatNoodlesButton = button;\\n      break;\\n    }\\n  }\\n  if (eatNoodlesButton === null) return;\\n  eatNoodlesButton.click();\\n}\\n\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.tail();\\n  while (true) {\\n    eatNoodles();\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"eat-noodles.js\",\"server\":\"home\"}}]]},\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\",\"qst0\",\"qst1\",\"qst2\",\"qst3\",\"qst4\",\"qst5\",\"qst6\",\"qst7\",\"qst8\",\"qst9\",\"qst10\",\"qst11\",\"qst12\",\"qst13\",\"qst14\",\"qst15\",\"qst16\",\"qst17\",\"qst18\",\"qst19\",\"qst20\",\"qst21\",\"qst22\",\"qst23\",\"qst24\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"main.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":243145.8100004676,\"ramUsage\":7.45,\"server\":\"home\",\"scriptKey\":\"main.js*[]\",\"title\":\"main.js \",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1315447122750,33],\"dataMap\":{\"megacorp\":[7274683676750,3693712,3812864,3455408]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2108182249.001407,\"onlineMoneyMade\":7274683676750,\"onlineRunningTime\":243145.8100004676,\"ramUsage\":2.2,\"server\":\"home\",\"scriptKey\":\"work.js*[\\\"megacorp\\\",1315447122750,33]\",\"title\":\"work.js megacorp 1315447122750 33\",\"threads\":119152,\"temporary\":false}}]}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-394422-NoodleBar.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,0,0,1,0,1,0,1],[0,0,0,1,0,0,1,0,0],[0,0,0,0,0,0,0,0,1],[0,0,0,0,0,0,1,0,1],[1,0,0,0,0,0,0,0,0],[0,1,0,0,1,0,0,1,0]],\"reward\":{\"type\":2,\"name\":\"Noodle Bar\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-712799.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[30,27,5,35],[11,37,11,1],[42,46,46,8],[39,50,45,42],[45,25,28,49],[1,8,38,20],[27,5,20,4],[32,1,6,28],[50,42,8,19],[44,40,47,40],[37,3,50,16],[21,11,21,29]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"ecorp\",\"httpPortOpen\":true,\"ip\":\"75.9.4.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":32821195873,\"moneyMax\":820529896825,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1370,\"serverGrowth\":99,\"runningScripts\":[]}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"megacorp\",\"httpPortOpen\":true,\"ip\":\"65.0.8.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":62.46000000000001,\"minDifficulty\":33,\"moneyAvailable\":1454936735350,\"moneyMax\":1454936735350,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1264,\"serverGrowth\":99,\"runningScripts\":[]}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"b-and-a\",\"httpPortOpen\":true,\"ip\":\"86.1.4.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":28444751469,\"moneyMax\":711118786725,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1084,\"serverGrowth\":74,\"runningScripts\":[]}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"86.4.7.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"blade\"}}]]},\"serversOnNetwork\":[\"omnitek\",\"ecorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":39.292,\"minDifficulty\":31,\"moneyAvailable\":384818728375,\"moneyMax\":384818728375,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":967,\"serverGrowth\":55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1315447122750,33],\"dataMap\":{\"megacorp\":[0,870,928,841]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":484794.1589116307,\"onlineMoneyMade\":0,\"onlineRunningTime\":243139.6100004677,\"ramUsage\":2.2,\"server\":\"blade\",\"scriptKey\":\"work.js*[\\\"megacorp\\\",1315447122750,33]\",\"title\":\"work.js megacorp 1315447122750 33\",\"threads\":29,\"temporary\":false}}]}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nwo\",\"httpPortOpen\":true,\"ip\":\"53.0.8.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"kuai-gong\",\"megacorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":35344562165,\"moneyMax\":883614054125,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1288,\"serverGrowth\":80,\"runningScripts\":[]}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"clarkinc\",\"httpPortOpen\":true,\"ip\":\"9.6.6.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnitek\",\"fulcrumassets\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":46,\"hackDifficulty\":42.894,\"minDifficulty\":15,\"moneyAvailable\":548424035500,\"moneyMax\":548424035500,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1185,\"serverGrowth\":49,\"runningScripts\":[]}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-865430.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[15,21],[20,25],[10,14],[9,15],[10,13],[23,24],[23,31],[24,30],[4,13],[15,20],[13,15],[15,18],[3,9],[5,10],[12,19],[19,24],[20,30]],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"22.5.7.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"omnitek\"}}]]},\"serversOnNetwork\":[\"helios\",\"b-and-a\",\"blade\",\"clarkinc\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":19879849415,\"moneyMax\":496996235375,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":965,\"serverGrowth\":96,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1315447122750,33],\"dataMap\":{\"megacorp\":[0,1740,1856,1682]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":969588.3178232614,\"onlineMoneyMade\":0,\"onlineRunningTime\":243139.6100004677,\"ramUsage\":2.2,\"server\":\"omnitek\",\"scriptKey\":\"work.js*[\\\"megacorp\\\",1315447122750,33]\",\"title\":\"work.js megacorp 1315447122750 33\",\"threads\":58,\"temporary\":false}}]}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"4sigma\",\"httpPortOpen\":true,\"ip\":\"68.6.3.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":56,\"minDifficulty\":19,\"moneyAvailable\":19576826696,\"moneyMax\":489420667400,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1118,\"serverGrowth\":89,\"runningScripts\":[]}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"kuai-gong\",\"httpPortOpen\":true,\"ip\":\"51.3.9.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"helios\",\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":29872012810,\"moneyMax\":746800320250,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1126,\"serverGrowth\":94,\"runningScripts\":[]}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":true,\"ip\":\"77.8.4.7\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"fulcrumtech\"}}]]},\"serversOnNetwork\":[\"titan-labs\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":32.412000000000006,\"minDifficulty\":32,\"moneyAvailable\":0,\"moneyMax\":41268236325,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1082,\"serverGrowth\":91,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1315447122750,33],\"dataMap\":{\"megacorp\":[0,26970,29760,26970]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":15546847.165097145,\"onlineMoneyMade\":0,\"onlineRunningTime\":243139.6100004677,\"ramUsage\":2.2,\"server\":\"fulcrumtech\",\"scriptKey\":\"work.js*[\\\"megacorp\\\",1315447122750,33]\",\"title\":\"work.js megacorp 1315447122750 33\",\"threads\":930,\"temporary\":false}}]}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-663331-BitRunners.cct\",\"type\":\"Encryption II: Vigenère Cipher\",\"data\":[\"CLOUDLINUXLOGINMEDIAMOUSE\",\"DIGITAL\"],\"reward\":{\"type\":0,\"name\":\"BitRunners\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-704421-TheBlackHand.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"hZUU22aaNxxR6WWllbb55d11ppppppppppppVVVVVVVVVVVjjQQQQQQQQQQQQQfffffPPPPP\",\"reward\":{\"type\":0,\"name\":\"The Black Hand\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":true,\"ip\":\"35.8.0.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":33,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1193,\"serverGrowth\":1,\"runningScripts\":[]}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"stormtech\",\"httpPortOpen\":true,\"ip\":\"88.7.9.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"titan-labs\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":1092085154,\"moneyMax\":27302128850,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":888,\"serverGrowth\":75,\"runningScripts\":[]}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-909659-TheBlackHand.cct\",\"type\":\"Array Jumping Game\",\"data\":[5,0,2,3,4,0,4],\"reward\":{\"type\":0,\"name\":\"The Black Hand\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"52.5.4.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":30,\"minDifficulty\":30,\"moneyAvailable\":933270028,\"moneyMax\":23331750700,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1018,\"serverGrowth\":51,\"runningScripts\":[]}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-76898.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":1389,\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-471102-NoodleBar.cct\",\"type\":\"Encryption I: Caesar Cipher\",\"data\":[\"QUEUE LOGIC MEDIA ARRAY PRINT\",15],\"reward\":{\"type\":2,\"name\":\"Noodle Bar\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"93.5.7.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"icarus\",\"titan-labs\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":796362703,\"moneyMax\":19909067575,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":903,\"serverGrowth\":45,\"runningScripts\":[]}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"57.6.3.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"helios\"}}]]},\"serversOnNetwork\":[\"run4theh111z\",\"omnitek\",\"4sigma\",\"kuai-gong\",\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":747841266,\"moneyMax\":18696031650,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":812,\"serverGrowth\":78,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1315447122750,33],\"dataMap\":{\"megacorp\":[0,783,957,841]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":488332.802407336,\"onlineMoneyMade\":0,\"onlineRunningTime\":243139.6100004677,\"ramUsage\":2.2,\"server\":\"helios\",\"scriptKey\":\"work.js*[\\\"megacorp\\\",1315447122750,33]\",\"title\":\"work.js megacorp 1315447122750 33\",\"threads\":29,\"temporary\":false}}]}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"54.6.6.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"vitalife\"}}]]},\"serversOnNetwork\":[\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":751046836,\"moneyMax\":18776170900,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":828,\"serverGrowth\":75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1315447122750,33],\"dataMap\":{\"megacorp\":[0,189,224,203]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":117019.27973729013,\"onlineMoneyMade\":0,\"onlineRunningTime\":243139.6100004677,\"ramUsage\":2.2,\"server\":\"vitalife\",\"scriptKey\":\"work.js*[\\\"megacorp\\\",1315447122750,33]\",\"title\":\"work.js megacorp 1315447122750 33\",\"threads\":7,\"temporary\":false}}]}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-940605.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"jjPPddddddddUUWebbaVViiiiiiyJ66666611111111111111vvww22WWTMMlYYm555600QXXXXXXXXXXXXXNNUU2MM\",\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-486303.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[8,[29,12,167,169,67,157,52,129]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"89.6.9.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"unitalife\",\"infocomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":91,\"minDifficulty\":30,\"moneyAvailable\":920356396,\"moneyMax\":23008909900,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":879,\"serverGrowth\":93,\"runningScripts\":[]}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-591703-Volhaven.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[8,14],[3,9],[5,13],[1,2],[22,24],[10,18],[15,20],[7,12],[2,6],[23,32],[20,28],[13,15],[7,9],[7,15],[6,7]],\"reward\":{\"type\":0,\"name\":\"Volhaven\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"88.6.1.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"univ-energy\"}}]]},\"serversOnNetwork\":[\"deltaone\",\"taiyang-digital\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":1192144748,\"moneyMax\":29803618700,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":844,\"serverGrowth\":86,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1315447122750,33],\"dataMap\":{\"megacorp\":[0,406,448,406]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":234038.55947458025,\"onlineMoneyMade\":0,\"onlineRunningTime\":243139.6100004677,\"ramUsage\":2.2,\"server\":\"univ-energy\",\"scriptKey\":\"work.js*[\\\"megacorp\\\",1315447122750,33]\",\"title\":\"work.js megacorp 1315447122750 33\",\"threads\":14,\"temporary\":false}}]}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"93.9.1.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"titan-labs\"}}]]},\"serversOnNetwork\":[\"infocomm\",\"fulcrumtech\",\"stormtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":891133700,\"moneyMax\":22278342500,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":800,\"serverGrowth\":73,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1315447122750,33],\"dataMap\":{\"megacorp\":[0,1450,1856,1682]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":962511.0308318507,\"onlineMoneyMade\":0,\"onlineRunningTime\":243139.6100004677,\"ramUsage\":2.2,\"server\":\"titan-labs\",\"scriptKey\":\"work.js*[\\\"megacorp\\\",1315447122750,33]\",\"title\":\"work.js megacorp 1315447122750 33\",\"threads\":58,\"temporary\":false}}]}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"90.2.6.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"microdyne\"}}]]},\"serversOnNetwork\":[\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":23,\"minDifficulty\":23,\"moneyAvailable\":15078321800,\"moneyMax\":15078321800,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":861,\"serverGrowth\":78,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1315447122750,33],\"dataMap\":{\"megacorp\":[9.381014950194025,783,957,841]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":493640.767650894,\"onlineMoneyMade\":9.381014950194025,\"onlineRunningTime\":243139.6100004677,\"ramUsage\":2.2,\"server\":\"microdyne\",\"scriptKey\":\"work.js*[\\\"megacorp\\\",1315447122750,33]\",\"title\":\"work.js megacorp 1315447122750 33\",\"threads\":29,\"temporary\":false}}]}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"64.0.6.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"univ-energy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":868498343,\"moneyMax\":21712458575,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":891,\"serverGrowth\":73,\"runningScripts\":[]}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-232843-NoodleBar.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,0,0,0,0,1,0,0],[0,0,1,0,0,0,0,0,0],[0,1,0,0,1,1,0,1,0],[0,0,0,0,1,1,0,0,1],[0,0,0,0,1,0,0,1,0],[0,0,0,1,1,0,1,1,0],[1,0,1,0,1,1,1,0,0],[0,1,0,0,1,0,0,1,1],[1,0,0,1,0,0,1,0,0],[0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0]],\"reward\":{\"type\":2,\"name\":\"Noodle Bar\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-492462-FoodNStuff.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[39,12,22],[36,32,23],[40,7,34],[6,5,38],[50,47,35],[2,15,35],[36,47,5],[12,25,14]],\"reward\":{\"type\":2,\"name\":\"FoodNStuff\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"65.0.2.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"millenium-fitness\",\"omnia\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":784511336,\"moneyMax\":19612783400,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":858,\"serverGrowth\":79,\"runningScripts\":[]}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"19.6.6.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"alpha-ent\",\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":53.949999999999974,\"minDifficulty\":27,\"moneyAvailable\":26988810175,\"moneyMax\":26988810175,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":896,\"serverGrowth\":65,\"runningScripts\":[]}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"50.2.1.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"omnia\"}}]]},\"serversOnNetwork\":[\"galactic-cyber\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":922765434,\"moneyMax\":23069135850,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":933,\"serverGrowth\":68,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1315447122750,33],\"dataMap\":{\"megacorp\":[0,406,448,406]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":233184.40414803068,\"onlineMoneyMade\":0,\"onlineRunningTime\":243139.6100004677,\"ramUsage\":2.2,\"server\":\"omnia\",\"scriptKey\":\"work.js*[\\\"megacorp\\\",1315447122750,33]\",\"title\":\"work.js megacorp 1315447122750 33\",\"threads\":14,\"temporary\":false}}]}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"78.9.9.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"solaris\",\"applied-energetics\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":946890367,\"moneyMax\":23672259175,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":788,\"serverGrowth\":73,\"runningScripts\":[]}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-846273-FoodNStuff.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\")(aa()\",\"reward\":{\"type\":2,\"name\":\"FoodNStuff\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"77.9.9.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":780819843,\"moneyMax\":19520496075,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":834,\"serverGrowth\":72,\"runningScripts\":[]}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-571855-NoodleBar.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-8,-4,-8,6,-3,9,7,10,3,-1,0,-9,-3,3],\"reward\":{\"type\":2,\"name\":\"Noodle Bar\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"81.8.3.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"solaris\"}}]]},\"serversOnNetwork\":[\"deltaone\",\"zb-def\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":709114223,\"moneyMax\":17727855575,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":831,\"serverGrowth\":75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1315447122750,33],\"dataMap\":{\"megacorp\":[0,1740,1856,1682]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":969588.3178232614,\"onlineMoneyMade\":0,\"onlineRunningTime\":243139.6100004677,\"ramUsage\":2.2,\"server\":\"solaris\",\"scriptKey\":\"work.js*[\\\"megacorp\\\",1315447122750,33]\",\"title\":\"work.js megacorp 1315447122750 33\",\"threads\":58,\"temporary\":false}}]}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"15.8.0.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"aerocorp\",\"defcomm\",\"univ-energy\",\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":1393800314,\"moneyMax\":34845007850,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":837,\"serverGrowth\":64,\"runningScripts\":[]}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"62.9.4.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"global-pharm\"}}]]},\"serversOnNetwork\":[\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":1695149452,\"moneyMax\":42378736300,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":836,\"serverGrowth\":82,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1315447122750,33],\"dataMap\":{\"megacorp\":[0,841,928,841]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":484794.1589116307,\"onlineMoneyMade\":0,\"onlineRunningTime\":243139.6100004677,\"ramUsage\":2.2,\"server\":\"global-pharm\",\"scriptKey\":\"work.js*[\\\"megacorp\\\",1315447122750,33]\",\"title\":\"work.js megacorp 1315447122750 33\",\"threads\":29,\"temporary\":false}}]}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-232783.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[163,[1,2,3,5,7,9,10,11]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-812231.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"0010000000010001101001111110010000010100100000111111000011010110\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"53.4.1.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"solaris\",\"microdyne\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":1125477998,\"moneyMax\":28136949950,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":844,\"serverGrowth\":68,\"runningScripts\":[]}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-108063-Volhaven.cct\",\"type\":\"Total Ways to Sum\",\"data\":75,\"reward\":{\"type\":0,\"name\":\"Volhaven\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-58947-BitRunners.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"6llhhh55555555555Ujjjjjf6kknnnnnnnnhhkkkkkkkkNNNNNNN333333vvvvvvvvvvvvQQoVJVVF77AAAAxxxxxx\",\"reward\":{\"type\":0,\"name\":\"BitRunners\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"65.0.9.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":1310763773,\"moneyMax\":32769094325,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":806,\"serverGrowth\":76,\"runningScripts\":[]}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"71.4.8.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"unitalife\"}}]]},\"serversOnNetwork\":[\"galactic-cyber\",\"icarus\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":1003742351,\"moneyMax\":25093558775,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":813,\"serverGrowth\":73,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1315447122750,33],\"dataMap\":{\"megacorp\":[2.1549101386434835,420,434,420]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":236601.02545422892,\"onlineMoneyMade\":2.1549101386434835,\"onlineRunningTime\":243139.6100004677,\"ramUsage\":2.2,\"server\":\"unitalife\",\"scriptKey\":\"work.js*[\\\"megacorp\\\",1315447122750,33]\",\"title\":\"work.js megacorp 1315447122750 33\",\"threads\":14,\"temporary\":false}}]}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"84.1.6.2\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"lexo-corp\"}}]]},\"serversOnNetwork\":[\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":752240234,\"moneyMax\":18806005850,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":729,\"serverGrowth\":58,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1315447122750,33],\"dataMap\":{\"megacorp\":[0,1450,2030,1624]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":980204.2483103774,\"onlineMoneyMade\":0,\"onlineRunningTime\":243139.6100004677,\"ramUsage\":2.2,\"server\":\"lexo-corp\",\"scriptKey\":\"work.js*[\\\"megacorp\\\",1315447122750,33]\",\"title\":\"work.js megacorp 1315447122750 33\",\"threads\":58,\"temporary\":false}}]}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":true,\"ip\":\"21.5.7.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"rho-construction\"}}]]},\"serversOnNetwork\":[\"rothman-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":49,\"hackDifficulty\":30.999999999999964,\"minDifficulty\":16,\"moneyAvailable\":564456482,\"moneyMax\":14111412050,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":512,\"serverGrowth\":52,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1315447122750,33],\"dataMap\":{\"megacorp\":[0,754,986,812]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":490102.1241551887,\"onlineMoneyMade\":0,\"onlineRunningTime\":243139.6100004677,\"ramUsage\":2.2,\"server\":\"rho-construction\",\"scriptKey\":\"work.js*[\\\"megacorp\\\",1315447122750,33]\",\"title\":\"work.js megacorp 1315447122750 33\",\"threads\":29,\"temporary\":false}}]}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"83.0.1.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"alpha-ent\"}}]]},\"serversOnNetwork\":[\"rothman-uni\",\"aerocorp\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":630688223,\"moneyMax\":15767205575,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":507,\"serverGrowth\":57,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1315447122750,33],\"dataMap\":{\"megacorp\":[0,378,462,406]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":235746.8701276794,\"onlineMoneyMade\":0,\"onlineRunningTime\":243139.6100004677,\"ramUsage\":2.2,\"server\":\"alpha-ent\",\"scriptKey\":\"work.js*[\\\"megacorp\\\",1315447122750,33]\",\"title\":\"work.js megacorp 1315447122750 33\",\"threads\":14,\"temporary\":false}}]}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"52.3.2.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"aevum-police\"}}]]},\"serversOnNetwork\":[\"zb-institute\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":312844137,\"moneyMax\":7821103425,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":419,\"serverGrowth\":39,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1315447122750,33],\"dataMap\":{\"megacorp\":[0,189,238,196]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":118300.51272711447,\"onlineMoneyMade\":0,\"onlineRunningTime\":243139.6100004677,\"ramUsage\":2.2,\"server\":\"aevum-police\",\"scriptKey\":\"work.js*[\\\"megacorp\\\",1315447122750,33]\",\"title\":\"work.js megacorp 1315447122750 33\",\"threads\":7,\"temporary\":false}}]}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-384817.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"34612883\",\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":true,\"ip\":\"17.9.9.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"rothman-uni\"}}]]},\"serversOnNetwork\":[\"johnson-ortho\",\"rho-construction\",\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":52,\"hackDifficulty\":52,\"minDifficulty\":17,\"moneyAvailable\":208817282,\"moneyMax\":5220432050,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":419,\"serverGrowth\":35,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1315447122750,33],\"dataMap\":{\"megacorp\":[0,196,224,203]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":116592.20207401535,\"onlineMoneyMade\":0,\"onlineRunningTime\":243139.6100004677,\"ramUsage\":2.2,\"server\":\"rothman-uni\",\"scriptKey\":\"work.js*[\\\"megacorp\\\",1315447122750,33]\",\"title\":\"work.js megacorp 1315447122750 33\",\"threads\":7,\"temporary\":false}}]}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-510151.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[4,[31,67,10,22,84,189,48,81,46,142,184,131,43,106,79,191,25]],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-577544-Daedalus.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,0,0,0,0,0,1,1,0,0,0],[0,0,0,0,0,0,1,0,0,0,0,0],[1,0,0,0,0,0,0,0,1,0,0,0],[0,0,1,0,1,1,0,1,0,0,0,0],[0,1,1,0,1,0,0,1,1,1,0,0],[0,0,0,1,1,0,0,0,0,1,0,0]],\"reward\":{\"type\":0,\"name\":\"Daedalus\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"84.8.9.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"zb-institute\"}}]]},\"serversOnNetwork\":[\"avmnite-02h\",\"lexo-corp\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":955909425,\"moneyMax\":23897735625,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":736,\"serverGrowth\":84,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1315447122750,33],\"dataMap\":{\"megacorp\":[0,217,224,203]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":117446.35740056491,\"onlineMoneyMade\":0,\"onlineRunningTime\":243139.6100004677,\"ramUsage\":2.2,\"server\":\"zb-institute\",\"scriptKey\":\"work.js*[\\\"megacorp\\\",1315447122750,33]\",\"title\":\"work.js megacorp 1315447122750 33\",\"threads\":7,\"temporary\":false}}]}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-794759-NoodleBar.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[93,63,155,177,172,28,16,165,18,68,176,36,95,194,154,6,133,157,187,45,188,185,198,85,151,159,146,52,156,78,9,169,197,13,152,144,22,180,141],\"reward\":{\"type\":2,\"name\":\"Noodle Bar\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":true,\"ip\":\"36.4.2.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"summit-uni\"}}]]},\"serversOnNetwork\":[\"computek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":46,\"hackDifficulty\":46,\"minDifficulty\":15,\"moneyAvailable\":215195470,\"moneyMax\":5379886750,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":441,\"serverGrowth\":41,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1315447122750,33],\"dataMap\":{\"megacorp\":[0,203,238,196]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":118300.51272711447,\"onlineMoneyMade\":0,\"onlineRunningTime\":243139.6100004677,\"ramUsage\":2.2,\"server\":\"summit-uni\",\"scriptKey\":\"work.js*[\\\"megacorp\\\",1315447122750,33]\",\"title\":\"work.js megacorp 1315447122750 33\",\"threads\":7,\"temporary\":false}}]}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"20.5.4.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"netlink\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":536024614,\"moneyMax\":13400615350,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":639,\"serverGrowth\":65,\"runningScripts\":[]}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":true,\"ip\":\"7.0.7.1\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"catalyst\"}}]]},\"serversOnNetwork\":[\"the-hub\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":378890379,\"moneyMax\":9472259475,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":430,\"serverGrowth\":26,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1315447122750,33],\"dataMap\":{\"megacorp\":[0,1508,1856,1682]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":962511.0308318507,\"onlineMoneyMade\":0,\"onlineRunningTime\":243139.6100004677,\"ramUsage\":2.2,\"server\":\"catalyst\",\"scriptKey\":\"work.js*[\\\"megacorp\\\",1315447122750,33]\",\"title\":\"work.js megacorp 1315447122750 33\",\"threads\":58,\"temporary\":false}}]}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-929882-NoodleBar.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,0,0,1,1,0,0,0,1,1,1],[0,1,0,0,0,0,0,1,0,0,0,0],[0,0,0,1,1,0,0,0,0,1,0,1],[0,0,0,0,0,1,1,0,1,0,1,0],[0,1,0,0,1,1,1,1,0,1,0,0],[0,1,1,1,0,0,1,1,0,0,1,1],[1,0,0,0,0,0,1,0,0,0,0,0],[0,1,0,0,0,0,0,0,0,1,0,0]],\"reward\":{\"type\":2,\"name\":\"Noodle Bar\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":true,\"ip\":\"71.7.4.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"the-hub\"}}]]},\"serversOnNetwork\":[\"phantasy\",\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":39,\"hackDifficulty\":39.154,\"minDifficulty\":13,\"moneyAvailable\":0,\"moneyMax\":4398698100,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":286,\"serverGrowth\":52,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1315447122750,33],\"dataMap\":{\"megacorp\":[0,406,448,406]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":234038.55947458025,\"onlineMoneyMade\":0,\"onlineRunningTime\":243139.6100004677,\"ramUsage\":2.2,\"server\":\"the-hub\",\"scriptKey\":\"work.js*[\\\"megacorp\\\",1315447122750,33]\",\"title\":\"work.js megacorp 1315447122750 33\",\"threads\":14,\"temporary\":false}}]}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"computek\",\"httpPortOpen\":true,\"ip\":\"88.4.5.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"silver-helix\",\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63.266,\"minDifficulty\":21,\"moneyAvailable\":0,\"moneyMax\":6180155975,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":355,\"serverGrowth\":56,\"runningScripts\":[]}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-149939.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[168,145,197,200,53,179,145,130,4,118,109,197,94,81,67,71,74,42,186,89,176,63],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-954905-FoodNStuff.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[127,[1,2,5,6,7,8,12,14,15,17,18]],\"reward\":{\"type\":2,\"name\":\"FoodNStuff\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":true,\"ip\":\"41.9.6.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"netlink\"}}]]},\"serversOnNetwork\":[\"silver-helix\",\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":413,\"serverGrowth\":69,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1315447122750,33],\"dataMap\":{\"megacorp\":[0,392,448,406]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":234038.55947458025,\"onlineMoneyMade\":0,\"onlineRunningTime\":243139.6100004677,\"ramUsage\":2.2,\"server\":\"netlink\",\"scriptKey\":\"work.js*[\\\"megacorp\\\",1315447122750,33]\",\"title\":\"work.js megacorp 1315447122750 33\",\"threads\":14,\"temporary\":false}}]}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":true,\"ip\":\"79.6.3.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"silver-helix\",\"rothman-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":38,\"hackDifficulty\":38.152,\"minDifficulty\":13,\"moneyAvailable\":0,\"moneyMax\":2050764750,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":298,\"serverGrowth\":57,\"runningScripts\":[]}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-802567-TheBlackHand.cct\",\"type\":\"Total Ways to Sum\",\"data\":27,\"reward\":{\"type\":0,\"name\":\"The Black Hand\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-75220.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[17,35,12,34,7,49,17],[43,28,31,19,16,48,32],[12,45,9,37,38,23,23],[39,5,42,27,9,9,19],[2,48,27,5,15,37,20],[33,35,11,15,42,16,43],[26,39,36,14,26,5,32],[45,27,4,33,14,10,30],[36,43,8,44,16,40,49]],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-684419.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[41,[1,2,3,5,6,7,8,10,11,12,13,14]],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":true,\"ip\":\"24.5.6.0\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"n00dles\"}}]]},\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1.2980000000000003,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":3000,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1315447122750,33],\"dataMap\":{\"megacorp\":[0,30,32,29]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":16717.039962470037,\"onlineMoneyMade\":0,\"onlineRunningTime\":243139.6100004677,\"ramUsage\":2.2,\"server\":\"n00dles\",\"scriptKey\":\"work.js*[\\\"megacorp\\\",1315447122750,33]\",\"title\":\"work.js megacorp 1315447122750 33\",\"threads\":1,\"temporary\":false}}]}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":true,\"ip\":\"17.2.1.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"foodnstuff\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":10.086,\"minDifficulty\":3,\"moneyAvailable\":0,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1315447122750,33],\"dataMap\":{\"megacorp\":[0,203,224,203]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":117019.27973729013,\"onlineMoneyMade\":0,\"onlineRunningTime\":243139.6100004677,\"ramUsage\":2.2,\"server\":\"foodnstuff\",\"scriptKey\":\"work.js*[\\\"megacorp\\\",1315447122750,33]\",\"title\":\"work.js megacorp 1315447122750 33\",\"threads\":7,\"temporary\":false}}]}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":true,\"ip\":\"15.7.5.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"sigma-cosmetics\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":10.086,\"minDifficulty\":3,\"moneyAvailable\":0,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":5,\"serverGrowth\":10,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1315447122750,33],\"dataMap\":{\"megacorp\":[0,210,224,203]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":117019.27973729013,\"onlineMoneyMade\":0,\"onlineRunningTime\":243139.6100004677,\"ramUsage\":2.2,\"server\":\"sigma-cosmetics\",\"scriptKey\":\"work.js*[\\\"megacorp\\\",1315447122750,33]\",\"title\":\"work.js megacorp 1315447122750 33\",\"threads\":7,\"temporary\":false}}]}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":true,\"ip\":\"25.5.6.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"joesguns\"}}]]},\"serversOnNetwork\":[\"home\",\"max-hardware\",\"CSEC\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15.092,\"minDifficulty\":5,\"moneyAvailable\":0,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":10,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1315447122750,33],\"dataMap\":{\"megacorp\":[0,210,224,203]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":117019.27973729013,\"onlineMoneyMade\":0,\"onlineRunningTime\":243139.6100004677,\"ramUsage\":2.2,\"server\":\"joesguns\",\"scriptKey\":\"work.js*[\\\"megacorp\\\",1315447122750,33]\",\"title\":\"work.js megacorp 1315447122750 33\",\"threads\":7,\"temporary\":false}}]}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-640759-NoodleBar.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":385910422749,\"reward\":{\"type\":2,\"name\":\"Noodle Bar\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":true,\"ip\":\"1.4.7.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"zer0\"}}]]},\"serversOnNetwork\":[\"n00dles\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25.108,\"minDifficulty\":8,\"moneyAvailable\":0,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":75,\"serverGrowth\":40,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1315447122750,33],\"dataMap\":{\"megacorp\":[0,392,448,406]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":234038.55947458025,\"onlineMoneyMade\":0,\"onlineRunningTime\":243139.6100004677,\"ramUsage\":2.2,\"server\":\"zer0\",\"scriptKey\":\"work.js*[\\\"megacorp\\\",1315447122750,33]\",\"title\":\"work.js megacorp 1315447122750 33\",\"threads\":14,\"temporary\":false}}]}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-704308.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"60964722\",\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-978451-Daedalus.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[3,[16,18,174,50,143,132,83,176,195,11,141,171,47]],\"reward\":{\"type\":0,\"name\":\"Daedalus\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":true,\"ip\":\"92.2.7.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"nectar-net\"}}]]},\"serversOnNetwork\":[\"iron-gym\",\"neo-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20.098,\"minDifficulty\":7,\"moneyAvailable\":0,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":20,\"serverGrowth\":25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1315447122750,33],\"dataMap\":{\"megacorp\":[0,210,224,203]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":117019.27973729013,\"onlineMoneyMade\":0,\"onlineRunningTime\":243139.6100004677,\"ramUsage\":2.2,\"server\":\"nectar-net\",\"scriptKey\":\"work.js*[\\\"megacorp\\\",1315447122750,33]\",\"title\":\"work.js megacorp 1315447122750 33\",\"threads\":7,\"temporary\":false}}]}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":true,\"ip\":\"97.9.1.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"neo-net\"}}]]},\"serversOnNetwork\":[\"nectar-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25.106,\"minDifficulty\":8,\"moneyAvailable\":0,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":50,\"serverGrowth\":25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1315447122750,33],\"dataMap\":{\"megacorp\":[0,392,490,392]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":240017.6467604272,\"onlineMoneyMade\":0,\"onlineRunningTime\":243139.6100004677,\"ramUsage\":2.2,\"server\":\"neo-net\",\"scriptKey\":\"work.js*[\\\"megacorp\\\",1315447122750,33]\",\"title\":\"work.js megacorp 1315447122750 33\",\"threads\":14,\"temporary\":false}}]}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-578780-NoodleBar.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[183,[1,2,4,5,6,9,10,11,14]],\"reward\":{\"type\":2,\"name\":\"Noodle Bar\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":true,\"ip\":\"57.2.3.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"silver-helix\"}}]]},\"serversOnNetwork\":[\"CSEC\",\"computek\",\"netlink\",\"johnson-ortho\",\"crush-fitness\",\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30.122,\"minDifficulty\":10,\"moneyAvailable\":0,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":150,\"serverGrowth\":30,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1315447122750,33],\"dataMap\":{\"megacorp\":[0,812,928,841]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":484794.1589116307,\"onlineMoneyMade\":0,\"onlineRunningTime\":243139.6100004677,\"ramUsage\":2.2,\"server\":\"silver-helix\",\"scriptKey\":\"work.js*[\\\"megacorp\\\",1315447122750,33]\",\"title\":\"work.js megacorp 1315447122750 33\",\"threads\":29,\"temporary\":false}}]}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":true,\"ip\":\"94.1.0.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"hong-fang-tea\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15.094,\"minDifficulty\":5,\"moneyAvailable\":0,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":30,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1315447122750,33],\"dataMap\":{\"megacorp\":[0,210,224,203]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":117446.35740056491,\"onlineMoneyMade\":0,\"onlineRunningTime\":243139.6100004677,\"ramUsage\":2.2,\"server\":\"hong-fang-tea\",\"scriptKey\":\"work.js*[\\\"megacorp\\\",1315447122750,33]\",\"title\":\"work.js megacorp 1315447122750 33\",\"threads\":7,\"temporary\":false}}]}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-260351-Volhaven.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[50,26,42,17,9,5],[41,48,22,6,41,10],[14,13,50,9,5,17],[36,38,3,34,36,36]],\"reward\":{\"type\":0,\"name\":\"Volhaven\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":true,\"ip\":\"98.7.7.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"harakiri-sushi\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15.094,\"minDifficulty\":5,\"moneyAvailable\":0,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":40,\"serverGrowth\":40,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1315447122750,33],\"dataMap\":{\"megacorp\":[0,203,224,203]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":117019.27973729013,\"onlineMoneyMade\":0,\"onlineRunningTime\":243139.6100004677,\"ramUsage\":2.2,\"server\":\"harakiri-sushi\",\"scriptKey\":\"work.js*[\\\"megacorp\\\",1315447122750,33]\",\"title\":\"work.js megacorp 1315447122750 33\",\"threads\":7,\"temporary\":false}}]}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-874639-BitRunners.cct\",\"type\":\"Array Jumping Game\",\"data\":[5,6,7,5,4,7,3,7],\"reward\":{\"type\":0,\"name\":\"BitRunners\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":true,\"ip\":\"13.7.6.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"phantasy\"}}]]},\"serversOnNetwork\":[\"CSEC\",\"the-hub\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20.104,\"minDifficulty\":7,\"moneyAvailable\":0,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":100,\"serverGrowth\":35,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1315447122750,33],\"dataMap\":{\"megacorp\":[0,420,448,406]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":234038.55947458025,\"onlineMoneyMade\":0,\"onlineRunningTime\":243139.6100004677,\"ramUsage\":2.2,\"server\":\"phantasy\",\"scriptKey\":\"work.js*[\\\"megacorp\\\",1315447122750,33]\",\"title\":\"work.js megacorp 1315447122750 33\",\"threads\":14,\"temporary\":false}}]}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":true,\"ip\":\"76.1.5.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"max-hardware\"}}]]},\"serversOnNetwork\":[\"joesguns\",\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15.096,\"minDifficulty\":5,\"moneyAvailable\":0,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":80,\"serverGrowth\":30,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1315447122750,33],\"dataMap\":{\"megacorp\":[0,378,448,406]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":234038.55947458025,\"onlineMoneyMade\":0,\"onlineRunningTime\":243139.6100004677,\"ramUsage\":2.2,\"server\":\"max-hardware\",\"scriptKey\":\"work.js*[\\\"megacorp\\\",1315447122750,33]\",\"title\":\"work.js megacorp 1315447122750 33\",\"threads\":14,\"temporary\":false}}]}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-760116-Netburners.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[6,[119,191,43,174,28,132,171,77,49,149,38,140,74,104,168,191,120,57,156,122,30,113,145,171,110,97,66,131,21,46,112,170,191,113,109,120,164,155,151,109]],\"reward\":{\"type\":0,\"name\":\"Netburners\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-435033.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"()(()))a\",\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":true,\"ip\":\"87.7.7.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"omega-net\"}}]]},\"serversOnNetwork\":[\"max-hardware\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":34,\"hackDifficulty\":34.134,\"minDifficulty\":11,\"moneyAvailable\":0,\"moneyMax\":1717310175,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":197,\"serverGrowth\":34,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1315447122750,33],\"dataMap\":{\"megacorp\":[0,406,448,406]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":234038.55947458025,\"onlineMoneyMade\":0,\"onlineRunningTime\":243139.6100004677,\"ramUsage\":2.2,\"server\":\"omega-net\",\"scriptKey\":\"work.js*[\\\"megacorp\\\",1315447122750,33]\",\"title\":\"work.js megacorp 1315447122750 33\",\"threads\":14,\"temporary\":false}}]}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":true,\"ip\":\"44.7.0.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":39,\"hackDifficulty\":39.15,\"minDifficulty\":13,\"moneyAvailable\":0,\"moneyMax\":1190980750,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":257,\"serverGrowth\":33,\"runningScripts\":[]}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":true,\"ip\":\"24.8.1.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"iron-gym\"}}]]},\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30.118,\"minDifficulty\":10,\"moneyAvailable\":0,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":100,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1315447122750,33],\"dataMap\":{\"megacorp\":[0,434,448,406]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":234892.71480112983,\"onlineMoneyMade\":0,\"onlineRunningTime\":243139.6100004677,\"ramUsage\":2.2,\"server\":\"iron-gym\",\"scriptKey\":\"work.js*[\\\"megacorp\\\",1315447122750,33]\",\"title\":\"work.js megacorp 1315447122750 33\",\"threads\":14,\"temporary\":false}}]}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":true,\"ip\":\"0.8.0.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"millenium-fitness\"}}]]},\"serversOnNetwork\":[\"syscore\",\"galactic-cyber\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":51,\"hackDifficulty\":51,\"minDifficulty\":17,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":481,\"serverGrowth\":29,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1315447122750,33],\"dataMap\":{\"megacorp\":[0,378,462,406]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":234892.71480112983,\"onlineMoneyMade\":0,\"onlineRunningTime\":243139.6100004677,\"ramUsage\":2.2,\"server\":\"millenium-fitness\",\"scriptKey\":\"work.js*[\\\"megacorp\\\",1315447122750,33]\",\"title\":\"work.js megacorp 1315447122750 33\",\"threads\":14,\"temporary\":false}}]}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-772828.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,1],[0,0,0],[0,0,1],[0,0,0],[0,0,0],[0,0,0]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-57623.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":3696772,\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":true,\"ip\":\"91.1.2.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"powerhouse-fitness\"}}]]},\"serversOnNetwork\":[\"omnitek\",\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":38.732,\"minDifficulty\":19,\"moneyAvailable\":22500000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1010,\"serverGrowth\":54,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1315447122750,33],\"dataMap\":{\"megacorp\":[0,783,928,841]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":483024.837163778,\"onlineMoneyMade\":0,\"onlineRunningTime\":243139.6100004677,\"ramUsage\":2.2,\"server\":\"powerhouse-fitness\",\"scriptKey\":\"work.js*[\\\"megacorp\\\",1315447122750,33]\",\"title\":\"work.js megacorp 1315447122750 33\",\"threads\":29,\"temporary\":false}}]}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"11.9.0.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":42,\"hackDifficulty\":42,\"minDifficulty\":14,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":727,\"serverGrowth\":48,\"runningScripts\":[]}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-19940.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[7],[6,8],[3,8,3],[2,9,5,6],[7,3,5,3,6],[3,6,8,1,7,9],[3,8,4,7,9,6,7]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-734909-TheBlackHand.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[5],[9,6],[6,7,1],[7,7,7,9]],\"reward\":{\"type\":0,\"name\":\"The Black Hand\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"9.5.2.1\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"run4theh111z\"}}]]},\"serversOnNetwork\":[\"zb-def\",\"helios\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":527,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1315447122750,33],\"dataMap\":{\"megacorp\":[0,3364,3712,3364]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1932099.348655112,\"onlineMoneyMade\":0,\"onlineRunningTime\":243139.6100004677,\"ramUsage\":2.2,\"server\":\"run4theh111z\",\"scriptKey\":\"work.js*[\\\"megacorp\\\",1315447122750,33]\",\"title\":\"work.js megacorp 1315447122750 33\",\"threads\":116,\"temporary\":false}}]}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":true,\"ip\":\"30.9.7.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"I.I.I.I\"}}]]},\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":340,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1315447122750,33],\"dataMap\":{\"megacorp\":[0,841,928,841]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":483024.837163778,\"onlineMoneyMade\":0,\"onlineRunningTime\":243139.6100004677,\"ramUsage\":2.2,\"server\":\"I.I.I.I\",\"scriptKey\":\"work.js*[\\\"megacorp\\\",1315447122750,33]\",\"title\":\"work.js megacorp 1315447122750 33\",\"threads\":29,\"temporary\":false}}]}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":true,\"ip\":\"55.7.3.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"avmnite-02h\"}}]]},\"serversOnNetwork\":[\"silver-helix\",\"zb-institute\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":206,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1315447122750,33],\"dataMap\":{\"megacorp\":[0,841,928,841]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":483024.837163778,\"onlineMoneyMade\":0,\"onlineRunningTime\":243139.6100004677,\"ramUsage\":2.2,\"server\":\"avmnite-02h\",\"scriptKey\":\"work.js*[\\\"megacorp\\\",1315447122750,33]\",\"title\":\"work.js megacorp 1315447122750 33\",\"threads\":29,\"temporary\":false}}]}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"15.7.2.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\".\"}}]]},\"serversOnNetwork\":[\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":514,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1315447122750,33],\"dataMap\":{\"megacorp\":[0,210,224,203]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":117019.27973729013,\"onlineMoneyMade\":0,\"onlineRunningTime\":243139.6100004677,\"ramUsage\":2.2,\"server\":\".\",\"scriptKey\":\"work.js*[\\\"megacorp\\\",1315447122750,33]\",\"title\":\"work.js megacorp 1315447122750 33\",\"threads\":7,\"temporary\":false}}]}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-642981.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"1000100000000101100011001000100100011110110010101111111011000100\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-801359-FoodNStuff.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"10100000000100100100010111101101\",\"reward\":{\"type\":2,\"name\":\"FoodNStuff\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":true,\"ip\":\"43.5.4.0\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"CSEC\"}}]]},\"serversOnNetwork\":[\"joesguns\",\"silver-helix\",\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":52,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1315447122750,33],\"dataMap\":{\"megacorp\":[0,90,96,87]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":50151.119887410125,\"onlineMoneyMade\":0,\"onlineRunningTime\":243139.6100004677,\"ramUsage\":2.2,\"server\":\"CSEC\",\"scriptKey\":\"work.js*[\\\"megacorp\\\",1315447122750,33]\",\"title\":\"work.js megacorp 1315447122750 33\",\"threads\":3,\"temporary\":false}}]}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-170048-NoodleBar.cct\",\"type\":\"Encryption II: Vigenère Cipher\",\"data\":[\"ARRAYPOPUPLOGICTRASHLOGIN\",\"CONFIGURE\"],\"reward\":{\"type\":2,\"name\":\"Noodle Bar\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"The-Cave\",\"httpPortOpen\":true,\"ip\":\"69.6.8.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":925,\"serverGrowth\":1,\"runningScripts\":[]}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"61.2.3.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":1,\"runningScripts\":[]}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"19.8.1.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"darkweb\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"qst0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"qst0\",\"httpPortOpen\":true,\"ip\":\"89.9.7.7\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"qst0\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1315447122750,33],\"dataMap\":{\"megacorp\":[40738228589800,14775375,14298750,14775375]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":10439509280.249321,\"onlineMoneyMade\":40738228589800,\"onlineRunningTime\":243139.6100004677,\"ramUsage\":2.2,\"server\":\"qst0\",\"scriptKey\":\"work.js*[\\\"megacorp\\\",1315447122750,33]\",\"title\":\"work.js megacorp 1315447122750 33\",\"threads\":476625,\"temporary\":false}}]}},\"qst1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"qst1\",\"httpPortOpen\":true,\"ip\":\"24.8.0.5\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"qst1\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1315447122750,33],\"dataMap\":{\"megacorp\":[0,13822125,14775375,14298750]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7938679759.075389,\"onlineMoneyMade\":0,\"onlineRunningTime\":243139.6100004677,\"ramUsage\":2.2,\"server\":\"qst1\",\"scriptKey\":\"work.js*[\\\"megacorp\\\",1315447122750,33]\",\"title\":\"work.js megacorp 1315447122750 33\",\"threads\":476625,\"temporary\":false}}]}},\"qst2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"qst2\",\"httpPortOpen\":true,\"ip\":\"24.3.2.1\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"qst2\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1315447122750,33],\"dataMap\":{\"megacorp\":[0,13345500,15252000,13822125]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7938679759.075389,\"onlineMoneyMade\":0,\"onlineRunningTime\":243139.6100004677,\"ramUsage\":2.2,\"server\":\"qst2\",\"scriptKey\":\"work.js*[\\\"megacorp\\\",1315447122750,33]\",\"title\":\"work.js megacorp 1315447122750 33\",\"threads\":476625,\"temporary\":false}}]}},\"qst3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"qst3\",\"httpPortOpen\":true,\"ip\":\"5.5.9.0\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"qst3\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1315447122750,33],\"dataMap\":{\"megacorp\":[0,14298750,15252000,13822125]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7967759172.112295,\"onlineMoneyMade\":0,\"onlineRunningTime\":243139.6100004677,\"ramUsage\":2.2,\"server\":\"qst3\",\"scriptKey\":\"work.js*[\\\"megacorp\\\",1315447122750,33]\",\"title\":\"work.js megacorp 1315447122750 33\",\"threads\":476625,\"temporary\":false}}]}},\"qst4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"qst4\",\"httpPortOpen\":true,\"ip\":\"23.3.6.4\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"qst4\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1315447122750,33],\"dataMap\":{\"megacorp\":[0,13345500,15252000,13822125]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7938679759.075389,\"onlineMoneyMade\":0,\"onlineRunningTime\":243139.6100004677,\"ramUsage\":2.2,\"server\":\"qst4\",\"scriptKey\":\"work.js*[\\\"megacorp\\\",1315447122750,33]\",\"title\":\"work.js megacorp 1315447122750 33\",\"threads\":476625,\"temporary\":false}}]}},\"qst5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"qst5\",\"httpPortOpen\":true,\"ip\":\"63.3.6.8\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"qst5\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1315447122750,33],\"dataMap\":{\"megacorp\":[0,14298750,15252000,13822125]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7967759172.112295,\"onlineMoneyMade\":0,\"onlineRunningTime\":243139.6100004677,\"ramUsage\":2.2,\"server\":\"qst5\",\"scriptKey\":\"work.js*[\\\"megacorp\\\",1315447122750,33]\",\"title\":\"work.js megacorp 1315447122750 33\",\"threads\":476625,\"temporary\":false}}]}},\"qst6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"qst6\",\"httpPortOpen\":true,\"ip\":\"19.9.3.2\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"qst6\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1315447122750,33],\"dataMap\":{\"megacorp\":[0,12868875,14775375,14298750]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7909600346.038483,\"onlineMoneyMade\":0,\"onlineRunningTime\":243139.6100004677,\"ramUsage\":2.2,\"server\":\"qst6\",\"scriptKey\":\"work.js*[\\\"megacorp\\\",1315447122750,33]\",\"title\":\"work.js megacorp 1315447122750 33\",\"threads\":476625,\"temporary\":false}}]}},\"qst7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"qst7\",\"httpPortOpen\":true,\"ip\":\"80.9.9.6\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"qst7\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1315447122750,33],\"dataMap\":{\"megacorp\":[7.129873715159656,13822125,15252000,13822125]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8025917998.186107,\"onlineMoneyMade\":7.129873715159656,\"onlineRunningTime\":243139.6100004677,\"ramUsage\":2.2,\"server\":\"qst7\",\"scriptKey\":\"work.js*[\\\"megacorp\\\",1315447122750,33]\",\"title\":\"work.js megacorp 1315447122750 33\",\"threads\":476625,\"temporary\":false}}]}},\"qst8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"qst8\",\"httpPortOpen\":true,\"ip\":\"11.4.5.3\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"qst8\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1315447122750,33],\"dataMap\":{\"megacorp\":[101.62880536841222,13822125,15252000,13822125]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8054997411.223013,\"onlineMoneyMade\":101.62880536841222,\"onlineRunningTime\":243139.6100004677,\"ramUsage\":2.2,\"server\":\"qst8\",\"scriptKey\":\"work.js*[\\\"megacorp\\\",1315447122750,33]\",\"title\":\"work.js megacorp 1315447122750 33\",\"threads\":476625,\"temporary\":false}}]}},\"qst9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"qst9\",\"httpPortOpen\":true,\"ip\":\"57.0.9.7\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"qst9\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1315447122750,33],\"dataMap\":{\"megacorp\":[0,14298750,15252000,13822125]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7996838585.149201,\"onlineMoneyMade\":0,\"onlineRunningTime\":243139.6100004677,\"ramUsage\":2.2,\"server\":\"qst9\",\"scriptKey\":\"work.js*[\\\"megacorp\\\",1315447122750,33]\",\"title\":\"work.js megacorp 1315447122750 33\",\"threads\":476625,\"temporary\":false}}]}},\"qst10\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"qst10\",\"httpPortOpen\":true,\"ip\":\"73.6.7.1\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"qst10\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1315447122750,33],\"dataMap\":{\"megacorp\":[0,14775375,15252000,13822125]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7996838585.149201,\"onlineMoneyMade\":0,\"onlineRunningTime\":243139.6100004677,\"ramUsage\":2.2,\"server\":\"qst10\",\"scriptKey\":\"work.js*[\\\"megacorp\\\",1315447122750,33]\",\"title\":\"work.js megacorp 1315447122750 33\",\"threads\":476625,\"temporary\":false}}]}},\"qst11\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"qst11\",\"httpPortOpen\":true,\"ip\":\"48.0.6.8\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"qst11\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1315447122750,33],\"dataMap\":{\"megacorp\":[0,14298750,15252000,13822125]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7996838585.149201,\"onlineMoneyMade\":0,\"onlineRunningTime\":243139.6100004677,\"ramUsage\":2.2,\"server\":\"qst11\",\"scriptKey\":\"work.js*[\\\"megacorp\\\",1315447122750,33]\",\"title\":\"work.js megacorp 1315447122750 33\",\"threads\":476625,\"temporary\":false}}]}},\"qst12\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"qst12\",\"httpPortOpen\":true,\"ip\":\"61.4.1.0\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"qst12\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1315447122750,33],\"dataMap\":{\"megacorp\":[0,13822125,15252000,13822125]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7996838585.149201,\"onlineMoneyMade\":0,\"onlineRunningTime\":243139.6100004677,\"ramUsage\":2.2,\"server\":\"qst12\",\"scriptKey\":\"work.js*[\\\"megacorp\\\",1315447122750,33]\",\"title\":\"work.js megacorp 1315447122750 33\",\"threads\":476625,\"temporary\":false}}]}},\"qst13\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"qst13\",\"httpPortOpen\":true,\"ip\":\"79.8.5.4\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"qst13\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1315447122750,33],\"dataMap\":{\"megacorp\":[0,14298750,15252000,13822125]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7967759172.112295,\"onlineMoneyMade\":0,\"onlineRunningTime\":243139.6100004677,\"ramUsage\":2.2,\"server\":\"qst13\",\"scriptKey\":\"work.js*[\\\"megacorp\\\",1315447122750,33]\",\"title\":\"work.js megacorp 1315447122750 33\",\"threads\":476625,\"temporary\":false}}]}},\"qst14\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"qst14\",\"httpPortOpen\":true,\"ip\":\"23.9.9.4\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"qst14\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1315447122750,33],\"dataMap\":{\"megacorp\":[1454936735350,12868875,14775375,14298750]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7996838585.1492,\"onlineMoneyMade\":1454936735350,\"onlineRunningTime\":243139.6100004677,\"ramUsage\":2.2,\"server\":\"qst14\",\"scriptKey\":\"work.js*[\\\"megacorp\\\",1315447122750,33]\",\"title\":\"work.js megacorp 1315447122750 33\",\"threads\":476625,\"temporary\":false}}]}},\"qst15\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"qst15\",\"httpPortOpen\":true,\"ip\":\"75.2.0.3\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"qst15\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1315447122750,33],\"dataMap\":{\"megacorp\":[14.519379094431004,13822125,15252000,13822125]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8025917998.186107,\"onlineMoneyMade\":14.519379094431004,\"onlineRunningTime\":243139.6100004677,\"ramUsage\":2.2,\"server\":\"qst15\",\"scriptKey\":\"work.js*[\\\"megacorp\\\",1315447122750,33]\",\"title\":\"work.js megacorp 1315447122750 33\",\"threads\":476625,\"temporary\":false}}]}},\"qst16\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"qst16\",\"httpPortOpen\":true,\"ip\":\"24.2.1.8\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"qst16\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1315447122750,33],\"dataMap\":{\"megacorp\":[37828355119100,14298750,14775375,14775375]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":10352271041.138605,\"onlineMoneyMade\":37828355119100,\"onlineRunningTime\":243139.6100004677,\"ramUsage\":2.2,\"server\":\"qst16\",\"scriptKey\":\"work.js*[\\\"megacorp\\\",1315447122750,33]\",\"title\":\"work.js megacorp 1315447122750 33\",\"threads\":476625,\"temporary\":false}}]}},\"qst17\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"qst17\",\"httpPortOpen\":true,\"ip\":\"75.5.1.1\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"qst17\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1315447122750,33],\"dataMap\":{\"megacorp\":[0,13345500,14775375,14298750]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7909600346.038482,\"onlineMoneyMade\":0,\"onlineRunningTime\":243139.6100004677,\"ramUsage\":2.2,\"server\":\"qst17\",\"scriptKey\":\"work.js*[\\\"megacorp\\\",1315447122750,33]\",\"title\":\"work.js megacorp 1315447122750 33\",\"threads\":476625,\"temporary\":false}}]}},\"qst18\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"qst18\",\"httpPortOpen\":true,\"ip\":\"50.8.5.5\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"qst18\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1315447122750,33],\"dataMap\":{\"megacorp\":[0,14298750,15252000,13822125]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7967759172.112295,\"onlineMoneyMade\":0,\"onlineRunningTime\":243139.6100004677,\"ramUsage\":2.2,\"server\":\"qst18\",\"scriptKey\":\"work.js*[\\\"megacorp\\\",1315447122750,33]\",\"title\":\"work.js megacorp 1315447122750 33\",\"threads\":476625,\"temporary\":false}}]}},\"qst19\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"qst19\",\"httpPortOpen\":true,\"ip\":\"67.9.8.0\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"qst19\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1315447122750,33],\"dataMap\":{\"megacorp\":[0,13822125,14775375,14298750]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7938679759.075388,\"onlineMoneyMade\":0,\"onlineRunningTime\":243139.6100004677,\"ramUsage\":2.2,\"server\":\"qst19\",\"scriptKey\":\"work.js*[\\\"megacorp\\\",1315447122750,33]\",\"title\":\"work.js megacorp 1315447122750 33\",\"threads\":476625,\"temporary\":false}}]}},\"qst20\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"qst20\",\"httpPortOpen\":true,\"ip\":\"30.7.8.1\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"qst20\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1315447122750,33],\"dataMap\":{\"megacorp\":[0,13822125,15252000,13822125]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7938679759.075389,\"onlineMoneyMade\":0,\"onlineRunningTime\":243139.6100004677,\"ramUsage\":2.2,\"server\":\"qst20\",\"scriptKey\":\"work.js*[\\\"megacorp\\\",1315447122750,33]\",\"title\":\"work.js megacorp 1315447122750 33\",\"threads\":476625,\"temporary\":false}}]}},\"qst21\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"qst21\",\"httpPortOpen\":true,\"ip\":\"50.6.7.1\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"qst21\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1315447122750,33],\"dataMap\":{\"megacorp\":[0,13345500,14775375,14298750]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7938679759.075388,\"onlineMoneyMade\":0,\"onlineRunningTime\":243139.6100004677,\"ramUsage\":2.2,\"server\":\"qst21\",\"scriptKey\":\"work.js*[\\\"megacorp\\\",1315447122750,33]\",\"title\":\"work.js megacorp 1315447122750 33\",\"threads\":476625,\"temporary\":false}}]}},\"qst22\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"qst22\",\"httpPortOpen\":true,\"ip\":\"15.3.2.6\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"qst22\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1315447122750,33],\"dataMap\":{\"megacorp\":[1454936735350,13822125,15252000,13822125]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8054997411.223014,\"onlineMoneyMade\":1454936735350,\"onlineRunningTime\":243139.6100004677,\"ramUsage\":2.2,\"server\":\"qst22\",\"scriptKey\":\"work.js*[\\\"megacorp\\\",1315447122750,33]\",\"title\":\"work.js megacorp 1315447122750 33\",\"threads\":476625,\"temporary\":false}}]}},\"qst23\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"qst23\",\"httpPortOpen\":true,\"ip\":\"18.6.6.6\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"qst23\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1315447122750,33],\"dataMap\":{\"megacorp\":[12.3663805822152,14298750,14775375,14298750]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8054997411.223014,\"onlineMoneyMade\":12.3663805822152,\"onlineRunningTime\":243139.6100004677,\"ramUsage\":2.2,\"server\":\"qst23\",\"scriptKey\":\"work.js*[\\\"megacorp\\\",1315447122750,33]\",\"title\":\"work.js megacorp 1315447122750 33\",\"threads\":476625,\"temporary\":false}}]}},\"qst24\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"qst24\",\"httpPortOpen\":true,\"ip\":\"21.4.7.9\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// work.js\\n// Bitburner v2.5.0 (b87b8b4be)\\n// wget https://raw.githubusercontent.com/qst0/bitburner/main/work.js work.js\\n/** @param {import(\\\".\\\").NS } ns */\\n\\nexport async function main(ns) {\\n  const worker_version = 0.2\\n  ns.print(\\\"Worker version: \\\"+ worker_version)\\n\\n  const args = ns.flags([\\n    [\\\"help\\\", false],\\n    [\\\"hack\\\", false],\\n  ]);\\n  if (args.help) {\\n    ns.tprint(\\\"help \\\\n Typically, use main.js to deploy workers.\\\\n\\\"+\\n    \\\" main.js will configure the workers for you\\\\n\\\"+\\n    \\\" run work.js <target> <maxMoney> <minSecurity>\\\")\\n    return;\\n  }\\n\\n  let target = ns.args[0]; if (args.target) { target = args.target }\\n  const targetMaxMoney = ns.args[1];\\n  const targetMinSecurityLevel = ns.args[2];\\n  const minSecurityLevelThresh = 1.2; // 20% margin of error\\n  const targetMoneyThresh = 0.8; //20% margin of error\\n  const time_options = {hour: '2-digit',minute: '2-digit',second: '2-digit'};\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    let currentTime = new Date();\\n    let formattedTime = currentTime.toLocaleTimeString('en-US', time_options);\\n    let targetSecurityLevel = ns.getServerSecurityLevel(target)\\n    let targetMoney = ns.getServerMoneyAvailable(target)\\n\\n    ns.print(formattedTime);\\n\\n    // Print info so we can see what is going on.\\n    ns.print(\\\"INFO Target Info:\\\\n\\\"\\n    +\\\"$\\\"+Math.round(targetMoney)+\\\"\\\\n\\\"\\n    +\\\"$\\\"+targetMaxMoney*targetMoneyThresh+\\\"\\\\n\\\"\\n    +100*(targetMoney/(targetMaxMoney*targetMoneyThresh)) + \\\"%\\\\n\\\"\\n    +Math.round(targetSecurityLevel)+\\\"<\\\"+targetMinSecurityLevel*minSecurityLevelThresh)\\n\\n    let result = \\\"ERROR\\\";\\n    if (args.hack) { //flag --hack for just hacking\\n      console.log(await ns.hack(target));\\n    } else if (targetSecurityLevel > targetMinSecurityLevel*minSecurityLevelThresh) {\\n      result = await ns.weaken(target);\\n    } else if (targetMoney < targetMaxMoney*targetMoneyThresh) {\\n      result = await ns.grow(target);\\n    } else {\\n      result = await ns.hack(target)\\n    }\\n    ns.print(\\\"WARN\\\"+result);\\n  }\\n}\",\"filename\":\"work.js\",\"server\":\"qst24\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1315447122750,33],\"dataMap\":{\"megacorp\":[0,14298750,15252000,13822125]},\"filename\":\"work.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7967759172.112295,\"onlineMoneyMade\":0,\"onlineRunningTime\":243139.6100004677,\"ramUsage\":2.2,\"server\":\"qst24\",\"scriptKey\":\"work.js*[\\\"megacorp\\\",1315447122750,33]\",\"title\":\"work.js megacorp 1315447122750 33\",\"threads\":476625,\"temporary\":false}}]}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.452,\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.5897,\"playerReputation\":0}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.0048,\"playerReputation\":0}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.003,\"playerReputation\":0}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.0013,\"playerReputation\":69.98951267023604}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":1,\"isBanned\":false,\"isMember\":true,\"playerReputation\":6913602.375164928}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":195.6495,\"isBanned\":false,\"isMember\":true,\"playerReputation\":3602975.955295537}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":162.6133,\"isBanned\":false,\"isMember\":true,\"playerReputation\":3199000.508096381}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":165.6038,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":56.4162,\"isBanned\":true,\"isMember\":false,\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":61.9162,\"isBanned\":true,\"isMember\":false,\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":30.3746,\"isBanned\":true,\"isMember\":false,\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":30.8985,\"isBanned\":true,\"isMember\":false,\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":71.5005,\"isBanned\":true,\"isMember\":false,\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":2.6804,\"isBanned\":false,\"isMember\":true,\"playerReputation\":409546.70890997234}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":23.5281,\"isBanned\":false,\"isMember\":true,\"playerReputation\":487360.1899456553}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":137.1401,\"isBanned\":false,\"isMember\":true,\"playerReputation\":2887514.892711803}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":117.1142,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Shadows of Anarchy\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":2,\"isBanned\":false,\"isMember\":true,\"playerReputation\":741.7743830787308}}}","AliasesSave":"{\"s\":\"scan-analyze\",\"a\":\"analyze\",\"b\":\"backdoor\",\"sp\":\"run ServerProfiler.exe\",\"c\":\"connect\",\"ht\":\"killall; run work.js target 0 0 --hack -t 3723\",\"t\":\"target\",\"rh\":\"killall; run hack.js -t 4551 ; tail hack.js\",\"m\":\"killall; run main.js\",\"l\":\"ls\"}","GlobalAliasesSave":"{\"target\":\"computek\"}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":21188.671152534025,\"lastPrice\":21281.94897373591,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.47,\"b\":false,\"otlkMag\":18.45605114855116,\"otlkMagForecast\":32.40803144225309,\"cap\":182796974,\"spreadPerc\":0.5,\"shareTxForMovement\":40926,\"shareTxUntilMovement\":40926,\"totalShares\":120200000,\"maxShares\":24000000}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":4968.86216529444,\"lastPrice\":4987.943889779931,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.41,\"b\":true,\"otlkMag\":18.07144264776519,\"otlkMagForecast\":67.8594580285505,\"cap\":608348483,\"spreadPerc\":0.2,\"shareTxForMovement\":30796,\"shareTxUntilMovement\":30796,\"totalShares\":93300000,\"maxShares\":18700000}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":7369.305916445487,\"lastPrice\":7316.537610848056,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.77,\"b\":true,\"otlkMag\":10.561984179941073,\"otlkMagForecast\":60.59148335352851,\"cap\":190051837,\"spreadPerc\":0.6,\"shareTxForMovement\":63718,\"shareTxUntilMovement\":63718,\"totalShares\":64200000,\"maxShares\":12800000}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":21836.788304400445,\"lastPrice\":21694.54709294137,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":true,\"otlkMag\":10.346392851463643,\"otlkMagForecast\":60.653513414023614,\"cap\":372101241,\"spreadPerc\":0.2,\"shareTxForMovement\":66789,\"shareTxUntilMovement\":66789,\"totalShares\":95900000,\"maxShares\":19200000}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":61053.476636833104,\"lastPrice\":61402.30922401854,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.61,\"b\":false,\"otlkMag\":12.22194086205265,\"otlkMagForecast\":36.96176924765018,\"cap\":517610944,\"spreadPerc\":0.2,\"shareTxForMovement\":38736,\"shareTxUntilMovement\":38736,\"totalShares\":55600000,\"maxShares\":11100000}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":72940.87022509512,\"lastPrice\":73665.0620536634,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.06,\"b\":true,\"otlkMag\":15.808368411881736,\"otlkMagForecast\":63.8837825414192,\"cap\":78270075,\"spreadPerc\":0.1,\"shareTxForMovement\":88536,\"shareTxUntilMovement\":88536,\"totalShares\":34900000,\"maxShares\":7000000}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":52497.09683062653,\"lastPrice\":52092.12299614939,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.83,\"b\":true,\"otlkMag\":10.591983435610302,\"otlkMagForecast\":60.77193086584304,\"cap\":658065772,\"spreadPerc\":0.7,\"shareTxForMovement\":32551,\"shareTxUntilMovement\":32551,\"totalShares\":69600000,\"maxShares\":13900000}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":276428.7614465815,\"lastPrice\":273153.89061702107,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.28,\"b\":true,\"otlkMag\":8.136564405169183,\"otlkMagForecast\":58.39914549612998,\"cap\":638616627,\"spreadPerc\":0.7,\"shareTxForMovement\":62500,\"shareTxUntilMovement\":62500,\"totalShares\":58300000,\"maxShares\":11700000}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":183369.74633577772,\"lastPrice\":184743.7708644565,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.8,\"b\":true,\"otlkMag\":8.56190378139492,\"otlkMagForecast\":57.21473879655799,\"cap\":422748057,\"spreadPerc\":0.2,\"shareTxForMovement\":84609,\"shareTxUntilMovement\":84609,\"totalShares\":56100000,\"maxShares\":11200000}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":26342.830615067014,\"lastPrice\":26173.67337769414,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.69,\"b\":true,\"otlkMag\":10.508166620391114,\"otlkMagForecast\":60.65923736551302,\"cap\":415346333,\"spreadPerc\":0.2,\"shareTxForMovement\":38588,\"shareTxUntilMovement\":38588,\"totalShares\":54000000,\"maxShares\":10800000}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":9322.140101101799,\"lastPrice\":9271.770618844597,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.58,\"b\":true,\"otlkMag\":9.10307608016433,\"otlkMagForecast\":58.7786475640306,\"cap\":304506604,\"spreadPerc\":0.7,\"shareTxForMovement\":88058,\"shareTxUntilMovement\":88058,\"totalShares\":52800000,\"maxShares\":10600000}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":14807.430779376242,\"lastPrice\":14910.064068080237,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.74,\"b\":true,\"otlkMag\":7.317715879213501,\"otlkMagForecast\":57.36640620914363,\"cap\":201226019,\"spreadPerc\":0.7,\"shareTxForMovement\":99932,\"shareTxUntilMovement\":99932,\"totalShares\":74800000,\"maxShares\":15000000}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":16395.153894922965,\"lastPrice\":16502.64941174943,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":false,\"otlkMag\":7.71733328699875,\"otlkMagForecast\":41.53536633492118,\"cap\":85411174,\"spreadPerc\":0.3,\"shareTxForMovement\":50398,\"shareTxUntilMovement\":50398,\"totalShares\":57000000,\"maxShares\":11400000}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":84083.28068525295,\"lastPrice\":84540.06844335335,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.58,\"b\":true,\"otlkMag\":8.03910115824814,\"otlkMagForecast\":60.306794475846196,\"cap\":325231549,\"spreadPerc\":0.7,\"shareTxForMovement\":76820,\"shareTxUntilMovement\":76820,\"totalShares\":39900000,\"maxShares\":8000000}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":15044.986090414513,\"lastPrice\":14963.694868471666,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.58,\"b\":false,\"otlkMag\":6.991600496048189,\"otlkMagForecast\":42.23186416666698,\"cap\":261149508,\"spreadPerc\":0.5,\"shareTxForMovement\":76943,\"shareTxUntilMovement\":76943,\"totalShares\":41700000,\"maxShares\":8300000}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":7462.393511219785,\"lastPrice\":7508.525151492344,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.66,\"b\":false,\"otlkMag\":7.538043602181632,\"otlkMagForecast\":43.146387229285416,\"cap\":13988960,\"spreadPerc\":0.6,\"shareTxForMovement\":102336,\"shareTxUntilMovement\":102336,\"totalShares\":88300000,\"maxShares\":17700000}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":24078.66425297063,\"lastPrice\":24238.792354343623,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.71,\"b\":true,\"otlkMag\":7.436527823999114,\"otlkMagForecast\":58.69816051081837,\"cap\":111219442,\"spreadPerc\":0.6,\"shareTxForMovement\":83255,\"shareTxUntilMovement\":83255,\"totalShares\":26800000,\"maxShares\":5400000}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":39148.462641662845,\"lastPrice\":39353.80547658093,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.56,\"b\":false,\"otlkMag\":8.441334115375934,\"otlkMagForecast\":43.53190409275685,\"cap\":45780226,\"spreadPerc\":0.7,\"shareTxForMovement\":53143,\"shareTxUntilMovement\":53143,\"totalShares\":29200000,\"maxShares\":5800000}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":28354.412707283205,\"lastPrice\":28556.25448526391,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.76,\"b\":false,\"otlkMag\":6.865241046283031,\"otlkMagForecast\":44.182267797484656,\"cap\":450878917,\"spreadPerc\":0.4,\"shareTxForMovement\":51485,\"shareTxUntilMovement\":51485,\"totalShares\":22900000,\"maxShares\":4600000}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":3441.568357291312,\"lastPrice\":3519.9004065110285,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.43,\"b\":false,\"otlkMag\":7.732440816308443,\"otlkMagForecast\":42.43680380389966,\"cap\":183519541,\"spreadPerc\":1.1,\"shareTxForMovement\":18258,\"shareTxUntilMovement\":18258,\"totalShares\":59100000,\"maxShares\":11800000}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":6297.6045957032775,\"lastPrice\":6224.724827096936,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.25,\"b\":true,\"otlkMag\":6.041399639228544,\"otlkMagForecast\":57.493738454822164,\"cap\":128830439,\"spreadPerc\":1,\"shareTxForMovement\":86533,\"shareTxUntilMovement\":86533,\"totalShares\":53600000,\"maxShares\":10700000}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":3956.8522401021905,\"lastPrice\":3975.3831460412166,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.5,\"b\":true,\"otlkMag\":5.830982603133318,\"otlkMagForecast\":57.59767594949883,\"cap\":24224808,\"spreadPerc\":0.3,\"shareTxForMovement\":79815,\"shareTxUntilMovement\":79815,\"totalShares\":53600000,\"maxShares\":10700000}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":11728.17091277898,\"lastPrice\":11950.071509538258,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.02,\"b\":false,\"otlkMag\":11.523011648410202,\"otlkMagForecast\":36.12503200307764,\"cap\":154186780,\"spreadPerc\":1.4,\"shareTxForMovement\":60012,\"shareTxUntilMovement\":60012,\"totalShares\":34100000,\"maxShares\":6800000}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":29015.75439873705,\"lastPrice\":28589.972034288978,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.59,\"b\":false,\"otlkMag\":5.204957457697795,\"otlkMagForecast\":47.03622167412828,\"cap\":164648214,\"spreadPerc\":0.8,\"shareTxForMovement\":27604,\"shareTxUntilMovement\":27604,\"totalShares\":26500000,\"maxShares\":5300000}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":3867.3500735190887,\"lastPrice\":3901.762389821112,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.95,\"b\":true,\"otlkMag\":5.836744711324248,\"otlkMagForecast\":52.41378739625545,\"cap\":119774018,\"spreadPerc\":0.8,\"shareTxForMovement\":71703,\"shareTxUntilMovement\":71703,\"totalShares\":33700000,\"maxShares\":6700000}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":247.78021001481986,\"lastPrice\":242.64386059214354,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.26,\"b\":false,\"otlkMag\":6.296575686350969,\"otlkMagForecast\":44.87561838673421,\"cap\":38718473,\"spreadPerc\":1.9,\"shareTxForMovement\":39836,\"shareTxUntilMovement\":39836,\"totalShares\":14100000,\"maxShares\":2800000}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":4872.03012147694,\"lastPrice\":4829.508714904642,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.94,\"b\":true,\"otlkMag\":6.149178054352104,\"otlkMagForecast\":56.1256789032782,\"cap\":10047156,\"spreadPerc\":1.2,\"shareTxForMovement\":57924,\"shareTxUntilMovement\":57924,\"totalShares\":10300000,\"maxShares\":2100000}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":2534.4891954410764,\"lastPrice\":2552.531036432878,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.76,\"b\":false,\"otlkMag\":5.275016649590235,\"otlkMagForecast\":45.63702139748654,\"cap\":70681841,\"spreadPerc\":0.7,\"shareTxForMovement\":110003,\"shareTxUntilMovement\":110003,\"totalShares\":10700000,\"maxShares\":2100000}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":4417.71209726061,\"lastPrice\":4464.469746361931,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.13,\"b\":false,\"otlkMag\":5.440700020859728,\"otlkMagForecast\":47.74533714527343,\"cap\":18972969,\"spreadPerc\":0.8,\"shareTxForMovement\":61462,\"shareTxUntilMovement\":61462,\"totalShares\":9700000,\"maxShares\":1900000}},\"Joe's Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joe's Guns\",\"symbol\":\"JGN\",\"price\":132559.24420479458,\"lastPrice\":129112.64755706787,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.85,\"b\":true,\"otlkMag\":5.742159918879635,\"otlkMagForecast\":57.136424667637066,\"cap\":1125574,\"spreadPerc\":1,\"shareTxForMovement\":45115,\"shareTxUntilMovement\":45115,\"totalShares\":60300000,\"maxShares\":12100000}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":2212.2119741251895,\"lastPrice\":2247.644300167659,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.71,\"b\":true,\"otlkMag\":13.48822420475212,\"otlkMagForecast\":64.63477792476766,\"cap\":19714393,\"spreadPerc\":0.5,\"shareTxForMovement\":36008,\"shareTxUntilMovement\":36008,\"totalShares\":71800000,\"maxShares\":14400000}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":21129.77963504643,\"lastPrice\":20976.52803272953,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.78,\"b\":false,\"otlkMag\":9.242609816090487,\"otlkMagForecast\":39.30112880140561,\"cap\":309037065,\"spreadPerc\":0.3,\"shareTxForMovement\":144035,\"shareTxUntilMovement\":144035,\"totalShares\":23100000,\"maxShares\":4600000}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":14923.194386126448,\"lastPrice\":15005.663365947874,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.59,\"b\":false,\"otlkMag\":11.516961202577523,\"otlkMagForecast\":38.373070632672516,\"cap\":34389145,\"spreadPerc\":0.8,\"shareTxForMovement\":178548,\"shareTxUntilMovement\":178548,\"totalShares\":28500000,\"maxShares\":5700000}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":1082645,\"lastUpdate\":1699162819776,\"ticksUntilCycle\":12}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":10,\"AutoexecScript\":\"\",\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"EnableHistorySearch\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxRecentScriptsCapacity\":50,\"MaxLogCapacity\":40,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"RemoteFileApiPort\":0,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":true,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":false,\"ShowMiddleNullTimeUnit\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":-2,\"y\":4,\"opened\":false},\"EditorTheme\":{\"common\":{\"accent\":\"B5CEA8\",\"bg\":\"1E1E1E\",\"fg\":\"D4D4D4\"},\"syntax\":{\"tag\":\"569CD6\",\"entity\":\"569CD6\",\"string\":\"CE9178\",\"regexp\":\"646695\",\"markup\":\"569CD6\",\"keyword\":\"569CD6\",\"comment\":\"6A9955\",\"constant\":\"569CD6\",\"error\":\"F44747\"},\"ui\":{\"line\":\"1E1E1E\",\"panel\":{\"bg\":\"252526\",\"selected\":\"252526\",\"border\":\"1E1E1E\"},\"selection\":{\"bg\":\"ADD6FF26\"}},\"base\":\"vs-dark\",\"inherit\":true},\"OwnedAugmentationsOrder\":0,\"PurchaseAugmentationsOrder\":2,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":true,\"MonacoTabSize\":2,\"MonacoDetectIndentation\":false,\"MonacoFontFamily\":\"Lucida Console\",\"MonacoFontSize\":20,\"MonacoFontLigatures\":false,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"MonacoCursorStyle\":\"line\",\"MonacoCursorBlinking\":\"blink\",\"hideTrailingDecimalZeros\":false,\"hideThousandsSeparator\":false,\"useEngineeringNotation\":false,\"disableSuffixes\":false}","VersionSave":"35","AllGangsSave":"","LastExportBonus":"1699162822538","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"fragments\":[],\"isBonusCharging\":false,\"storedCycles\":0}}"}}